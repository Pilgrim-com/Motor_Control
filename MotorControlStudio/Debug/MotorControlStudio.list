
MotorControlStudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080058c8  080058c8  000068c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab0  08005ab0  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005ab0  08005ab0  00007018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005ab0  08005ab0  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005ab8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000018  08005ad0  00007018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005ad0  000071e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb92  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7a  00000000  00000000  00013bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00015a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dd  00000000  00000000  00016728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026125  00000000  00000000  00017105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddbd  00000000  00000000  0003d22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6e7b  00000000  00000000  0004afe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141e62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  00141ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001457f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080058b0 	.word	0x080058b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080058b0 	.word	0x080058b0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	0000      	movs	r0, r0
	...

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfe:	f000 ff4c 	bl	8001a9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c02:	f000 f87d 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c06:	f000 fa81 	bl	800110c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000c0a:	f000 f9db 	bl	8000fc4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c0e:	f000 fa2f 	bl	8001070 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000c12:	f000 f8c1 	bl	8000d98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c16:	f000 f987 	bl	8000f28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // PID cmsis
  PID_VELO.Kp =Kp;
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <main+0xd8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd4 <main+0xdc>)
 8000c20:	6193      	str	r3, [r2, #24]
  PID_VELO.Ki =Ki;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <main+0xe0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd4 <main+0xdc>)
 8000c28:	61d3      	str	r3, [r2, #28]
  PID_VELO.Kd = Kd;
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <main+0xe4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a29      	ldr	r2, [pc, #164]	@ (8000cd4 <main+0xdc>)
 8000c30:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID_VELO, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	4827      	ldr	r0, [pc, #156]	@ (8000cd4 <main+0xdc>)
 8000c36:	f003 fdb3 	bl	80047a0 <arm_pid_init_f32>


//	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <main+0xe8>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	4928      	ldr	r1, [pc, #160]	@ (8000ce4 <main+0xec>)
 8000c44:	4828      	ldr	r0, [pc, #160]	@ (8000ce8 <main+0xf0>)
 8000c46:	f000 fc61 	bl	800150c <MotorInit>

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c4a:	213c      	movs	r1, #60	@ 0x3c
 8000c4c:	4827      	ldr	r0, [pc, #156]	@ (8000cec <main+0xf4>)
 8000c4e:	f002 fb67 	bl	8003320 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8000c52:	4827      	ldr	r0, [pc, #156]	@ (8000cf0 <main+0xf8>)
 8000c54:	f002 f8d2 	bl	8002dfc <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 8000c58:	4826      	ldr	r0, [pc, #152]	@ (8000cf4 <main+0xfc>)
 8000c5a:	f002 f8cf 	bl	8002dfc <HAL_TIM_Base_Start_IT>
//	        target_velocity = (velocity_sign ? 200.0f : -200.0f);
//	    }

	    // sin Wave

		target_velocity = 200*sin(2*M_PI*5*(HAL_GetTick()/10e3));
 8000c5e:	f000 ff81 	bl	8001b64 <HAL_GetTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fc19 	bl	800049c <__aeabi_ui2d>
 8000c6a:	a315      	add	r3, pc, #84	@ (adr r3, 8000cc0 <main+0xc8>)
 8000c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c70:	f7ff fdb8 	bl	80007e4 <__aeabi_ddiv>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	4610      	mov	r0, r2
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	a312      	add	r3, pc, #72	@ (adr r3, 8000cc8 <main+0xd0>)
 8000c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c82:	f7ff fc85 	bl	8000590 <__aeabi_dmul>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	ec43 2b17 	vmov	d7, r2, r3
 8000c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8000c92:	eef0 0a67 	vmov.f32	s1, s15
 8000c96:	f003 fde7 	bl	8004868 <sin>
 8000c9a:	ec51 0b10 	vmov	r0, r1, d0
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <main+0x100>)
 8000ca4:	f7ff fc74 	bl	8000590 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff ff50 	bl	8000b54 <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a11      	ldr	r2, [pc, #68]	@ (8000cfc <main+0x104>)
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e7d0      	b.n	8000c5e <main+0x66>
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40c38800 	.word	0x40c38800
 8000cc8:	2955385e 	.word	0x2955385e
 8000ccc:	403f6a7a 	.word	0x403f6a7a
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	200001bc 	.word	0x200001bc
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200001b0 	.word	0x200001b0
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	20000034 	.word	0x20000034
 8000ce8:	20000190 	.word	0x20000190
 8000cec:	200000cc 	.word	0x200000cc
 8000cf0:	20000118 	.word	0x20000118
 8000cf4:	20000080 	.word	0x20000080
 8000cf8:	40690000 	.word	0x40690000
 8000cfc:	20000000 	.word	0x20000000

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	@ 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2238      	movs	r2, #56	@ 0x38
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fd7c 	bl	800480c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f001 f9f8 	bl	8002118 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d42:	2355      	movs	r3, #85	@ 0x55
 8000d44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fa92 	bl	8002280 <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d62:	f000 fbcd 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fd90 	bl	80028a4 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d8a:	f000 fbb9 	bl	8001500 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b09c      	sub	sp, #112	@ 0x70
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2234      	movs	r2, #52	@ 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fd1a 	bl	800480c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd8:	4b51      	ldr	r3, [pc, #324]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000dda:	4a52      	ldr	r2, [pc, #328]	@ (8000f24 <MX_TIM1_Init+0x18c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000dde:	4b50      	ldr	r3, [pc, #320]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000de0:	22a9      	movs	r2, #169	@ 0xa9
 8000de2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000dea:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000dec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df8:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b48      	ldr	r3, [pc, #288]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e04:	4846      	ldr	r0, [pc, #280]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000e06:	f001 ff31 	bl	8002c6c <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f000 fb76 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e1e:	4619      	mov	r1, r3
 8000e20:	483f      	ldr	r0, [pc, #252]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000e22:	f002 fd6f 	bl	8003904 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e2c:	f000 fb68 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e30:	483b      	ldr	r0, [pc, #236]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000e32:	f002 f85b 	bl	8002eec <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e3c:	f000 fb60 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e50:	4619      	mov	r1, r3
 8000e52:	4833      	ldr	r0, [pc, #204]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000e54:	f003 fb34 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e5e:	f000 fb4f 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	@ 0x60
 8000e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4826      	ldr	r0, [pc, #152]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000e88:	f002 fc28 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e92:	f000 fb35 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4820      	ldr	r0, [pc, #128]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000ea0:	f002 fc1c 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000eaa:	f000 fb29 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481a      	ldr	r0, [pc, #104]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000eb8:	f002 fc10 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000ec2:	f000 fb1d 	bl	8001500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ede:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000f04:	f003 fb72 	bl	80045ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000f0e:	f000 faf7 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <MX_TIM1_Init+0x188>)
 8000f14:	f000 fcf8 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8000f18:	bf00      	nop
 8000f1a:	3770      	adds	r7, #112	@ 0x70
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000034 	.word	0x20000034
 8000f24:	40012c00 	.word	0x40012c00

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f50:	22a9      	movs	r2, #169	@ 0xa9
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f70:	f001 fe7c 	bl	8002c6c <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f7a:	f000 fac1 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8c:	f002 fcba 	bl	8003904 <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f96:	f000 fab3 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000fa8:	f003 fa8a 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 faa5 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000080 	.word	0x20000080

08000fc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	@ 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2224      	movs	r2, #36	@ 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fc1a 	bl	800480c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <MX_TIM4_Init+0xa8>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001008:	2303      	movs	r3, #3
 800100a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8001034:	f002 f8ce 	bl	80031d4 <HAL_TIM_Encoder_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800103e:	f000 fa5f 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <MX_TIM4_Init+0xa4>)
 8001050:	f003 fa36 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800105a:	f000 fa51 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	@ 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000cc 	.word	0x200000cc
 800106c:	40000800 	.word	0x40000800

08001070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_TIM5_Init+0x94>)
 8001090:	4a1d      	ldr	r2, [pc, #116]	@ (8001108 <MX_TIM5_Init+0x98>)
 8001092:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_TIM5_Init+0x94>)
 8001096:	22a9      	movs	r2, #169	@ 0xa9
 8001098:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_TIM5_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_TIM5_Init+0x94>)
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_TIM5_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_TIM5_Init+0x94>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010b4:	4813      	ldr	r0, [pc, #76]	@ (8001104 <MX_TIM5_Init+0x94>)
 80010b6:	f001 fdd9 	bl	8002c6c <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80010c0:	f000 fa1e 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <MX_TIM5_Init+0x94>)
 80010d2:	f002 fc17 	bl	8003904 <HAL_TIM_ConfigClockSource>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80010dc:	f000 fa10 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_TIM5_Init+0x94>)
 80010ee:	f003 f9e7 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80010f8:	f000 fa02 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000118 	.word	0x20000118
 8001108:	40000c00 	.word	0x40000c00

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a40      	ldr	r2, [pc, #256]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b3e      	ldr	r3, [pc, #248]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800113a:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <MX_GPIO_Init+0x11c>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	4a3a      	ldr	r2, [pc, #232]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001146:	4b38      	ldr	r3, [pc, #224]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4a34      	ldr	r2, [pc, #208]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <MX_GPIO_Init+0x11c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a2e      	ldr	r2, [pc, #184]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b2c      	ldr	r3, [pc, #176]	@ (8001228 <MX_GPIO_Init+0x11c>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118a:	f000 ff89 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	21c0      	movs	r1, #192	@ 0xc0
 8001192:	4826      	ldr	r0, [pc, #152]	@ (800122c <MX_GPIO_Init+0x120>)
 8001194:	f000 ff84 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	481f      	ldr	r0, [pc, #124]	@ (800122c <MX_GPIO_Init+0x120>)
 80011b0:	f000 fdf4 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011b4:	230c      	movs	r3, #12
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011c4:	230c      	movs	r3, #12
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f000 fde3 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d6:	2320      	movs	r3, #32
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f0:	f000 fdd4 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23c0      	movs	r3, #192	@ 0xc0
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <MX_GPIO_Init+0x120>)
 800120c:	f000 fdc6 	bl	8001d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	f000 fd8c 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121a:	2028      	movs	r0, #40	@ 0x28
 800121c:	f000 fda3 	bl	8001d66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <VelocityControl>:

/* USER CODE BEGIN 4 */
void VelocityControl() {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

	error = target_velocity - QEIdata.QEIAngularVelocity;
 8001236:	4b3f      	ldr	r3, [pc, #252]	@ (8001334 <VelocityControl+0x104>)
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <VelocityControl+0x108>)
 800123e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <VelocityControl+0x10c>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
//
//
//	// PID output
//	output = Kp * error + Ki * velocity_error_integral;

	output = arm_pid_f32(&PID_VELO, error);
 800124c:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <VelocityControl+0x10c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a3b      	ldr	r2, [pc, #236]	@ (8001340 <VelocityControl+0x110>)
 8001252:	60fa      	str	r2, [r7, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	ed93 7a00 	vldr	s14, [r3]
 800125c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001260:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	edd3 6a01 	vldr	s13, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001270:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001274:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	edd3 6a02 	vldr	s13, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	edd3 7a04 	vldr	s15, [r3, #16]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a24      	ldr	r2, [pc, #144]	@ (8001344 <VelocityControl+0x114>)
 80012b2:	6013      	str	r3, [r2, #0]

	// Clamp output
	if (output > 65535) output = 65535;
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <VelocityControl+0x114>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001348 <VelocityControl+0x118>
 80012be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	dd03      	ble.n	80012d0 <VelocityControl+0xa0>
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <VelocityControl+0x114>)
 80012ca:	4a20      	ldr	r2, [pc, #128]	@ (800134c <VelocityControl+0x11c>)
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e00c      	b.n	80012ea <VelocityControl+0xba>
	else if (output < -65535) output = -65535;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <VelocityControl+0x114>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001350 <VelocityControl+0x120>
 80012da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d502      	bpl.n	80012ea <VelocityControl+0xba>
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <VelocityControl+0x114>)
 80012e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <VelocityControl+0x124>)
 80012e8:	601a      	str	r2, [r3, #0]

	// Motor control
	MotorSet(&revolute_motor, 1000, fabs(output), output >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <VelocityControl+0x114>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eeb0 7ae7 	vabs.f32	s14, s15
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <VelocityControl+0x114>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	bfac      	ite	ge
 8001304:	2301      	movge	r3, #1
 8001306:	2300      	movlt	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f083 0301 	eor.w	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	eef0 0a47 	vmov.f32	s1, s14
 8001318:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001358 <VelocityControl+0x128>
 800131c:	480f      	ldr	r0, [pc, #60]	@ (800135c <VelocityControl+0x12c>)
 800131e:	f000 f91f 	bl	8001560 <MotorSet>

	// Store error for next loop
	last_velocity_error = error;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <VelocityControl+0x10c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <VelocityControl+0x130>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000
 8001338:	20000168 	.word	0x20000168
 800133c:	200001b8 	.word	0x200001b8
 8001340:	200001bc 	.word	0x200001bc
 8001344:	200001b4 	.word	0x200001b4
 8001348:	477fff00 	.word	0x477fff00
 800134c:	477fff00 	.word	0x477fff00
 8001350:	c77fff00 	.word	0xc77fff00
 8001354:	c77fff00 	.word	0xc77fff00
 8001358:	447a0000 	.word	0x447a0000
 800135c:	20000190 	.word	0x20000190
 8001360:	200001ac 	.word	0x200001ac

08001364 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d108      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	1e54      	subs	r4, r2, #1
 800137c:	f143 0500 	adc.w	r5, r3, #0
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001382:	e9c3 4500 	strd	r4, r5, [r3]
	}

	if (htim == &htim2) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d103      	bne.n	8001396 <HAL_TIM_PeriodElapsedCallback+0x32>
//		MotorSet(&prismatic_motor, 2000, 65535, GPIO_PIN_SET);
		QEIEncoderPosVel_Update();
 800138e:	f000 f827 	bl	80013e0 <QEIEncoderPosVel_Update>
		VelocityControl();
 8001392:	f7ff ff4d 	bl	8001230 <VelocityControl>
	}

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bdb0      	pop	{r4, r5, r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000118 	.word	0x20000118
 80013a4:	20000188 	.word	0x20000188
 80013a8:	20000080 	.word	0x20000080

080013ac <micros>:

uint64_t micros() {
 80013ac:	b4b0      	push	{r4, r5, r7}
 80013ae:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <micros+0x2c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	4611      	mov	r1, r2
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <micros+0x30>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	1884      	adds	r4, r0, r2
 80013c4:	eb41 0503 	adc.w	r5, r1, r3
 80013c8:	4622      	mov	r2, r4
 80013ca:	462b      	mov	r3, r5
}
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bcb0      	pop	{r4, r5, r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000118 	.word	0x20000118
 80013dc:	20000188 	.word	0x20000188

080013e0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update() {
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	QEIdata.TimeStamp[NEW] = micros();
 80013e6:	f7ff ffe1 	bl	80013ac <micros>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4942      	ldr	r1, [pc, #264]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80013f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 80013f4:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <QEIEncoderPosVel_Update+0x11c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fa:	4a3f      	ldr	r2, [pc, #252]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80013fc:	6013      	str	r3, [r2, #0]
	QEIdata.QEIPostion_1turn = (QEIdata.Position[NEW] / 8192) * 1800;
 80013fe:	4b3e      	ldr	r3, [pc, #248]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0b5b      	lsrs	r3, r3, #13
 8001404:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 8001416:	edc3 7a06 	vstr	s15, [r3, #24]
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	607b      	str	r3, [r7, #4]
	if (diffPosition > (65535 / 2))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800142c:	db05      	blt.n	800143a <QEIEncoderPosVel_Update+0x5a>
		diffPosition -= 65535;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001434:	3bff      	subs	r3, #255	@ 0xff
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e008      	b.n	800144c <QEIEncoderPosVel_Update+0x6c>
	else if (diffPosition < -(65535 / 2))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001440:	dc04      	bgt.n	800144c <QEIEncoderPosVel_Update+0x6c>
		diffPosition += 65535;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001448:	33ff      	adds	r3, #255	@ 0xff
 800144a:	607b      	str	r3, [r7, #4]
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 800144e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 8001454:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001458:	1a84      	subs	r4, r0, r2
 800145a:	eb61 0503 	sbc.w	r5, r1, r3
			* 0.000001;
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7ff f85f 	bl	8000524 <__aeabi_ul2d>
 8001466:	a320      	add	r3, pc, #128	@ (adr r3, 80014e8 <QEIEncoderPosVel_Update+0x108>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f890 	bl	8000590 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb6c 	bl	8000b54 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	603b      	str	r3, [r7, #0]
	if (diffTime == 0)
 8001480:	edd7 7a00 	vldr	s15, [r7]
 8001484:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d025      	beq.n	80014da <QEIEncoderPosVel_Update+0xfa>
		return;
	QEIdata.QEIAngularVelocity = (float) (diffPosition / diffTime) * ((2.0*M_PI)/8192);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001498:	edd7 7a00 	vldr	s15, [r7]
 800149c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014a0:	ee16 0a90 	vmov	r0, s13
 80014a4:	f7ff f81c 	bl	80004e0 <__aeabi_f2d>
 80014a8:	a311      	add	r3, pc, #68	@ (adr r3, 80014f0 <QEIEncoderPosVel_Update+0x110>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f86f 	bl	8000590 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fb4b 	bl	8000b54 <__aeabi_d2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80014c2:	61d3      	str	r3, [r2, #28]
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80014ca:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80014ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014d2:	4909      	ldr	r1, [pc, #36]	@ (80014f8 <QEIEncoderPosVel_Update+0x118>)
 80014d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80014d8:	e000      	b.n	80014dc <QEIEncoderPosVel_Update+0xfc>
		return;
 80014da:	bf00      	nop
}
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	f3af 8000 	nop.w
 80014e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80014ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80014f0:	54442d18 	.word	0x54442d18
 80014f4:	3f4921fb 	.word	0x3f4921fb
 80014f8:	20000168 	.word	0x20000168
 80014fc:	200000cc 	.word	0x200000cc

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <MotorInit+0x4c>)
 8001526:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8b3a      	ldrh	r2, [r7, #24]
 800153e:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f001 fbeb 	bl	8002d1c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4619      	mov	r1, r3
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f001 fd30 	bl	8002fb0 <HAL_TIM_PWM_Start>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0a21fe80 	.word	0x0a21fe80
 800155c:	00000000 	.word	0x00000000

08001560 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val, GPIO_PinState dir)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	ed87 0a02 	vstr	s0, [r7, #8]
 800156c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
	if (freq == 0)
 8001574:	edd7 7a02 	vldr	s15, [r7, #8]
 8001578:	eef5 7a40 	vcmp.f32	s15, #0.0
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	d137      	bne.n	80015f2 <MotorSet+0x92>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	895b      	ldrh	r3, [r3, #10]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <MotorSet+0x36>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, dir);
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8001594:	e0e9      	b.n	800176a <MotorSet+0x20a>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	895b      	ldrh	r3, [r3, #10]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d105      	bne.n	80015aa <MotorSet+0x4a>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2300      	movs	r3, #0
 80015a6:	6393      	str	r3, [r2, #56]	@ 0x38
 80015a8:	e0df      	b.n	800176a <MotorSet+0x20a>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	895b      	ldrh	r3, [r3, #10]
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d105      	bne.n	80015be <MotorSet+0x5e>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80015bc:	e0d5      	b.n	800176a <MotorSet+0x20a>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	895b      	ldrh	r3, [r3, #10]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d105      	bne.n	80015d2 <MotorSet+0x72>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d0:	e0cb      	b.n	800176a <MotorSet+0x20a>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	895b      	ldrh	r3, [r3, #10]
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d105      	bne.n	80015e6 <MotorSet+0x86>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	6493      	str	r3, [r2, #72]	@ 0x48
 80015e4:	e0c1      	b.n	800176a <MotorSet+0x20a>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80015f0:	e0bb      	b.n	800176a <MotorSet+0x20a>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160a:	ee17 2a90 	vmov	r2, s15
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800161a:	33fe      	adds	r3, #254	@ 0xfe
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff3d 	bl	800049c <__aeabi_ui2d>
 8001622:	a355      	add	r3, pc, #340	@ (adr r3, 8001778 <MotorSet+0x218>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f8dc 	bl	80007e4 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa6e 	bl	8000b14 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8a1b      	ldrh	r3, [r3, #16]
 8001654:	3301      	adds	r3, #1
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001662:	ed97 7a02 	vldr	s14, [r7, #8]
 8001666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800166e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001676:	ee17 3a90 	vmov	r3, s15
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * val / 65535.00);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8a5b      	ldrh	r3, [r3, #18]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	ee17 0a90 	vmov	r0, s15
 8001698:	f7fe ff22 	bl	80004e0 <__aeabi_f2d>
 800169c:	a336      	add	r3, pc, #216	@ (adr r3, 8001778 <MotorSet+0x218>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f89f 	bl	80007e4 <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa31 	bl	8000b14 <__aeabi_d2uiz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	619a      	str	r2, [r3, #24]
		HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, dir);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6858      	ldr	r0, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	891b      	ldrh	r3, [r3, #8]
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	4619      	mov	r1, r3
 80016c8:	f000 fcea 	bl	80020a0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8a1a      	ldrh	r2, [r3, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8a5a      	ldrh	r2, [r3, #18]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8a5a      	ldrh	r2, [r3, #18]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	895b      	ldrh	r3, [r3, #10]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <MotorSet+0x1a4>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	6992      	ldr	r2, [r2, #24]
 8001700:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001702:	e032      	b.n	800176a <MotorSet+0x20a>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	895b      	ldrh	r3, [r3, #10]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d106      	bne.n	800171a <MotorSet+0x1ba>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001718:	e027      	b.n	800176a <MotorSet+0x20a>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	895b      	ldrh	r3, [r3, #10]
 800171e:	2b08      	cmp	r3, #8
 8001720:	d106      	bne.n	8001730 <MotorSet+0x1d0>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800172e:	e01c      	b.n	800176a <MotorSet+0x20a>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	895b      	ldrh	r3, [r3, #10]
 8001734:	2b0c      	cmp	r3, #12
 8001736:	d106      	bne.n	8001746 <MotorSet+0x1e6>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001744:	e011      	b.n	800176a <MotorSet+0x20a>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	895b      	ldrh	r3, [r3, #10]
 800174a:	2b10      	cmp	r3, #16
 800174c:	d106      	bne.n	800175c <MotorSet+0x1fc>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800175a:	e006      	b.n	800176a <MotorSet+0x20a>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001768:	e7ff      	b.n	800176a <MotorSet+0x20a>
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	00000000 	.word	0x00000000
 800177c:	40efffe0 	.word	0x40efffe0

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	@ 0x60
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017b6:	f000 fd53 	bl	8002260 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <HAL_TIM_Base_MspInit+0x9c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10c      	bne.n	80017f4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017f2:	e032      	b.n	800185a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017fc:	d114      	bne.n	8001828 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	201c      	movs	r0, #28
 800181c:	f000 fa89 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001820:	201c      	movs	r0, #28
 8001822:	f000 faa0 	bl	8001d66 <HAL_NVIC_EnableIRQ>
}
 8001826:	e018      	b.n	800185a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0f      	ldr	r2, [pc, #60]	@ (800186c <HAL_TIM_Base_MspInit+0xa4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_TIM_Base_MspInit+0xa0>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2032      	movs	r0, #50	@ 0x32
 8001850:	f000 fa6f 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001854:	2032      	movs	r0, #50	@ 0x32
 8001856:	f000 fa86 	bl	8001d66 <HAL_NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40021000 	.word	0x40021000
 800186c:	40000c00 	.word	0x40000c00

08001870 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <HAL_TIM_Encoder_MspInit+0x8c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12f      	bne.n	80018f2 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x90>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001896:	4a1a      	ldr	r2, [pc, #104]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x90>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6593      	str	r3, [r2, #88]	@ 0x58
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x90>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x90>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x90>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x90>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c2:	23c0      	movs	r3, #192	@ 0xc0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018d2:	2302      	movs	r3, #2
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4809      	ldr	r0, [pc, #36]	@ (8001904 <HAL_TIM_Encoder_MspInit+0x94>)
 80018de:	f000 fa5d 	bl	8001d9c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	201e      	movs	r0, #30
 80018e8:	f000 fa23 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018ec:	201e      	movs	r0, #30
 80018ee:	f000 fa3a 	bl	8001d66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40000800 	.word	0x40000800
 8001900:	40021000 	.word	0x40021000
 8001904:	48000400 	.word	0x48000400

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <HAL_TIM_MspPostInit+0x68>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d11d      	bne.n	8001966 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_TIM_MspPostInit+0x6c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_TIM_MspPostInit+0x6c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_TIM_MspPostInit+0x6c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001942:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001954:	2306      	movs	r3, #6
 8001956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001962:	f000 fa1b 	bl	8001d9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40012c00 	.word	0x40012c00
 8001974:	40021000 	.word	0x40021000

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <NMI_Handler+0x4>

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <MemManage_Handler+0x4>

08001990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <UsageFault_Handler+0x4>

080019a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 f8b7 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM2_IRQHandler+0x10>)
 80019de:	f001 fd2d 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000080 	.word	0x20000080

080019ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM4_IRQHandler+0x10>)
 80019f2:	f001 fd23 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000cc 	.word	0x200000cc

08001a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a08:	f000 fb62 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM5_IRQHandler+0x10>)
 8001a16:	f001 fd11 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000118 	.word	0x20000118

08001a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a48:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff ffea 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	@ (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f002 fed1 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff f8bd 	bl	8000bf8 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   r0, =_estack
 8001a80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001a8c:	08005ab8 	.word	0x08005ab8
  ldr r2, =_sbss
 8001a90:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001a94:	200001e4 	.word	0x200001e4

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>

08001a9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f939 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f80e 	bl	8001acc <HAL_InitTick>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	e001      	b.n	8001ac0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001abc:	f7ff fe60 	bl	8001780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_InitTick+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d022      	beq.n	8001b26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_InitTick+0x6c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_InitTick+0x68>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f944 	bl	8001d82 <HAL_SYSTICK_Config>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10f      	bne.n	8001b20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d809      	bhi.n	8001b1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b06:	2200      	movs	r2, #0
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	f000 f910 	bl	8001d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <HAL_InitTick+0x70>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e004      	b.n	8001b2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000014 	.word	0x20000014
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000010 	.word	0x20000010

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a03      	ldr	r2, [pc, #12]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	200001e0 	.word	0x200001e0
 8001b60:	20000014 	.word	0x20000014

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200001e0 	.word	0x200001e0

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff40 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff90 	bl	8001c70 <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5f 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff33 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa4 	bl	8001cd8 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001daa:	e15a      	b.n	8002062 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 814c 	beq.w	800205c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d005      	beq.n	8001ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d130      	bne.n	8001e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e12:	2201      	movs	r2, #1
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 0201 	and.w	r2, r3, #1
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d017      	beq.n	8001e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d123      	bne.n	8001ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	6939      	ldr	r1, [r7, #16]
 8001eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0203 	and.w	r2, r3, #3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80a6 	beq.w	800205c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f10:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_GPIO_Init+0x2e4>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f14:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_GPIO_Init+0x2e4>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f1c:	4b58      	ldr	r3, [pc, #352]	@ (8002080 <HAL_GPIO_Init+0x2e4>)
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f28:	4a56      	ldr	r2, [pc, #344]	@ (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f52:	d01f      	beq.n	8001f94 <HAL_GPIO_Init+0x1f8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_GPIO_Init+0x2ec>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d019      	beq.n	8001f90 <HAL_GPIO_Init+0x1f4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800208c <HAL_GPIO_Init+0x2f0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_GPIO_Init+0x1f0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a4a      	ldr	r2, [pc, #296]	@ (8002090 <HAL_GPIO_Init+0x2f4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00d      	beq.n	8001f88 <HAL_GPIO_Init+0x1ec>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a49      	ldr	r2, [pc, #292]	@ (8002094 <HAL_GPIO_Init+0x2f8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_Init+0x1e8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a48      	ldr	r2, [pc, #288]	@ (8002098 <HAL_GPIO_Init+0x2fc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_GPIO_Init+0x1e4>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	e00a      	b.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f80:	2306      	movs	r3, #6
 8001f82:	e008      	b.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e006      	b.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e004      	b.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e002      	b.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f94:	2300      	movs	r3, #0
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	f002 0203 	and.w	r2, r2, #3
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	4093      	lsls	r3, r2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa6:	4937      	ldr	r1, [pc, #220]	@ (8002084 <HAL_GPIO_Init+0x2e8>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb4:	4b39      	ldr	r3, [pc, #228]	@ (800209c <HAL_GPIO_Init+0x300>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fd8:	4a30      	ldr	r2, [pc, #192]	@ (800209c <HAL_GPIO_Init+0x300>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fde:	4b2f      	ldr	r3, [pc, #188]	@ (800209c <HAL_GPIO_Init+0x300>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002002:	4a26      	ldr	r2, [pc, #152]	@ (800209c <HAL_GPIO_Init+0x300>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_GPIO_Init+0x300>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800202c:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <HAL_GPIO_Init+0x300>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_GPIO_Init+0x300>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002056:	4a11      	ldr	r2, [pc, #68]	@ (800209c <HAL_GPIO_Init+0x300>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f ae9d 	bne.w	8001dac <HAL_GPIO_Init+0x10>
  }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	40010000 	.word	0x40010000
 8002088:	48000400 	.word	0x48000400
 800208c:	48000800 	.word	0x48000800
 8002090:	48000c00 	.word	0x48000c00
 8002094:	48001000 	.word	0x48001000
 8002098:	48001400 	.word	0x48001400
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f806 	bl	8002100 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d141      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002126:	4b4b      	ldr	r3, [pc, #300]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800212e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002132:	d131      	bne.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002134:	4b47      	ldr	r3, [pc, #284]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800213a:	4a46      	ldr	r2, [pc, #280]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002140:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002144:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800214c:	4a41      	ldr	r2, [pc, #260]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002152:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002154:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2232      	movs	r2, #50	@ 0x32
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a3f      	ldr	r2, [pc, #252]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216a:	e002      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3b01      	subs	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002172:	4b38      	ldr	r3, [pc, #224]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217e:	d102      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f2      	bne.n	800216c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002186:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002192:	d158      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e057      	b.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002198:	4b2e      	ldr	r3, [pc, #184]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219e:	4a2d      	ldr	r2, [pc, #180]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021a8:	e04d      	b.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b0:	d141      	bne.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b2:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021be:	d131      	bne.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c0:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c6:	4a23      	ldr	r2, [pc, #140]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d0:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2232      	movs	r2, #50	@ 0x32
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9b      	lsrs	r3, r3, #18
 80021f2:	3301      	adds	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f6:	e002      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220a:	d102      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f2      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221e:	d112      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e011      	b.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002230:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002234:	e007      	b.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002244:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40007000 	.word	0x40007000
 8002258:	2000000c 	.word	0x2000000c
 800225c:	431bde83 	.word	0x431bde83

08002260 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800226a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40007000 	.word	0x40007000

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e2fe      	b.n	8002890 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d075      	beq.n	800238a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229e:	4b97      	ldr	r3, [pc, #604]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a8:	4b94      	ldr	r3, [pc, #592]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d102      	bne.n	80022be <HAL_RCC_OscConfig+0x3e>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_OscConfig+0x44>
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d10b      	bne.n	80022dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	4b8d      	ldr	r3, [pc, #564]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d05b      	beq.n	8002388 <HAL_RCC_OscConfig+0x108>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d157      	bne.n	8002388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e2d9      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x74>
 80022e6:	4b85      	ldr	r3, [pc, #532]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a84      	ldr	r2, [pc, #528]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e01d      	b.n	8002330 <HAL_RCC_OscConfig+0xb0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x98>
 80022fe:	4b7f      	ldr	r3, [pc, #508]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7e      	ldr	r2, [pc, #504]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b7c      	ldr	r3, [pc, #496]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7b      	ldr	r2, [pc, #492]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0xb0>
 8002318:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a77      	ldr	r2, [pc, #476]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800231e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b75      	ldr	r3, [pc, #468]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a74      	ldr	r2, [pc, #464]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff fc14 	bl	8001b64 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff fc10 	bl	8001b64 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e29e      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002352:	4b6a      	ldr	r3, [pc, #424]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0xc0>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff fc00 	bl	8001b64 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff fbfc 	bl	8001b64 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e28a      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237a:	4b60      	ldr	r3, [pc, #384]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0xe8>
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d075      	beq.n	8002482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	4b59      	ldr	r3, [pc, #356]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	4b56      	ldr	r3, [pc, #344]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0x136>
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_OscConfig+0x13c>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d11f      	bne.n	80023fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	4b4f      	ldr	r3, [pc, #316]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x154>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e25d      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b49      	ldr	r3, [pc, #292]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	4946      	ldr	r1, [pc, #280]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023e8:	4b45      	ldr	r3, [pc, #276]	@ (8002500 <HAL_RCC_OscConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fb6d 	bl	8001acc <HAL_InitTick>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d043      	beq.n	8002480 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e249      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3c      	ldr	r2, [pc, #240]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff fba8 	bl	8001b64 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff fba4 	bl	8001b64 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e232      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242a:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b31      	ldr	r3, [pc, #196]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	492d      	ldr	r1, [pc, #180]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
 800244a:	e01a      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244c:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2a      	ldr	r2, [pc, #168]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff fb84 	bl	8001b64 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7ff fb80 	bl	8001b64 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e20e      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002472:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1e0>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d041      	beq.n	8002512 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 8002498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249c:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7ff fb5d 	bl	8001b64 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7ff fb59 	bl	8001b64 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1e7      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c0:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ef      	beq.n	80024ae <HAL_RCC_OscConfig+0x22e>
 80024ce:	e020      	b.n	8002512 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d6:	4a09      	ldr	r2, [pc, #36]	@ (80024fc <HAL_RCC_OscConfig+0x27c>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff fb40 	bl	8001b64 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e6:	e00d      	b.n	8002504 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff fb3c 	bl	8001b64 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d906      	bls.n	8002504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1ca      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002504:	4b8c      	ldr	r3, [pc, #560]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ea      	bne.n	80024e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a6 	beq.w	800266c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002524:	4b84      	ldr	r3, [pc, #528]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x2b4>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x2b6>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b7f      	ldr	r3, [pc, #508]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	4a7e      	ldr	r2, [pc, #504]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	@ 0x58
 8002546:	4b7c      	ldr	r3, [pc, #496]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002556:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_OscConfig+0x4bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002562:	4b76      	ldr	r3, [pc, #472]	@ (800273c <HAL_RCC_OscConfig+0x4bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a75      	ldr	r2, [pc, #468]	@ (800273c <HAL_RCC_OscConfig+0x4bc>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7ff faf9 	bl	8001b64 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7ff faf5 	bl	8001b64 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e183      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002588:	4b6c      	ldr	r3, [pc, #432]	@ (800273c <HAL_RCC_OscConfig+0x4bc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_RCC_OscConfig+0x32e>
 800259c:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a2:	4a65      	ldr	r2, [pc, #404]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ac:	e024      	b.n	80025f8 <HAL_RCC_OscConfig+0x378>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d110      	bne.n	80025d8 <HAL_RCC_OscConfig+0x358>
 80025b6:	4b60      	ldr	r3, [pc, #384]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d6:	e00f      	b.n	80025f8 <HAL_RCC_OscConfig+0x378>
 80025d8:	4b57      	ldr	r3, [pc, #348]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025de:	4a56      	ldr	r2, [pc, #344]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d016      	beq.n	800262e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff fab0 	bl	8001b64 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff faac 	bl	8001b64 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e138      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261e:	4b46      	ldr	r3, [pc, #280]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ed      	beq.n	8002608 <HAL_RCC_OscConfig+0x388>
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff fa99 	bl	8001b64 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7ff fa95 	bl	8001b64 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e121      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ed      	bne.n	8002636 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	4a34      	ldr	r2, [pc, #208]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800266a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d03c      	beq.n	80026f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01c      	beq.n	80026ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002680:	4b2d      	ldr	r3, [pc, #180]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002686:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff fa68 	bl	8001b64 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002698:	f7ff fa64 	bl	8001b64 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0f2      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026aa:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ef      	beq.n	8002698 <HAL_RCC_OscConfig+0x418>
 80026b8:	e01b      	b.n	80026f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80026bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7ff fa4b 	bl	8001b64 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d2:	f7ff fa47 	bl	8001b64 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0d5      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ef      	bne.n	80026d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80c9 	beq.w	800288e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b0c      	cmp	r3, #12
 8002706:	f000 8083 	beq.w	8002810 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d15e      	bne.n	80027d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a08      	ldr	r2, [pc, #32]	@ (8002738 <HAL_RCC_OscConfig+0x4b8>)
 8002718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7ff fa21 	bl	8001b64 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	e00c      	b.n	8002740 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff fa1d 	bl	8001b64 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d905      	bls.n	8002740 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0ab      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ec      	bne.n	8002726 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b52      	ldr	r3, [pc, #328]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b52      	ldr	r3, [pc, #328]	@ (800289c <HAL_RCC_OscConfig+0x61c>)
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6a11      	ldr	r1, [r2, #32]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800275c:	3a01      	subs	r2, #1
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800276e:	0852      	lsrs	r2, r2, #1
 8002770:	3a01      	subs	r2, #1
 8002772:	0552      	lsls	r2, r2, #21
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002786:	06d2      	lsls	r2, r2, #27
 8002788:	430a      	orrs	r2, r1
 800278a:	4943      	ldr	r1, [pc, #268]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a40      	ldr	r2, [pc, #256]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b3e      	ldr	r3, [pc, #248]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff f9dc 	bl	8001b64 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f9d8 	bl	8001b64 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e066      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b35      	ldr	r3, [pc, #212]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x530>
 80027ce:	e05e      	b.n	800288e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a30      	ldr	r2, [pc, #192]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 80027d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff f9c2 	bl	8001b64 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7ff f9be 	bl	8001b64 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e04c      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f6:	4b28      	ldr	r3, [pc, #160]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	4924      	ldr	r1, [pc, #144]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <HAL_RCC_OscConfig+0x620>)
 800280a:	4013      	ands	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
 800280e:	e03e      	b.n	800288e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e039      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_OscConfig+0x618>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	429a      	cmp	r2, r3
 800282e:	d12c      	bne.n	800288a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d123      	bne.n	800288a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11b      	bne.n	800288a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d113      	bne.n	800288a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	3b01      	subs	r3, #1
 8002870:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d109      	bne.n	800288a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	019f800c 	.word	0x019f800c
 80028a0:	feeefffc 	.word	0xfeeefffc

080028a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e11e      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b91      	ldr	r3, [pc, #580]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 020f 	bic.w	r2, r3, #15
 80028d2:	498c      	ldr	r1, [pc, #560]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b8a      	ldr	r3, [pc, #552]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e106      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d073      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d129      	bne.n	8002954 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b81      	ldr	r3, [pc, #516]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0f4      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002910:	f000 f966 	bl	8002be0 <RCC_GetSysClockFreqFromPLLSource>
 8002914:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a7c      	ldr	r2, [pc, #496]	@ (8002b0c <HAL_RCC_ClockConfig+0x268>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d93f      	bls.n	800299e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800291e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d033      	beq.n	800299e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d12f      	bne.n	800299e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800293e:	4b72      	ldr	r3, [pc, #456]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002946:	4a70      	ldr	r2, [pc, #448]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e024      	b.n	800299e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d107      	bne.n	800296c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0c6      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0be      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800297c:	f000 f8ce 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4a61      	ldr	r2, [pc, #388]	@ (8002b0c <HAL_RCC_ClockConfig+0x268>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d909      	bls.n	800299e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800298a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002992:	4a5d      	ldr	r2, [pc, #372]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002998:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b5a      	ldr	r3, [pc, #360]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4957      	ldr	r1, [pc, #348]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b0:	f7ff f8d8 	bl	8001b64 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7ff f8d4 	bl	8001b64 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e095      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b43      	ldr	r3, [pc, #268]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a42      	ldr	r2, [pc, #264]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a10:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a18:	4a3b      	ldr	r2, [pc, #236]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4936      	ldr	r1, [pc, #216]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d105      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a3a:	4b33      	ldr	r3, [pc, #204]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4a32      	ldr	r2, [pc, #200]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a46:	4b2f      	ldr	r3, [pc, #188]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d21d      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a54:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 020f 	bic.w	r2, r3, #15
 8002a5c:	4929      	ldr	r1, [pc, #164]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a64:	f7ff f87e 	bl	8001b64 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7ff f87a 	bl	8001b64 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e03b      	b.n	8002afa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1ed      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4917      	ldr	r1, [pc, #92]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aba:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490f      	ldr	r1, [pc, #60]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ace:	f000 f825 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490c      	ldr	r1, [pc, #48]	@ (8002b10 <HAL_RCC_ClockConfig+0x26c>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe ffea 	bl	8001acc <HAL_InitTick>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	04c4b400 	.word	0x04c4b400
 8002b10:	080058c8 	.word	0x080058c8
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	20000010 	.word	0x20000010

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b22:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	e047      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d102      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b40:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e03e      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b46:	4b23      	ldr	r3, [pc, #140]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d136      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b52:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3301      	adds	r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b70:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7a:	68d2      	ldr	r2, [r2, #12]
 8002b7c:	0a12      	lsrs	r2, r2, #8
 8002b7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	617b      	str	r3, [r7, #20]
      break;
 8002b88:	e00c      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b8a:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	4a10      	ldr	r2, [pc, #64]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	0a12      	lsrs	r2, r2, #8
 8002b98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
      break;
 8002ba2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0e5b      	lsrs	r3, r3, #25
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e001      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bc4:	693b      	ldr	r3, [r7, #16]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	016e3600 	.word	0x016e3600

08002be0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d10c      	bne.n	8002c1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c04:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c0e:	68d2      	ldr	r2, [r2, #12]
 8002c10:	0a12      	lsrs	r2, r2, #8
 8002c12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
    break;
 8002c1c:	e00c      	b.n	8002c38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c1e:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	4a0e      	ldr	r2, [pc, #56]	@ (8002c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	0a12      	lsrs	r2, r2, #8
 8002c2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    break;
 8002c36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0e5b      	lsrs	r3, r3, #25
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c52:	687b      	ldr	r3, [r7, #4]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40021000 	.word	0x40021000
 8002c64:	016e3600 	.word	0x016e3600
 8002c68:	00f42400 	.word	0x00f42400

08002c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e049      	b.n	8002d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe fd98 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 ff68 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d001      	beq.n	8002d34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e04c      	b.n	8002dce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <HAL_TIM_Base_Start+0xc0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4e:	d01d      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a22      	ldr	r2, [pc, #136]	@ (8002de0 <HAL_TIM_Base_Start+0xc4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d018      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a21      	ldr	r2, [pc, #132]	@ (8002de4 <HAL_TIM_Base_Start+0xc8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <HAL_TIM_Base_Start+0xcc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1e      	ldr	r2, [pc, #120]	@ (8002dec <HAL_TIM_Base_Start+0xd0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <HAL_TIM_Base_Start+0xd4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_Base_Start+0x70>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1b      	ldr	r2, [pc, #108]	@ (8002df4 <HAL_TIM_Base_Start+0xd8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d115      	bne.n	8002db8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_TIM_Base_Start+0xdc>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d015      	beq.n	8002dca <HAL_TIM_Base_Start+0xae>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da4:	d011      	beq.n	8002dca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db6:	e008      	b.n	8002dca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e000      	b.n	8002dcc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	40013400 	.word	0x40013400
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40015000 	.word	0x40015000
 8002df8:	00010007 	.word	0x00010007

08002dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d001      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e054      	b.n	8002ebe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a26      	ldr	r2, [pc, #152]	@ (8002ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d022      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3e:	d01d      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d018      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <HAL_TIM_Base_Start_IT+0xe0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x80>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d115      	bne.n	8002ea8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_TIM_Base_Start_IT+0xec>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d015      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0xbe>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d011      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	e008      	b.n	8002eba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40000c00 	.word	0x40000c00
 8002edc:	40013400 	.word	0x40013400
 8002ee0:	40014000 	.word	0x40014000
 8002ee4:	40015000 	.word	0x40015000
 8002ee8:	00010007 	.word	0x00010007

08002eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e049      	b.n	8002f92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f841 	bl	8002f9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f000 fe28 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x24>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e03c      	b.n	800304e <HAL_TIM_PWM_Start+0x9e>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d109      	bne.n	8002fee <HAL_TIM_PWM_Start+0x3e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	e02f      	b.n	800304e <HAL_TIM_PWM_Start+0x9e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d109      	bne.n	8003008 <HAL_TIM_PWM_Start+0x58>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e022      	b.n	800304e <HAL_TIM_PWM_Start+0x9e>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d109      	bne.n	8003022 <HAL_TIM_PWM_Start+0x72>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e015      	b.n	800304e <HAL_TIM_PWM_Start+0x9e>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b10      	cmp	r3, #16
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start+0x8c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e008      	b.n	800304e <HAL_TIM_PWM_Start+0x9e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0a6      	b.n	80031a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start+0xb6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003064:	e023      	b.n	80030ae <HAL_TIM_PWM_Start+0xfe>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start+0xc6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003074:	e01b      	b.n	80030ae <HAL_TIM_PWM_Start+0xfe>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d104      	bne.n	8003086 <HAL_TIM_PWM_Start+0xd6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003084:	e013      	b.n	80030ae <HAL_TIM_PWM_Start+0xfe>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d104      	bne.n	8003096 <HAL_TIM_PWM_Start+0xe6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003094:	e00b      	b.n	80030ae <HAL_TIM_PWM_Start+0xfe>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b10      	cmp	r3, #16
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start+0xf6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a4:	e003      	b.n	80030ae <HAL_TIM_PWM_Start+0xfe>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	6839      	ldr	r1, [r7, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f9dc 	bl	8004474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3a      	ldr	r2, [pc, #232]	@ (80031ac <HAL_TIM_PWM_Start+0x1fc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x148>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a39      	ldr	r2, [pc, #228]	@ (80031b0 <HAL_TIM_PWM_Start+0x200>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x148>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a37      	ldr	r2, [pc, #220]	@ (80031b4 <HAL_TIM_PWM_Start+0x204>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x148>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a36      	ldr	r2, [pc, #216]	@ (80031b8 <HAL_TIM_PWM_Start+0x208>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x148>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a34      	ldr	r2, [pc, #208]	@ (80031bc <HAL_TIM_PWM_Start+0x20c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x148>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a33      	ldr	r2, [pc, #204]	@ (80031c0 <HAL_TIM_PWM_Start+0x210>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_PWM_Start+0x14c>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_TIM_PWM_Start+0x14e>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <HAL_TIM_PWM_Start+0x1fc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003124:	d01d      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a26      	ldr	r2, [pc, #152]	@ (80031c4 <HAL_TIM_PWM_Start+0x214>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d018      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a24      	ldr	r2, [pc, #144]	@ (80031c8 <HAL_TIM_PWM_Start+0x218>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a23      	ldr	r2, [pc, #140]	@ (80031cc <HAL_TIM_PWM_Start+0x21c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <HAL_TIM_PWM_Start+0x200>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <HAL_TIM_PWM_Start+0x204>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1b2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_TIM_PWM_Start+0x210>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d115      	bne.n	800318e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_TIM_PWM_Start+0x220>)
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b06      	cmp	r3, #6
 8003172:	d015      	beq.n	80031a0 <HAL_TIM_PWM_Start+0x1f0>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800317a:	d011      	beq.n	80031a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318c:	e008      	b.n	80031a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e000      	b.n	80031a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40013400 	.word	0x40013400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800
 80031c0:	40015000 	.word	0x40015000
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	00010007 	.word	0x00010007

080031d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e097      	b.n	8003318 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fe fb37 	bl	8001870 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003218:	f023 0307 	bic.w	r3, r3, #7
 800321c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 fca9 	bl	8003b80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	4313      	orrs	r3, r2
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003274:	f023 030c 	bic.w	r3, r3, #12
 8003278:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003280:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4313      	orrs	r3, r2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	011a      	lsls	r2, r3, #4
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	031b      	lsls	r3, r3, #12
 80032a4:	4313      	orrs	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4313      	orrs	r3, r2
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003330:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003338:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003340:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003348:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003356:	7b7b      	ldrb	r3, [r7, #13]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e069      	b.n	8003434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003370:	e031      	b.n	80033d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d110      	bne.n	800339a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800337e:	7b3b      	ldrb	r3, [r7, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e055      	b.n	8003434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003398:	e01d      	b.n	80033d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033a0:	7bbb      	ldrb	r3, [r7, #14]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033a6:	7b7b      	ldrb	r3, [r7, #13]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d102      	bne.n	80033b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033ac:	7b3b      	ldrb	r3, [r7, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e03e      	b.n	8003434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_TIM_Encoder_Start+0xc4>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d008      	beq.n	80033f4 <HAL_TIM_Encoder_Start+0xd4>
 80033e2:	e00f      	b.n	8003404 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 f841 	bl	8004474 <TIM_CCxChannelCmd>
      break;
 80033f2:	e016      	b.n	8003422 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	2104      	movs	r1, #4
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f839 	bl	8004474 <TIM_CCxChannelCmd>
      break;
 8003402:	e00e      	b.n	8003422 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f001 f831 	bl	8004474 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2201      	movs	r2, #1
 8003418:	2104      	movs	r1, #4
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f82a 	bl	8004474 <TIM_CCxChannelCmd>
      break;
 8003420:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0202 	mvn.w	r2, #2
 8003470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fb5c 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fb4e 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fb5f 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d020      	beq.n	80034ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0204 	mvn.w	r2, #4
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb36 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fb28 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb39 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d020      	beq.n	8003538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01b      	beq.n	8003538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0208 	mvn.w	r2, #8
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2204      	movs	r2, #4
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fb10 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fb02 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb13 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 faea 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fadc 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 faed 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fede 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f001 f8a9 	bl	8004728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 f8a1 	bl	800473c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 faa7 	bl	8003b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0220 	mvn.w	r2, #32
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f001 f869 	bl	8004714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f001 f875 	bl	8004750 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00c      	beq.n	800368a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f001 f86d 	bl	8004764 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 f865 	bl	8004778 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00c      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80036ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f001 f85d 	bl	800478c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0ff      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b14      	cmp	r3, #20
 8003706:	f200 80f0 	bhi.w	80038ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800370a:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003765 	.word	0x08003765
 8003714:	080038eb 	.word	0x080038eb
 8003718:	080038eb 	.word	0x080038eb
 800371c:	080038eb 	.word	0x080038eb
 8003720:	080037a5 	.word	0x080037a5
 8003724:	080038eb 	.word	0x080038eb
 8003728:	080038eb 	.word	0x080038eb
 800372c:	080038eb 	.word	0x080038eb
 8003730:	080037e7 	.word	0x080037e7
 8003734:	080038eb 	.word	0x080038eb
 8003738:	080038eb 	.word	0x080038eb
 800373c:	080038eb 	.word	0x080038eb
 8003740:	08003827 	.word	0x08003827
 8003744:	080038eb 	.word	0x080038eb
 8003748:	080038eb 	.word	0x080038eb
 800374c:	080038eb 	.word	0x080038eb
 8003750:	08003869 	.word	0x08003869
 8003754:	080038eb 	.word	0x080038eb
 8003758:	080038eb 	.word	0x080038eb
 800375c:	080038eb 	.word	0x080038eb
 8003760:	080038a9 	.word	0x080038a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fabc 	bl	8003ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0208 	orr.w	r2, r2, #8
 800377e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0204 	bic.w	r2, r2, #4
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	619a      	str	r2, [r3, #24]
      break;
 80037a2:	e0a5      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fb36 	bl	8003e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6999      	ldr	r1, [r3, #24]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	021a      	lsls	r2, r3, #8
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]
      break;
 80037e4:	e084      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fba9 	bl	8003f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0208 	orr.w	r2, r2, #8
 8003800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0204 	bic.w	r2, r2, #4
 8003810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	61da      	str	r2, [r3, #28]
      break;
 8003824:	e064      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fc1b 	bl	8004068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69d9      	ldr	r1, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	021a      	lsls	r2, r3, #8
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	61da      	str	r2, [r3, #28]
      break;
 8003866:	e043      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fc8e 	bl	8004190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0204 	bic.w	r2, r2, #4
 8003892:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80038a6:	e023      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fcd8 	bl	8004264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80038e8:	e002      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
      break;
 80038ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop

08003904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIM_ConfigClockSource+0x1c>
 800391c:	2302      	movs	r3, #2
 800391e:	e0f6      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x20a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800393e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800394a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6f      	ldr	r2, [pc, #444]	@ (8003b18 <HAL_TIM_ConfigClockSource+0x214>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f000 80c1 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003960:	4a6d      	ldr	r2, [pc, #436]	@ (8003b18 <HAL_TIM_ConfigClockSource+0x214>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f200 80c6 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003968:	4a6c      	ldr	r2, [pc, #432]	@ (8003b1c <HAL_TIM_ConfigClockSource+0x218>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f000 80b9 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003970:	4a6a      	ldr	r2, [pc, #424]	@ (8003b1c <HAL_TIM_ConfigClockSource+0x218>)
 8003972:	4293      	cmp	r3, r2
 8003974:	f200 80be 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003978:	4a69      	ldr	r2, [pc, #420]	@ (8003b20 <HAL_TIM_ConfigClockSource+0x21c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f000 80b1 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003980:	4a67      	ldr	r2, [pc, #412]	@ (8003b20 <HAL_TIM_ConfigClockSource+0x21c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f200 80b6 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003988:	4a66      	ldr	r2, [pc, #408]	@ (8003b24 <HAL_TIM_ConfigClockSource+0x220>)
 800398a:	4293      	cmp	r3, r2
 800398c:	f000 80a9 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003990:	4a64      	ldr	r2, [pc, #400]	@ (8003b24 <HAL_TIM_ConfigClockSource+0x220>)
 8003992:	4293      	cmp	r3, r2
 8003994:	f200 80ae 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003998:	4a63      	ldr	r2, [pc, #396]	@ (8003b28 <HAL_TIM_ConfigClockSource+0x224>)
 800399a:	4293      	cmp	r3, r2
 800399c:	f000 80a1 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 80039a0:	4a61      	ldr	r2, [pc, #388]	@ (8003b28 <HAL_TIM_ConfigClockSource+0x224>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f200 80a6 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039a8:	4a60      	ldr	r2, [pc, #384]	@ (8003b2c <HAL_TIM_ConfigClockSource+0x228>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	f000 8099 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 80039b0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b2c <HAL_TIM_ConfigClockSource+0x228>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f200 809e 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80039bc:	f000 8091 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 80039c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80039c4:	f200 8096 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039cc:	f000 8089 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 80039d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d4:	f200 808e 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039dc:	d03e      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x158>
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e2:	f200 8087 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ea:	f000 8086 	beq.w	8003afa <HAL_TIM_ConfigClockSource+0x1f6>
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f2:	d87f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039f4:	2b70      	cmp	r3, #112	@ 0x70
 80039f6:	d01a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x12a>
 80039f8:	2b70      	cmp	r3, #112	@ 0x70
 80039fa:	d87b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 80039fc:	2b60      	cmp	r3, #96	@ 0x60
 80039fe:	d050      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x19e>
 8003a00:	2b60      	cmp	r3, #96	@ 0x60
 8003a02:	d877      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a04:	2b50      	cmp	r3, #80	@ 0x50
 8003a06:	d03c      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x17e>
 8003a08:	2b50      	cmp	r3, #80	@ 0x50
 8003a0a:	d873      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d058      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d86f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a14:	2b30      	cmp	r3, #48	@ 0x30
 8003a16:	d064      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a18:	2b30      	cmp	r3, #48	@ 0x30
 8003a1a:	d86b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d060      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d867      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05c      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d05a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a2c:	e062      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a3e:	f000 fcf9 	bl	8004434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
      break;
 8003a5a:	e04f      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6c:	f000 fce2 	bl	8004434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e03c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fc54 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2150      	movs	r1, #80	@ 0x50
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fcad 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e02c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fc73 	bl	800439a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2160      	movs	r1, #96	@ 0x60
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fc9d 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e01c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fc34 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2140      	movs	r1, #64	@ 0x40
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fc8d 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fc84 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003af2:	e003      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e000      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	00100070 	.word	0x00100070
 8003b1c:	00100060 	.word	0x00100060
 8003b20:	00100050 	.word	0x00100050
 8003b24:	00100040 	.word	0x00100040
 8003b28:	00100030 	.word	0x00100030
 8003b2c:	00100020 	.word	0x00100020

08003b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d017      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9e:	d013      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a49      	ldr	r2, [pc, #292]	@ (8003cc8 <TIM_Base_SetConfig+0x148>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a48      	ldr	r2, [pc, #288]	@ (8003ccc <TIM_Base_SetConfig+0x14c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a47      	ldr	r2, [pc, #284]	@ (8003cd0 <TIM_Base_SetConfig+0x150>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a46      	ldr	r2, [pc, #280]	@ (8003cd4 <TIM_Base_SetConfig+0x154>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a45      	ldr	r2, [pc, #276]	@ (8003cd8 <TIM_Base_SetConfig+0x158>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a39      	ldr	r2, [pc, #228]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d023      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d01f      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a36      	ldr	r2, [pc, #216]	@ (8003cc8 <TIM_Base_SetConfig+0x148>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01b      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a35      	ldr	r2, [pc, #212]	@ (8003ccc <TIM_Base_SetConfig+0x14c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d017      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a34      	ldr	r2, [pc, #208]	@ (8003cd0 <TIM_Base_SetConfig+0x150>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <TIM_Base_SetConfig+0x154>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00f      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a33      	ldr	r2, [pc, #204]	@ (8003cdc <TIM_Base_SetConfig+0x15c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <TIM_Base_SetConfig+0x160>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <TIM_Base_SetConfig+0x164>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd8 <TIM_Base_SetConfig+0x158>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <TIM_Base_SetConfig+0x154>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	@ (8003cdc <TIM_Base_SetConfig+0x15c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ce0 <TIM_Base_SetConfig+0x160>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a18      	ldr	r2, [pc, #96]	@ (8003ce4 <TIM_Base_SetConfig+0x164>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <TIM_Base_SetConfig+0x158>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40015000 	.word	0x40015000
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 0201 	bic.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <TIM_OC1_SetConfig+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e08 <TIM_OC1_SetConfig+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00f      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2e      	ldr	r2, [pc, #184]	@ (8003e0c <TIM_OC1_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e10 <TIM_OC1_SetConfig+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <TIM_OC1_SetConfig+0x12c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e18 <TIM_OC1_SetConfig+0x130>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10c      	bne.n	8003d8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <TIM_OC1_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	@ (8003e08 <TIM_OC1_SetConfig+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <TIM_OC1_SetConfig+0x124>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <TIM_OC1_SetConfig+0x128>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <TIM_OC1_SetConfig+0x12c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <TIM_OC1_SetConfig+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40013400 	.word	0x40013400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40015000 	.word	0x40015000

08003e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0210 	bic.w	r2, r3, #16
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0320 	bic.w	r3, r3, #32
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <TIM_OC2_SetConfig+0x110>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_OC2_SetConfig+0x74>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	@ (8003f30 <TIM_OC2_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC2_SetConfig+0x74>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <TIM_OC2_SetConfig+0x118>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10d      	bne.n	8003eac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1f      	ldr	r2, [pc, #124]	@ (8003f2c <TIM_OC2_SetConfig+0x110>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <TIM_OC2_SetConfig+0x114>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00f      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <TIM_OC2_SetConfig+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f3c <TIM_OC2_SetConfig+0x120>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <TIM_OC2_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <TIM_OC2_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40015000 	.word	0x40015000
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x72>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8004054 <TIM_OC3_SetConfig+0x110>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x72>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <TIM_OC3_SetConfig+0x114>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10d      	bne.n	8003fd2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <TIM_OC3_SetConfig+0x110>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <TIM_OC3_SetConfig+0x118>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <TIM_OC3_SetConfig+0x11c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <TIM_OC3_SetConfig+0x120>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <TIM_OC3_SetConfig+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d113      	bne.n	800402a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40013400 	.word	0x40013400
 8004058:	40015000 	.word	0x40015000
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004178 <TIM_OC4_SetConfig+0x110>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_OC4_SetConfig+0x74>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2b      	ldr	r2, [pc, #172]	@ (800417c <TIM_OC4_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC4_SetConfig+0x74>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <TIM_OC4_SetConfig+0x118>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10d      	bne.n	80040f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <TIM_OC4_SetConfig+0x110>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <TIM_OC4_SetConfig+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00f      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <TIM_OC4_SetConfig+0x11c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00b      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1d      	ldr	r2, [pc, #116]	@ (8004188 <TIM_OC4_SetConfig+0x120>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1c      	ldr	r2, [pc, #112]	@ (800418c <TIM_OC4_SetConfig+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <TIM_OC4_SetConfig+0x118>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d113      	bne.n	8004150 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800412e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004136:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40013400 	.word	0x40013400
 8004180:	40015000 	.word	0x40015000
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a19      	ldr	r2, [pc, #100]	@ (800424c <TIM_OC5_SetConfig+0xbc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <TIM_OC5_SetConfig+0xc0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00f      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <TIM_OC5_SetConfig+0xc4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00b      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a16      	ldr	r2, [pc, #88]	@ (8004258 <TIM_OC5_SetConfig+0xc8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a15      	ldr	r2, [pc, #84]	@ (800425c <TIM_OC5_SetConfig+0xcc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a14      	ldr	r2, [pc, #80]	@ (8004260 <TIM_OC5_SetConfig+0xd0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d109      	bne.n	8004226 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004218:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40013400 	.word	0x40013400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	40015000 	.word	0x40015000

08004264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	051b      	lsls	r3, r3, #20
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004324 <TIM_OC6_SetConfig+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <TIM_OC6_SetConfig+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a18      	ldr	r2, [pc, #96]	@ (800432c <TIM_OC6_SetConfig+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <TIM_OC6_SetConfig+0xcc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a16      	ldr	r2, [pc, #88]	@ (8004334 <TIM_OC6_SetConfig+0xd0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a15      	ldr	r2, [pc, #84]	@ (8004338 <TIM_OC6_SetConfig+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	40015000 	.word	0x40015000

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f023 0210 	bic.w	r2, r3, #16
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	f043 0307 	orr.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e074      	b.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a34      	ldr	r2, [pc, #208]	@ (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a33      	ldr	r2, [pc, #204]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a31      	ldr	r2, [pc, #196]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800451c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800452e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a21      	ldr	r2, [pc, #132]	@ (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004558:	d01d      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1f      	ldr	r2, [pc, #124]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d018      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1c      	ldr	r2, [pc, #112]	@ (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10c      	bne.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800459c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40013400 	.word	0x40013400
 80045d8:	40015000 	.word	0x40015000
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40014000 	.word	0x40014000

080045ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004604:	2302      	movs	r3, #2
 8004606:	e078      	b.n	80046fa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1c      	ldr	r2, [pc, #112]	@ (8004708 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1b      	ldr	r2, [pc, #108]	@ (800470c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d11c      	bne.n	80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b8:	051b      	lsls	r3, r3, #20
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40013400 	.word	0x40013400
 8004710:	40015000 	.word	0x40015000

08004714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80047b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80047c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80047d0:	eeb1 7a67 	vneg.f32	s14, s15
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80047da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	330c      	adds	r3, #12
 80047fa:	220c      	movs	r2, #12
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f804 	bl	800480c <memset>
  }

}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <memset>:
 800480c:	4402      	add	r2, r0
 800480e:	4603      	mov	r3, r0
 8004810:	4293      	cmp	r3, r2
 8004812:	d100      	bne.n	8004816 <memset+0xa>
 8004814:	4770      	bx	lr
 8004816:	f803 1b01 	strb.w	r1, [r3], #1
 800481a:	e7f9      	b.n	8004810 <memset+0x4>

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	@ (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	@ (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	@ (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	@ (8004860 <__libc_init_array+0x44>)
 8004830:	f001 f83e 	bl	80058b0 <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	08005ab0 	.word	0x08005ab0
 8004858:	08005ab0 	.word	0x08005ab0
 800485c:	08005ab0 	.word	0x08005ab0
 8004860:	08005ab4 	.word	0x08005ab4
 8004864:	00000000 	.word	0x00000000

08004868 <sin>:
 8004868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800486a:	ec53 2b10 	vmov	r2, r3, d0
 800486e:	4826      	ldr	r0, [pc, #152]	@ (8004908 <sin+0xa0>)
 8004870:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004874:	4281      	cmp	r1, r0
 8004876:	d807      	bhi.n	8004888 <sin+0x20>
 8004878:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004900 <sin+0x98>
 800487c:	2000      	movs	r0, #0
 800487e:	b005      	add	sp, #20
 8004880:	f85d eb04 	ldr.w	lr, [sp], #4
 8004884:	f000 b90c 	b.w	8004aa0 <__kernel_sin>
 8004888:	4820      	ldr	r0, [pc, #128]	@ (800490c <sin+0xa4>)
 800488a:	4281      	cmp	r1, r0
 800488c:	d908      	bls.n	80048a0 <sin+0x38>
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	f7fb fcc5 	bl	8000220 <__aeabi_dsub>
 8004896:	ec41 0b10 	vmov	d0, r0, r1
 800489a:	b005      	add	sp, #20
 800489c:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a0:	4668      	mov	r0, sp
 80048a2:	f000 f9b9 	bl	8004c18 <__ieee754_rem_pio2>
 80048a6:	f000 0003 	and.w	r0, r0, #3
 80048aa:	2801      	cmp	r0, #1
 80048ac:	d00c      	beq.n	80048c8 <sin+0x60>
 80048ae:	2802      	cmp	r0, #2
 80048b0:	d011      	beq.n	80048d6 <sin+0x6e>
 80048b2:	b9e8      	cbnz	r0, 80048f0 <sin+0x88>
 80048b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048b8:	ed9d 0b00 	vldr	d0, [sp]
 80048bc:	2001      	movs	r0, #1
 80048be:	f000 f8ef 	bl	8004aa0 <__kernel_sin>
 80048c2:	ec51 0b10 	vmov	r0, r1, d0
 80048c6:	e7e6      	b.n	8004896 <sin+0x2e>
 80048c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048cc:	ed9d 0b00 	vldr	d0, [sp]
 80048d0:	f000 f81e 	bl	8004910 <__kernel_cos>
 80048d4:	e7f5      	b.n	80048c2 <sin+0x5a>
 80048d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048da:	ed9d 0b00 	vldr	d0, [sp]
 80048de:	2001      	movs	r0, #1
 80048e0:	f000 f8de 	bl	8004aa0 <__kernel_sin>
 80048e4:	ec53 2b10 	vmov	r2, r3, d0
 80048e8:	4610      	mov	r0, r2
 80048ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80048ee:	e7d2      	b.n	8004896 <sin+0x2e>
 80048f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048f4:	ed9d 0b00 	vldr	d0, [sp]
 80048f8:	f000 f80a 	bl	8004910 <__kernel_cos>
 80048fc:	e7f2      	b.n	80048e4 <sin+0x7c>
 80048fe:	bf00      	nop
	...
 8004908:	3fe921fb 	.word	0x3fe921fb
 800490c:	7fefffff 	.word	0x7fefffff

08004910 <__kernel_cos>:
 8004910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	ec57 6b10 	vmov	r6, r7, d0
 8004918:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800491c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004920:	ed8d 1b00 	vstr	d1, [sp]
 8004924:	d206      	bcs.n	8004934 <__kernel_cos+0x24>
 8004926:	4630      	mov	r0, r6
 8004928:	4639      	mov	r1, r7
 800492a:	f7fc f8cb 	bl	8000ac4 <__aeabi_d2iz>
 800492e:	2800      	cmp	r0, #0
 8004930:	f000 8088 	beq.w	8004a44 <__kernel_cos+0x134>
 8004934:	4632      	mov	r2, r6
 8004936:	463b      	mov	r3, r7
 8004938:	4630      	mov	r0, r6
 800493a:	4639      	mov	r1, r7
 800493c:	f7fb fe28 	bl	8000590 <__aeabi_dmul>
 8004940:	4b51      	ldr	r3, [pc, #324]	@ (8004a88 <__kernel_cos+0x178>)
 8004942:	2200      	movs	r2, #0
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	f7fb fe22 	bl	8000590 <__aeabi_dmul>
 800494c:	a340      	add	r3, pc, #256	@ (adr r3, 8004a50 <__kernel_cos+0x140>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	4682      	mov	sl, r0
 8004954:	468b      	mov	fp, r1
 8004956:	4620      	mov	r0, r4
 8004958:	4629      	mov	r1, r5
 800495a:	f7fb fe19 	bl	8000590 <__aeabi_dmul>
 800495e:	a33e      	add	r3, pc, #248	@ (adr r3, 8004a58 <__kernel_cos+0x148>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fc5e 	bl	8000224 <__adddf3>
 8004968:	4622      	mov	r2, r4
 800496a:	462b      	mov	r3, r5
 800496c:	f7fb fe10 	bl	8000590 <__aeabi_dmul>
 8004970:	a33b      	add	r3, pc, #236	@ (adr r3, 8004a60 <__kernel_cos+0x150>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fc53 	bl	8000220 <__aeabi_dsub>
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	f7fb fe07 	bl	8000590 <__aeabi_dmul>
 8004982:	a339      	add	r3, pc, #228	@ (adr r3, 8004a68 <__kernel_cos+0x158>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fc4c 	bl	8000224 <__adddf3>
 800498c:	4622      	mov	r2, r4
 800498e:	462b      	mov	r3, r5
 8004990:	f7fb fdfe 	bl	8000590 <__aeabi_dmul>
 8004994:	a336      	add	r3, pc, #216	@ (adr r3, 8004a70 <__kernel_cos+0x160>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fc41 	bl	8000220 <__aeabi_dsub>
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	f7fb fdf5 	bl	8000590 <__aeabi_dmul>
 80049a6:	a334      	add	r3, pc, #208	@ (adr r3, 8004a78 <__kernel_cos+0x168>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fb fc3a 	bl	8000224 <__adddf3>
 80049b0:	4622      	mov	r2, r4
 80049b2:	462b      	mov	r3, r5
 80049b4:	f7fb fdec 	bl	8000590 <__aeabi_dmul>
 80049b8:	4622      	mov	r2, r4
 80049ba:	462b      	mov	r3, r5
 80049bc:	f7fb fde8 	bl	8000590 <__aeabi_dmul>
 80049c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c4:	4604      	mov	r4, r0
 80049c6:	460d      	mov	r5, r1
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	f7fb fde0 	bl	8000590 <__aeabi_dmul>
 80049d0:	460b      	mov	r3, r1
 80049d2:	4602      	mov	r2, r0
 80049d4:	4629      	mov	r1, r5
 80049d6:	4620      	mov	r0, r4
 80049d8:	f7fb fc22 	bl	8000220 <__aeabi_dsub>
 80049dc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <__kernel_cos+0x17c>)
 80049de:	4598      	cmp	r8, r3
 80049e0:	4606      	mov	r6, r0
 80049e2:	460f      	mov	r7, r1
 80049e4:	d810      	bhi.n	8004a08 <__kernel_cos+0xf8>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4650      	mov	r0, sl
 80049ec:	4659      	mov	r1, fp
 80049ee:	f7fb fc17 	bl	8000220 <__aeabi_dsub>
 80049f2:	460b      	mov	r3, r1
 80049f4:	4926      	ldr	r1, [pc, #152]	@ (8004a90 <__kernel_cos+0x180>)
 80049f6:	4602      	mov	r2, r0
 80049f8:	2000      	movs	r0, #0
 80049fa:	f7fb fc11 	bl	8000220 <__aeabi_dsub>
 80049fe:	ec41 0b10 	vmov	d0, r0, r1
 8004a02:	b003      	add	sp, #12
 8004a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a08:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <__kernel_cos+0x184>)
 8004a0a:	4921      	ldr	r1, [pc, #132]	@ (8004a90 <__kernel_cos+0x180>)
 8004a0c:	4598      	cmp	r8, r3
 8004a0e:	bf8c      	ite	hi
 8004a10:	4d21      	ldrhi	r5, [pc, #132]	@ (8004a98 <__kernel_cos+0x188>)
 8004a12:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004a16:	2400      	movs	r4, #0
 8004a18:	4622      	mov	r2, r4
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7fb fbff 	bl	8000220 <__aeabi_dsub>
 8004a22:	4622      	mov	r2, r4
 8004a24:	4680      	mov	r8, r0
 8004a26:	4689      	mov	r9, r1
 8004a28:	462b      	mov	r3, r5
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	f7fb fbf7 	bl	8000220 <__aeabi_dsub>
 8004a32:	4632      	mov	r2, r6
 8004a34:	463b      	mov	r3, r7
 8004a36:	f7fb fbf3 	bl	8000220 <__aeabi_dsub>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4640      	mov	r0, r8
 8004a40:	4649      	mov	r1, r9
 8004a42:	e7da      	b.n	80049fa <__kernel_cos+0xea>
 8004a44:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004a80 <__kernel_cos+0x170>
 8004a48:	e7db      	b.n	8004a02 <__kernel_cos+0xf2>
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w
 8004a50:	be8838d4 	.word	0xbe8838d4
 8004a54:	bda8fae9 	.word	0xbda8fae9
 8004a58:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a5c:	3e21ee9e 	.word	0x3e21ee9e
 8004a60:	809c52ad 	.word	0x809c52ad
 8004a64:	3e927e4f 	.word	0x3e927e4f
 8004a68:	19cb1590 	.word	0x19cb1590
 8004a6c:	3efa01a0 	.word	0x3efa01a0
 8004a70:	16c15177 	.word	0x16c15177
 8004a74:	3f56c16c 	.word	0x3f56c16c
 8004a78:	5555554c 	.word	0x5555554c
 8004a7c:	3fa55555 	.word	0x3fa55555
 8004a80:	00000000 	.word	0x00000000
 8004a84:	3ff00000 	.word	0x3ff00000
 8004a88:	3fe00000 	.word	0x3fe00000
 8004a8c:	3fd33332 	.word	0x3fd33332
 8004a90:	3ff00000 	.word	0x3ff00000
 8004a94:	3fe90000 	.word	0x3fe90000
 8004a98:	3fd20000 	.word	0x3fd20000
 8004a9c:	00000000 	.word	0x00000000

08004aa0 <__kernel_sin>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	ec55 4b10 	vmov	r4, r5, d0
 8004aa8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004aac:	b085      	sub	sp, #20
 8004aae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004ab2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004ab6:	4680      	mov	r8, r0
 8004ab8:	d205      	bcs.n	8004ac6 <__kernel_sin+0x26>
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7fc f801 	bl	8000ac4 <__aeabi_d2iz>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d052      	beq.n	8004b6c <__kernel_sin+0xcc>
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	462b      	mov	r3, r5
 8004aca:	4620      	mov	r0, r4
 8004acc:	4629      	mov	r1, r5
 8004ace:	f7fb fd5f 	bl	8000590 <__aeabi_dmul>
 8004ad2:	4682      	mov	sl, r0
 8004ad4:	468b      	mov	fp, r1
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fb fd57 	bl	8000590 <__aeabi_dmul>
 8004ae2:	a342      	add	r3, pc, #264	@ (adr r3, 8004bec <__kernel_sin+0x14c>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8004aec:	4650      	mov	r0, sl
 8004aee:	4659      	mov	r1, fp
 8004af0:	f7fb fd4e 	bl	8000590 <__aeabi_dmul>
 8004af4:	a33f      	add	r3, pc, #252	@ (adr r3, 8004bf4 <__kernel_sin+0x154>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fb91 	bl	8000220 <__aeabi_dsub>
 8004afe:	4652      	mov	r2, sl
 8004b00:	465b      	mov	r3, fp
 8004b02:	f7fb fd45 	bl	8000590 <__aeabi_dmul>
 8004b06:	a33d      	add	r3, pc, #244	@ (adr r3, 8004bfc <__kernel_sin+0x15c>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f7fb fb8a 	bl	8000224 <__adddf3>
 8004b10:	4652      	mov	r2, sl
 8004b12:	465b      	mov	r3, fp
 8004b14:	f7fb fd3c 	bl	8000590 <__aeabi_dmul>
 8004b18:	a33a      	add	r3, pc, #232	@ (adr r3, 8004c04 <__kernel_sin+0x164>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fb7f 	bl	8000220 <__aeabi_dsub>
 8004b22:	4652      	mov	r2, sl
 8004b24:	465b      	mov	r3, fp
 8004b26:	f7fb fd33 	bl	8000590 <__aeabi_dmul>
 8004b2a:	a338      	add	r3, pc, #224	@ (adr r3, 8004c0c <__kernel_sin+0x16c>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fb78 	bl	8000224 <__adddf3>
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	f1b8 0f00 	cmp.w	r8, #0
 8004b3c:	d11b      	bne.n	8004b76 <__kernel_sin+0xd6>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4650      	mov	r0, sl
 8004b44:	4659      	mov	r1, fp
 8004b46:	f7fb fd23 	bl	8000590 <__aeabi_dmul>
 8004b4a:	a325      	add	r3, pc, #148	@ (adr r3, 8004be0 <__kernel_sin+0x140>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fb66 	bl	8000220 <__aeabi_dsub>
 8004b54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b58:	f7fb fd1a 	bl	8000590 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb fb5e 	bl	8000224 <__adddf3>
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	ec45 4b10 	vmov	d0, r4, r5
 8004b70:	b005      	add	sp, #20
 8004b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004be8 <__kernel_sin+0x148>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f7fb fd07 	bl	8000590 <__aeabi_dmul>
 8004b82:	4632      	mov	r2, r6
 8004b84:	4680      	mov	r8, r0
 8004b86:	4689      	mov	r9, r1
 8004b88:	463b      	mov	r3, r7
 8004b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b8e:	f7fb fcff 	bl	8000590 <__aeabi_dmul>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4640      	mov	r0, r8
 8004b98:	4649      	mov	r1, r9
 8004b9a:	f7fb fb41 	bl	8000220 <__aeabi_dsub>
 8004b9e:	4652      	mov	r2, sl
 8004ba0:	465b      	mov	r3, fp
 8004ba2:	f7fb fcf5 	bl	8000590 <__aeabi_dmul>
 8004ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004baa:	f7fb fb39 	bl	8000220 <__aeabi_dsub>
 8004bae:	a30c      	add	r3, pc, #48	@ (adr r3, 8004be0 <__kernel_sin+0x140>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	460f      	mov	r7, r1
 8004bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bbc:	f7fb fce8 	bl	8000590 <__aeabi_dmul>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	f7fb fb2c 	bl	8000224 <__adddf3>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7fb fb24 	bl	8000220 <__aeabi_dsub>
 8004bd8:	e7c6      	b.n	8004b68 <__kernel_sin+0xc8>
 8004bda:	bf00      	nop
 8004bdc:	f3af 8000 	nop.w
 8004be0:	55555549 	.word	0x55555549
 8004be4:	3fc55555 	.word	0x3fc55555
 8004be8:	3fe00000 	.word	0x3fe00000
 8004bec:	5acfd57c 	.word	0x5acfd57c
 8004bf0:	3de5d93a 	.word	0x3de5d93a
 8004bf4:	8a2b9ceb 	.word	0x8a2b9ceb
 8004bf8:	3e5ae5e6 	.word	0x3e5ae5e6
 8004bfc:	57b1fe7d 	.word	0x57b1fe7d
 8004c00:	3ec71de3 	.word	0x3ec71de3
 8004c04:	19c161d5 	.word	0x19c161d5
 8004c08:	3f2a01a0 	.word	0x3f2a01a0
 8004c0c:	1110f8a6 	.word	0x1110f8a6
 8004c10:	3f811111 	.word	0x3f811111
 8004c14:	00000000 	.word	0x00000000

08004c18 <__ieee754_rem_pio2>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	ec57 6b10 	vmov	r6, r7, d0
 8004c20:	4bc5      	ldr	r3, [pc, #788]	@ (8004f38 <__ieee754_rem_pio2+0x320>)
 8004c22:	b08d      	sub	sp, #52	@ 0x34
 8004c24:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004c28:	4598      	cmp	r8, r3
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	9704      	str	r7, [sp, #16]
 8004c2e:	d807      	bhi.n	8004c40 <__ieee754_rem_pio2+0x28>
 8004c30:	2200      	movs	r2, #0
 8004c32:	2300      	movs	r3, #0
 8004c34:	ed80 0b00 	vstr	d0, [r0]
 8004c38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004c3c:	2500      	movs	r5, #0
 8004c3e:	e028      	b.n	8004c92 <__ieee754_rem_pio2+0x7a>
 8004c40:	4bbe      	ldr	r3, [pc, #760]	@ (8004f3c <__ieee754_rem_pio2+0x324>)
 8004c42:	4598      	cmp	r8, r3
 8004c44:	d878      	bhi.n	8004d38 <__ieee754_rem_pio2+0x120>
 8004c46:	9b04      	ldr	r3, [sp, #16]
 8004c48:	4dbd      	ldr	r5, [pc, #756]	@ (8004f40 <__ieee754_rem_pio2+0x328>)
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004f00 <__ieee754_rem_pio2+0x2e8>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	4639      	mov	r1, r7
 8004c56:	dd38      	ble.n	8004cca <__ieee754_rem_pio2+0xb2>
 8004c58:	f7fb fae2 	bl	8000220 <__aeabi_dsub>
 8004c5c:	45a8      	cmp	r8, r5
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	d01a      	beq.n	8004c9a <__ieee754_rem_pio2+0x82>
 8004c64:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004f08 <__ieee754_rem_pio2+0x2f0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fad9 	bl	8000220 <__aeabi_dsub>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4680      	mov	r8, r0
 8004c74:	4689      	mov	r9, r1
 8004c76:	4630      	mov	r0, r6
 8004c78:	4639      	mov	r1, r7
 8004c7a:	f7fb fad1 	bl	8000220 <__aeabi_dsub>
 8004c7e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004f08 <__ieee754_rem_pio2+0x2f0>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb facc 	bl	8000220 <__aeabi_dsub>
 8004c88:	e9c4 8900 	strd	r8, r9, [r4]
 8004c8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c90:	2501      	movs	r5, #1
 8004c92:	4628      	mov	r0, r5
 8004c94:	b00d      	add	sp, #52	@ 0x34
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9a:	a39d      	add	r3, pc, #628	@ (adr r3, 8004f10 <__ieee754_rem_pio2+0x2f8>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb fabe 	bl	8000220 <__aeabi_dsub>
 8004ca4:	a39c      	add	r3, pc, #624	@ (adr r3, 8004f18 <__ieee754_rem_pio2+0x300>)
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	4606      	mov	r6, r0
 8004cac:	460f      	mov	r7, r1
 8004cae:	f7fb fab7 	bl	8000220 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4680      	mov	r8, r0
 8004cb8:	4689      	mov	r9, r1
 8004cba:	4630      	mov	r0, r6
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	f7fb faaf 	bl	8000220 <__aeabi_dsub>
 8004cc2:	a395      	add	r3, pc, #596	@ (adr r3, 8004f18 <__ieee754_rem_pio2+0x300>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	e7dc      	b.n	8004c84 <__ieee754_rem_pio2+0x6c>
 8004cca:	f7fb faab 	bl	8000224 <__adddf3>
 8004cce:	45a8      	cmp	r8, r5
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	460f      	mov	r7, r1
 8004cd4:	d018      	beq.n	8004d08 <__ieee754_rem_pio2+0xf0>
 8004cd6:	a38c      	add	r3, pc, #560	@ (adr r3, 8004f08 <__ieee754_rem_pio2+0x2f0>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb faa2 	bl	8000224 <__adddf3>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4689      	mov	r9, r1
 8004ce8:	4630      	mov	r0, r6
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb fa98 	bl	8000220 <__aeabi_dsub>
 8004cf0:	a385      	add	r3, pc, #532	@ (adr r3, 8004f08 <__ieee754_rem_pio2+0x2f0>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f7fb fa95 	bl	8000224 <__adddf3>
 8004cfa:	f04f 35ff 	mov.w	r5, #4294967295
 8004cfe:	e9c4 8900 	strd	r8, r9, [r4]
 8004d02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d06:	e7c4      	b.n	8004c92 <__ieee754_rem_pio2+0x7a>
 8004d08:	a381      	add	r3, pc, #516	@ (adr r3, 8004f10 <__ieee754_rem_pio2+0x2f8>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fa89 	bl	8000224 <__adddf3>
 8004d12:	a381      	add	r3, pc, #516	@ (adr r3, 8004f18 <__ieee754_rem_pio2+0x300>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	4606      	mov	r6, r0
 8004d1a:	460f      	mov	r7, r1
 8004d1c:	f7fb fa82 	bl	8000224 <__adddf3>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4680      	mov	r8, r0
 8004d26:	4689      	mov	r9, r1
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f7fb fa78 	bl	8000220 <__aeabi_dsub>
 8004d30:	a379      	add	r3, pc, #484	@ (adr r3, 8004f18 <__ieee754_rem_pio2+0x300>)
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	e7de      	b.n	8004cf6 <__ieee754_rem_pio2+0xde>
 8004d38:	4b82      	ldr	r3, [pc, #520]	@ (8004f44 <__ieee754_rem_pio2+0x32c>)
 8004d3a:	4598      	cmp	r8, r3
 8004d3c:	f200 80d1 	bhi.w	8004ee2 <__ieee754_rem_pio2+0x2ca>
 8004d40:	f000 f966 	bl	8005010 <fabs>
 8004d44:	ec57 6b10 	vmov	r6, r7, d0
 8004d48:	a375      	add	r3, pc, #468	@ (adr r3, 8004f20 <__ieee754_rem_pio2+0x308>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	4630      	mov	r0, r6
 8004d50:	4639      	mov	r1, r7
 8004d52:	f7fb fc1d 	bl	8000590 <__aeabi_dmul>
 8004d56:	4b7c      	ldr	r3, [pc, #496]	@ (8004f48 <__ieee754_rem_pio2+0x330>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f7fb fa63 	bl	8000224 <__adddf3>
 8004d5e:	f7fb feb1 	bl	8000ac4 <__aeabi_d2iz>
 8004d62:	4605      	mov	r5, r0
 8004d64:	f7fb fbaa 	bl	80004bc <__aeabi_i2d>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d70:	a363      	add	r3, pc, #396	@ (adr r3, 8004f00 <__ieee754_rem_pio2+0x2e8>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fc0b 	bl	8000590 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4630      	mov	r0, r6
 8004d80:	4639      	mov	r1, r7
 8004d82:	f7fb fa4d 	bl	8000220 <__aeabi_dsub>
 8004d86:	a360      	add	r3, pc, #384	@ (adr r3, 8004f08 <__ieee754_rem_pio2+0x2f0>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d94:	f7fb fbfc 	bl	8000590 <__aeabi_dmul>
 8004d98:	2d1f      	cmp	r5, #31
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	460f      	mov	r7, r1
 8004d9e:	dc0c      	bgt.n	8004dba <__ieee754_rem_pio2+0x1a2>
 8004da0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f4c <__ieee754_rem_pio2+0x334>)
 8004da2:	1e6a      	subs	r2, r5, #1
 8004da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da8:	4543      	cmp	r3, r8
 8004daa:	d006      	beq.n	8004dba <__ieee754_rem_pio2+0x1a2>
 8004dac:	4632      	mov	r2, r6
 8004dae:	463b      	mov	r3, r7
 8004db0:	4650      	mov	r0, sl
 8004db2:	4659      	mov	r1, fp
 8004db4:	f7fb fa34 	bl	8000220 <__aeabi_dsub>
 8004db8:	e00e      	b.n	8004dd8 <__ieee754_rem_pio2+0x1c0>
 8004dba:	463b      	mov	r3, r7
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	f7fb fa2d 	bl	8000220 <__aeabi_dsub>
 8004dc6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004dd0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	dc02      	bgt.n	8004dde <__ieee754_rem_pio2+0x1c6>
 8004dd8:	e9c4 0100 	strd	r0, r1, [r4]
 8004ddc:	e039      	b.n	8004e52 <__ieee754_rem_pio2+0x23a>
 8004dde:	a34c      	add	r3, pc, #304	@ (adr r3, 8004f10 <__ieee754_rem_pio2+0x2f8>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004de8:	f7fb fbd2 	bl	8000590 <__aeabi_dmul>
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4650      	mov	r0, sl
 8004df6:	4659      	mov	r1, fp
 8004df8:	f7fb fa12 	bl	8000220 <__aeabi_dsub>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4680      	mov	r8, r0
 8004e02:	4689      	mov	r9, r1
 8004e04:	4650      	mov	r0, sl
 8004e06:	4659      	mov	r1, fp
 8004e08:	f7fb fa0a 	bl	8000220 <__aeabi_dsub>
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	f7fb fa06 	bl	8000220 <__aeabi_dsub>
 8004e14:	a340      	add	r3, pc, #256	@ (adr r3, 8004f18 <__ieee754_rem_pio2+0x300>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	460f      	mov	r7, r1
 8004e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e22:	f7fb fbb5 	bl	8000590 <__aeabi_dmul>
 8004e26:	4632      	mov	r2, r6
 8004e28:	463b      	mov	r3, r7
 8004e2a:	f7fb f9f9 	bl	8000220 <__aeabi_dsub>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	f7fb f9f1 	bl	8000220 <__aeabi_dsub>
 8004e3e:	9a05      	ldr	r2, [sp, #20]
 8004e40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b31      	cmp	r3, #49	@ 0x31
 8004e48:	dc20      	bgt.n	8004e8c <__ieee754_rem_pio2+0x274>
 8004e4a:	e9c4 0100 	strd	r0, r1, [r4]
 8004e4e:	46c2      	mov	sl, r8
 8004e50:	46cb      	mov	fp, r9
 8004e52:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004e56:	4650      	mov	r0, sl
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	f7fb f9df 	bl	8000220 <__aeabi_dsub>
 8004e62:	463b      	mov	r3, r7
 8004e64:	4632      	mov	r2, r6
 8004e66:	f7fb f9db 	bl	8000220 <__aeabi_dsub>
 8004e6a:	9b04      	ldr	r3, [sp, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e72:	f6bf af0e 	bge.w	8004c92 <__ieee754_rem_pio2+0x7a>
 8004e76:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e80:	f8c4 8000 	str.w	r8, [r4]
 8004e84:	60a0      	str	r0, [r4, #8]
 8004e86:	60e3      	str	r3, [r4, #12]
 8004e88:	426d      	negs	r5, r5
 8004e8a:	e702      	b.n	8004c92 <__ieee754_rem_pio2+0x7a>
 8004e8c:	a326      	add	r3, pc, #152	@ (adr r3, 8004f28 <__ieee754_rem_pio2+0x310>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e96:	f7fb fb7b 	bl	8000590 <__aeabi_dmul>
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	f7fb f9bb 	bl	8000220 <__aeabi_dsub>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4682      	mov	sl, r0
 8004eb0:	468b      	mov	fp, r1
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	f7fb f9b3 	bl	8000220 <__aeabi_dsub>
 8004eba:	4632      	mov	r2, r6
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	f7fb f9af 	bl	8000220 <__aeabi_dsub>
 8004ec2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004f30 <__ieee754_rem_pio2+0x318>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	4606      	mov	r6, r0
 8004eca:	460f      	mov	r7, r1
 8004ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed0:	f7fb fb5e 	bl	8000590 <__aeabi_dmul>
 8004ed4:	4632      	mov	r2, r6
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	f7fb f9a2 	bl	8000220 <__aeabi_dsub>
 8004edc:	4606      	mov	r6, r0
 8004ede:	460f      	mov	r7, r1
 8004ee0:	e764      	b.n	8004dac <__ieee754_rem_pio2+0x194>
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <__ieee754_rem_pio2+0x338>)
 8004ee4:	4598      	cmp	r8, r3
 8004ee6:	d935      	bls.n	8004f54 <__ieee754_rem_pio2+0x33c>
 8004ee8:	4632      	mov	r2, r6
 8004eea:	463b      	mov	r3, r7
 8004eec:	4630      	mov	r0, r6
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f7fb f996 	bl	8000220 <__aeabi_dsub>
 8004ef4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ef8:	e9c4 0100 	strd	r0, r1, [r4]
 8004efc:	e69e      	b.n	8004c3c <__ieee754_rem_pio2+0x24>
 8004efe:	bf00      	nop
 8004f00:	54400000 	.word	0x54400000
 8004f04:	3ff921fb 	.word	0x3ff921fb
 8004f08:	1a626331 	.word	0x1a626331
 8004f0c:	3dd0b461 	.word	0x3dd0b461
 8004f10:	1a600000 	.word	0x1a600000
 8004f14:	3dd0b461 	.word	0x3dd0b461
 8004f18:	2e037073 	.word	0x2e037073
 8004f1c:	3ba3198a 	.word	0x3ba3198a
 8004f20:	6dc9c883 	.word	0x6dc9c883
 8004f24:	3fe45f30 	.word	0x3fe45f30
 8004f28:	2e000000 	.word	0x2e000000
 8004f2c:	3ba3198a 	.word	0x3ba3198a
 8004f30:	252049c1 	.word	0x252049c1
 8004f34:	397b839a 	.word	0x397b839a
 8004f38:	3fe921fb 	.word	0x3fe921fb
 8004f3c:	4002d97b 	.word	0x4002d97b
 8004f40:	3ff921fb 	.word	0x3ff921fb
 8004f44:	413921fb 	.word	0x413921fb
 8004f48:	3fe00000 	.word	0x3fe00000
 8004f4c:	080058d8 	.word	0x080058d8
 8004f50:	7fefffff 	.word	0x7fefffff
 8004f54:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004f58:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004f5c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004f60:	4630      	mov	r0, r6
 8004f62:	460f      	mov	r7, r1
 8004f64:	f7fb fdae 	bl	8000ac4 <__aeabi_d2iz>
 8004f68:	f7fb faa8 	bl	80004bc <__aeabi_i2d>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4630      	mov	r0, r6
 8004f72:	4639      	mov	r1, r7
 8004f74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f78:	f7fb f952 	bl	8000220 <__aeabi_dsub>
 8004f7c:	4b22      	ldr	r3, [pc, #136]	@ (8005008 <__ieee754_rem_pio2+0x3f0>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f7fb fb06 	bl	8000590 <__aeabi_dmul>
 8004f84:	460f      	mov	r7, r1
 8004f86:	4606      	mov	r6, r0
 8004f88:	f7fb fd9c 	bl	8000ac4 <__aeabi_d2iz>
 8004f8c:	f7fb fa96 	bl	80004bc <__aeabi_i2d>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f9c:	f7fb f940 	bl	8000220 <__aeabi_dsub>
 8004fa0:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <__ieee754_rem_pio2+0x3f0>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f7fb faf4 	bl	8000590 <__aeabi_dmul>
 8004fa8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004fac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004fb0:	f04f 0803 	mov.w	r8, #3
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	2700      	movs	r7, #0
 8004fb8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	46c2      	mov	sl, r8
 8004fc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fc6:	f7fb fd4b 	bl	8000a60 <__aeabi_dcmpeq>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d1f4      	bne.n	8004fb8 <__ieee754_rem_pio2+0x3a0>
 8004fce:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <__ieee754_rem_pio2+0x3f4>)
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	462a      	mov	r2, r5
 8004fd8:	4653      	mov	r3, sl
 8004fda:	4621      	mov	r1, r4
 8004fdc:	a806      	add	r0, sp, #24
 8004fde:	f000 f81f 	bl	8005020 <__kernel_rem_pio2>
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	f6bf ae53 	bge.w	8004c92 <__ieee754_rem_pio2+0x7a>
 8004fec:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004ff0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ff4:	e9c4 2300 	strd	r2, r3, [r4]
 8004ff8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004ffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005000:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005004:	e740      	b.n	8004e88 <__ieee754_rem_pio2+0x270>
 8005006:	bf00      	nop
 8005008:	41700000 	.word	0x41700000
 800500c:	08005958 	.word	0x08005958

08005010 <fabs>:
 8005010:	ec51 0b10 	vmov	r0, r1, d0
 8005014:	4602      	mov	r2, r0
 8005016:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800501a:	ec43 2b10 	vmov	d0, r2, r3
 800501e:	4770      	bx	lr

08005020 <__kernel_rem_pio2>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	ed2d 8b02 	vpush	{d8}
 8005028:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800502c:	f112 0f14 	cmn.w	r2, #20
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	9104      	str	r1, [sp, #16]
 8005034:	4bc2      	ldr	r3, [pc, #776]	@ (8005340 <__kernel_rem_pio2+0x320>)
 8005036:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005038:	9008      	str	r0, [sp, #32]
 800503a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	9b06      	ldr	r3, [sp, #24]
 8005042:	f103 33ff 	add.w	r3, r3, #4294967295
 8005046:	bfa8      	it	ge
 8005048:	1ed4      	subge	r4, r2, #3
 800504a:	9305      	str	r3, [sp, #20]
 800504c:	bfb2      	itee	lt
 800504e:	2400      	movlt	r4, #0
 8005050:	2318      	movge	r3, #24
 8005052:	fb94 f4f3 	sdivge	r4, r4, r3
 8005056:	f06f 0317 	mvn.w	r3, #23
 800505a:	fb04 3303 	mla	r3, r4, r3, r3
 800505e:	eb03 0b02 	add.w	fp, r3, r2
 8005062:	9b00      	ldr	r3, [sp, #0]
 8005064:	9a05      	ldr	r2, [sp, #20]
 8005066:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005330 <__kernel_rem_pio2+0x310>
 800506a:	eb03 0802 	add.w	r8, r3, r2
 800506e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005070:	1aa7      	subs	r7, r4, r2
 8005072:	ae20      	add	r6, sp, #128	@ 0x80
 8005074:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005078:	2500      	movs	r5, #0
 800507a:	4545      	cmp	r5, r8
 800507c:	dd12      	ble.n	80050a4 <__kernel_rem_pio2+0x84>
 800507e:	9b06      	ldr	r3, [sp, #24]
 8005080:	aa20      	add	r2, sp, #128	@ 0x80
 8005082:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005086:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800508a:	2700      	movs	r7, #0
 800508c:	9b00      	ldr	r3, [sp, #0]
 800508e:	429f      	cmp	r7, r3
 8005090:	dc2e      	bgt.n	80050f0 <__kernel_rem_pio2+0xd0>
 8005092:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005330 <__kernel_rem_pio2+0x310>
 8005096:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800509a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800509e:	46a8      	mov	r8, r5
 80050a0:	2600      	movs	r6, #0
 80050a2:	e01b      	b.n	80050dc <__kernel_rem_pio2+0xbc>
 80050a4:	42ef      	cmn	r7, r5
 80050a6:	d407      	bmi.n	80050b8 <__kernel_rem_pio2+0x98>
 80050a8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80050ac:	f7fb fa06 	bl	80004bc <__aeabi_i2d>
 80050b0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7e0      	b.n	800507a <__kernel_rem_pio2+0x5a>
 80050b8:	ec51 0b18 	vmov	r0, r1, d8
 80050bc:	e7f8      	b.n	80050b0 <__kernel_rem_pio2+0x90>
 80050be:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80050c2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80050c6:	f7fb fa63 	bl	8000590 <__aeabi_dmul>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d2:	f7fb f8a7 	bl	8000224 <__adddf3>
 80050d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050da:	3601      	adds	r6, #1
 80050dc:	9b05      	ldr	r3, [sp, #20]
 80050de:	429e      	cmp	r6, r3
 80050e0:	dded      	ble.n	80050be <__kernel_rem_pio2+0x9e>
 80050e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050e6:	3701      	adds	r7, #1
 80050e8:	ecaa 7b02 	vstmia	sl!, {d7}
 80050ec:	3508      	adds	r5, #8
 80050ee:	e7cd      	b.n	800508c <__kernel_rem_pio2+0x6c>
 80050f0:	9b00      	ldr	r3, [sp, #0]
 80050f2:	f8dd 8000 	ldr.w	r8, [sp]
 80050f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80050f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80050fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005100:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005104:	9309      	str	r3, [sp, #36]	@ 0x24
 8005106:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800510a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800510c:	ab98      	add	r3, sp, #608	@ 0x260
 800510e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005112:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005116:	ed8d 7b02 	vstr	d7, [sp, #8]
 800511a:	ac0c      	add	r4, sp, #48	@ 0x30
 800511c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800511e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005122:	46a1      	mov	r9, r4
 8005124:	46c2      	mov	sl, r8
 8005126:	f1ba 0f00 	cmp.w	sl, #0
 800512a:	dc77      	bgt.n	800521c <__kernel_rem_pio2+0x1fc>
 800512c:	4658      	mov	r0, fp
 800512e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005132:	f000 fac5 	bl	80056c0 <scalbn>
 8005136:	ec57 6b10 	vmov	r6, r7, d0
 800513a:	2200      	movs	r2, #0
 800513c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005140:	4630      	mov	r0, r6
 8005142:	4639      	mov	r1, r7
 8005144:	f7fb fa24 	bl	8000590 <__aeabi_dmul>
 8005148:	ec41 0b10 	vmov	d0, r0, r1
 800514c:	f000 fb34 	bl	80057b8 <floor>
 8005150:	4b7c      	ldr	r3, [pc, #496]	@ (8005344 <__kernel_rem_pio2+0x324>)
 8005152:	ec51 0b10 	vmov	r0, r1, d0
 8005156:	2200      	movs	r2, #0
 8005158:	f7fb fa1a 	bl	8000590 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb f85c 	bl	8000220 <__aeabi_dsub>
 8005168:	460f      	mov	r7, r1
 800516a:	4606      	mov	r6, r0
 800516c:	f7fb fcaa 	bl	8000ac4 <__aeabi_d2iz>
 8005170:	9002      	str	r0, [sp, #8]
 8005172:	f7fb f9a3 	bl	80004bc <__aeabi_i2d>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4630      	mov	r0, r6
 800517c:	4639      	mov	r1, r7
 800517e:	f7fb f84f 	bl	8000220 <__aeabi_dsub>
 8005182:	f1bb 0f00 	cmp.w	fp, #0
 8005186:	4606      	mov	r6, r0
 8005188:	460f      	mov	r7, r1
 800518a:	dd6c      	ble.n	8005266 <__kernel_rem_pio2+0x246>
 800518c:	f108 31ff 	add.w	r1, r8, #4294967295
 8005190:	ab0c      	add	r3, sp, #48	@ 0x30
 8005192:	9d02      	ldr	r5, [sp, #8]
 8005194:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005198:	f1cb 0018 	rsb	r0, fp, #24
 800519c:	fa43 f200 	asr.w	r2, r3, r0
 80051a0:	4415      	add	r5, r2
 80051a2:	4082      	lsls	r2, r0
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	aa0c      	add	r2, sp, #48	@ 0x30
 80051a8:	9502      	str	r5, [sp, #8]
 80051aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80051ae:	f1cb 0217 	rsb	r2, fp, #23
 80051b2:	fa43 f902 	asr.w	r9, r3, r2
 80051b6:	f1b9 0f00 	cmp.w	r9, #0
 80051ba:	dd64      	ble.n	8005286 <__kernel_rem_pio2+0x266>
 80051bc:	9b02      	ldr	r3, [sp, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	3301      	adds	r3, #1
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	4615      	mov	r5, r2
 80051c6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80051ca:	4590      	cmp	r8, r2
 80051cc:	f300 80a1 	bgt.w	8005312 <__kernel_rem_pio2+0x2f2>
 80051d0:	f1bb 0f00 	cmp.w	fp, #0
 80051d4:	dd07      	ble.n	80051e6 <__kernel_rem_pio2+0x1c6>
 80051d6:	f1bb 0f01 	cmp.w	fp, #1
 80051da:	f000 80c1 	beq.w	8005360 <__kernel_rem_pio2+0x340>
 80051de:	f1bb 0f02 	cmp.w	fp, #2
 80051e2:	f000 80c8 	beq.w	8005376 <__kernel_rem_pio2+0x356>
 80051e6:	f1b9 0f02 	cmp.w	r9, #2
 80051ea:	d14c      	bne.n	8005286 <__kernel_rem_pio2+0x266>
 80051ec:	4632      	mov	r2, r6
 80051ee:	463b      	mov	r3, r7
 80051f0:	4955      	ldr	r1, [pc, #340]	@ (8005348 <__kernel_rem_pio2+0x328>)
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fb f814 	bl	8000220 <__aeabi_dsub>
 80051f8:	4606      	mov	r6, r0
 80051fa:	460f      	mov	r7, r1
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	d042      	beq.n	8005286 <__kernel_rem_pio2+0x266>
 8005200:	4658      	mov	r0, fp
 8005202:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005338 <__kernel_rem_pio2+0x318>
 8005206:	f000 fa5b 	bl	80056c0 <scalbn>
 800520a:	4630      	mov	r0, r6
 800520c:	4639      	mov	r1, r7
 800520e:	ec53 2b10 	vmov	r2, r3, d0
 8005212:	f7fb f805 	bl	8000220 <__aeabi_dsub>
 8005216:	4606      	mov	r6, r0
 8005218:	460f      	mov	r7, r1
 800521a:	e034      	b.n	8005286 <__kernel_rem_pio2+0x266>
 800521c:	4b4b      	ldr	r3, [pc, #300]	@ (800534c <__kernel_rem_pio2+0x32c>)
 800521e:	2200      	movs	r2, #0
 8005220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005224:	f7fb f9b4 	bl	8000590 <__aeabi_dmul>
 8005228:	f7fb fc4c 	bl	8000ac4 <__aeabi_d2iz>
 800522c:	f7fb f946 	bl	80004bc <__aeabi_i2d>
 8005230:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <__kernel_rem_pio2+0x330>)
 8005232:	2200      	movs	r2, #0
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	f7fb f9aa 	bl	8000590 <__aeabi_dmul>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005244:	f7fa ffec 	bl	8000220 <__aeabi_dsub>
 8005248:	f7fb fc3c 	bl	8000ac4 <__aeabi_d2iz>
 800524c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005250:	f849 0b04 	str.w	r0, [r9], #4
 8005254:	4639      	mov	r1, r7
 8005256:	4630      	mov	r0, r6
 8005258:	f7fa ffe4 	bl	8000224 <__adddf3>
 800525c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005264:	e75f      	b.n	8005126 <__kernel_rem_pio2+0x106>
 8005266:	d107      	bne.n	8005278 <__kernel_rem_pio2+0x258>
 8005268:	f108 33ff 	add.w	r3, r8, #4294967295
 800526c:	aa0c      	add	r2, sp, #48	@ 0x30
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005276:	e79e      	b.n	80051b6 <__kernel_rem_pio2+0x196>
 8005278:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <__kernel_rem_pio2+0x334>)
 800527a:	2200      	movs	r2, #0
 800527c:	f7fb fc0e 	bl	8000a9c <__aeabi_dcmpge>
 8005280:	2800      	cmp	r0, #0
 8005282:	d143      	bne.n	800530c <__kernel_rem_pio2+0x2ec>
 8005284:	4681      	mov	r9, r0
 8005286:	2200      	movs	r2, #0
 8005288:	2300      	movs	r3, #0
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb fbe7 	bl	8000a60 <__aeabi_dcmpeq>
 8005292:	2800      	cmp	r0, #0
 8005294:	f000 80c1 	beq.w	800541a <__kernel_rem_pio2+0x3fa>
 8005298:	f108 33ff 	add.w	r3, r8, #4294967295
 800529c:	2200      	movs	r2, #0
 800529e:	9900      	ldr	r1, [sp, #0]
 80052a0:	428b      	cmp	r3, r1
 80052a2:	da70      	bge.n	8005386 <__kernel_rem_pio2+0x366>
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	f000 808b 	beq.w	80053c0 <__kernel_rem_pio2+0x3a0>
 80052aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80052ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80052b0:	f1ab 0b18 	sub.w	fp, fp, #24
 80052b4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f6      	beq.n	80052aa <__kernel_rem_pio2+0x28a>
 80052bc:	4658      	mov	r0, fp
 80052be:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005338 <__kernel_rem_pio2+0x318>
 80052c2:	f000 f9fd 	bl	80056c0 <scalbn>
 80052c6:	f108 0301 	add.w	r3, r8, #1
 80052ca:	00da      	lsls	r2, r3, #3
 80052cc:	9205      	str	r2, [sp, #20]
 80052ce:	ec55 4b10 	vmov	r4, r5, d0
 80052d2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80052d4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800534c <__kernel_rem_pio2+0x32c>
 80052d8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80052dc:	4646      	mov	r6, r8
 80052de:	f04f 0a00 	mov.w	sl, #0
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	f280 80d1 	bge.w	800548a <__kernel_rem_pio2+0x46a>
 80052e8:	4644      	mov	r4, r8
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	f2c0 80ff 	blt.w	80054ee <__kernel_rem_pio2+0x4ce>
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <__kernel_rem_pio2+0x338>)
 80052f2:	461f      	mov	r7, r3
 80052f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80052f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052fa:	9306      	str	r3, [sp, #24]
 80052fc:	f04f 0a00 	mov.w	sl, #0
 8005300:	f04f 0b00 	mov.w	fp, #0
 8005304:	2600      	movs	r6, #0
 8005306:	eba8 0504 	sub.w	r5, r8, r4
 800530a:	e0e4      	b.n	80054d6 <__kernel_rem_pio2+0x4b6>
 800530c:	f04f 0902 	mov.w	r9, #2
 8005310:	e754      	b.n	80051bc <__kernel_rem_pio2+0x19c>
 8005312:	f854 3b04 	ldr.w	r3, [r4], #4
 8005316:	bb0d      	cbnz	r5, 800535c <__kernel_rem_pio2+0x33c>
 8005318:	b123      	cbz	r3, 8005324 <__kernel_rem_pio2+0x304>
 800531a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800531e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005322:	2301      	movs	r3, #1
 8005324:	3201      	adds	r2, #1
 8005326:	461d      	mov	r5, r3
 8005328:	e74f      	b.n	80051ca <__kernel_rem_pio2+0x1aa>
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w
	...
 800533c:	3ff00000 	.word	0x3ff00000
 8005340:	08005aa0 	.word	0x08005aa0
 8005344:	40200000 	.word	0x40200000
 8005348:	3ff00000 	.word	0x3ff00000
 800534c:	3e700000 	.word	0x3e700000
 8005350:	41700000 	.word	0x41700000
 8005354:	3fe00000 	.word	0x3fe00000
 8005358:	08005a60 	.word	0x08005a60
 800535c:	1acb      	subs	r3, r1, r3
 800535e:	e7de      	b.n	800531e <__kernel_rem_pio2+0x2fe>
 8005360:	f108 32ff 	add.w	r2, r8, #4294967295
 8005364:	ab0c      	add	r3, sp, #48	@ 0x30
 8005366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800536e:	a90c      	add	r1, sp, #48	@ 0x30
 8005370:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005374:	e737      	b.n	80051e6 <__kernel_rem_pio2+0x1c6>
 8005376:	f108 32ff 	add.w	r2, r8, #4294967295
 800537a:	ab0c      	add	r3, sp, #48	@ 0x30
 800537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005380:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005384:	e7f3      	b.n	800536e <__kernel_rem_pio2+0x34e>
 8005386:	a90c      	add	r1, sp, #48	@ 0x30
 8005388:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800538c:	3b01      	subs	r3, #1
 800538e:	430a      	orrs	r2, r1
 8005390:	e785      	b.n	800529e <__kernel_rem_pio2+0x27e>
 8005392:	3401      	adds	r4, #1
 8005394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005398:	2a00      	cmp	r2, #0
 800539a:	d0fa      	beq.n	8005392 <__kernel_rem_pio2+0x372>
 800539c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800539e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80053a2:	eb0d 0503 	add.w	r5, sp, r3
 80053a6:	9b06      	ldr	r3, [sp, #24]
 80053a8:	aa20      	add	r2, sp, #128	@ 0x80
 80053aa:	4443      	add	r3, r8
 80053ac:	f108 0701 	add.w	r7, r8, #1
 80053b0:	3d98      	subs	r5, #152	@ 0x98
 80053b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80053b6:	4444      	add	r4, r8
 80053b8:	42bc      	cmp	r4, r7
 80053ba:	da04      	bge.n	80053c6 <__kernel_rem_pio2+0x3a6>
 80053bc:	46a0      	mov	r8, r4
 80053be:	e6a2      	b.n	8005106 <__kernel_rem_pio2+0xe6>
 80053c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053c2:	2401      	movs	r4, #1
 80053c4:	e7e6      	b.n	8005394 <__kernel_rem_pio2+0x374>
 80053c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80053cc:	f7fb f876 	bl	80004bc <__aeabi_i2d>
 80053d0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8005690 <__kernel_rem_pio2+0x670>
 80053d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80053d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053e0:	46b2      	mov	sl, r6
 80053e2:	f04f 0800 	mov.w	r8, #0
 80053e6:	9b05      	ldr	r3, [sp, #20]
 80053e8:	4598      	cmp	r8, r3
 80053ea:	dd05      	ble.n	80053f8 <__kernel_rem_pio2+0x3d8>
 80053ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053f0:	3701      	adds	r7, #1
 80053f2:	eca5 7b02 	vstmia	r5!, {d7}
 80053f6:	e7df      	b.n	80053b8 <__kernel_rem_pio2+0x398>
 80053f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80053fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005400:	f7fb f8c6 	bl	8000590 <__aeabi_dmul>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540c:	f7fa ff0a 	bl	8000224 <__adddf3>
 8005410:	f108 0801 	add.w	r8, r8, #1
 8005414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005418:	e7e5      	b.n	80053e6 <__kernel_rem_pio2+0x3c6>
 800541a:	f1cb 0000 	rsb	r0, fp, #0
 800541e:	ec47 6b10 	vmov	d0, r6, r7
 8005422:	f000 f94d 	bl	80056c0 <scalbn>
 8005426:	ec55 4b10 	vmov	r4, r5, d0
 800542a:	4b9b      	ldr	r3, [pc, #620]	@ (8005698 <__kernel_rem_pio2+0x678>)
 800542c:	2200      	movs	r2, #0
 800542e:	4620      	mov	r0, r4
 8005430:	4629      	mov	r1, r5
 8005432:	f7fb fb33 	bl	8000a9c <__aeabi_dcmpge>
 8005436:	b300      	cbz	r0, 800547a <__kernel_rem_pio2+0x45a>
 8005438:	4b98      	ldr	r3, [pc, #608]	@ (800569c <__kernel_rem_pio2+0x67c>)
 800543a:	2200      	movs	r2, #0
 800543c:	4620      	mov	r0, r4
 800543e:	4629      	mov	r1, r5
 8005440:	f7fb f8a6 	bl	8000590 <__aeabi_dmul>
 8005444:	f7fb fb3e 	bl	8000ac4 <__aeabi_d2iz>
 8005448:	4606      	mov	r6, r0
 800544a:	f7fb f837 	bl	80004bc <__aeabi_i2d>
 800544e:	4b92      	ldr	r3, [pc, #584]	@ (8005698 <__kernel_rem_pio2+0x678>)
 8005450:	2200      	movs	r2, #0
 8005452:	f7fb f89d 	bl	8000590 <__aeabi_dmul>
 8005456:	460b      	mov	r3, r1
 8005458:	4602      	mov	r2, r0
 800545a:	4629      	mov	r1, r5
 800545c:	4620      	mov	r0, r4
 800545e:	f7fa fedf 	bl	8000220 <__aeabi_dsub>
 8005462:	f7fb fb2f 	bl	8000ac4 <__aeabi_d2iz>
 8005466:	ab0c      	add	r3, sp, #48	@ 0x30
 8005468:	f10b 0b18 	add.w	fp, fp, #24
 800546c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005470:	f108 0801 	add.w	r8, r8, #1
 8005474:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005478:	e720      	b.n	80052bc <__kernel_rem_pio2+0x29c>
 800547a:	4620      	mov	r0, r4
 800547c:	4629      	mov	r1, r5
 800547e:	f7fb fb21 	bl	8000ac4 <__aeabi_d2iz>
 8005482:	ab0c      	add	r3, sp, #48	@ 0x30
 8005484:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005488:	e718      	b.n	80052bc <__kernel_rem_pio2+0x29c>
 800548a:	ab0c      	add	r3, sp, #48	@ 0x30
 800548c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005490:	f7fb f814 	bl	80004bc <__aeabi_i2d>
 8005494:	4622      	mov	r2, r4
 8005496:	462b      	mov	r3, r5
 8005498:	f7fb f87a 	bl	8000590 <__aeabi_dmul>
 800549c:	4652      	mov	r2, sl
 800549e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80054a2:	465b      	mov	r3, fp
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fb f872 	bl	8000590 <__aeabi_dmul>
 80054ac:	3e01      	subs	r6, #1
 80054ae:	4604      	mov	r4, r0
 80054b0:	460d      	mov	r5, r1
 80054b2:	e716      	b.n	80052e2 <__kernel_rem_pio2+0x2c2>
 80054b4:	9906      	ldr	r1, [sp, #24]
 80054b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80054ba:	9106      	str	r1, [sp, #24]
 80054bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80054c0:	f7fb f866 	bl	8000590 <__aeabi_dmul>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4650      	mov	r0, sl
 80054ca:	4659      	mov	r1, fp
 80054cc:	f7fa feaa 	bl	8000224 <__adddf3>
 80054d0:	3601      	adds	r6, #1
 80054d2:	4682      	mov	sl, r0
 80054d4:	468b      	mov	fp, r1
 80054d6:	9b00      	ldr	r3, [sp, #0]
 80054d8:	429e      	cmp	r6, r3
 80054da:	dc01      	bgt.n	80054e0 <__kernel_rem_pio2+0x4c0>
 80054dc:	42ae      	cmp	r6, r5
 80054de:	dde9      	ble.n	80054b4 <__kernel_rem_pio2+0x494>
 80054e0:	ab48      	add	r3, sp, #288	@ 0x120
 80054e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80054e6:	e9c5 ab00 	strd	sl, fp, [r5]
 80054ea:	3c01      	subs	r4, #1
 80054ec:	e6fd      	b.n	80052ea <__kernel_rem_pio2+0x2ca>
 80054ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	dc0b      	bgt.n	800550c <__kernel_rem_pio2+0x4ec>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dc35      	bgt.n	8005564 <__kernel_rem_pio2+0x544>
 80054f8:	d059      	beq.n	80055ae <__kernel_rem_pio2+0x58e>
 80054fa:	9b02      	ldr	r3, [sp, #8]
 80054fc:	f003 0007 	and.w	r0, r3, #7
 8005500:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005504:	ecbd 8b02 	vpop	{d8}
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800550e:	2b03      	cmp	r3, #3
 8005510:	d1f3      	bne.n	80054fa <__kernel_rem_pio2+0x4da>
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005518:	eb0d 0403 	add.w	r4, sp, r3
 800551c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005520:	4625      	mov	r5, r4
 8005522:	46c2      	mov	sl, r8
 8005524:	f1ba 0f00 	cmp.w	sl, #0
 8005528:	dc69      	bgt.n	80055fe <__kernel_rem_pio2+0x5de>
 800552a:	4645      	mov	r5, r8
 800552c:	2d01      	cmp	r5, #1
 800552e:	f300 8087 	bgt.w	8005640 <__kernel_rem_pio2+0x620>
 8005532:	9c05      	ldr	r4, [sp, #20]
 8005534:	ab48      	add	r3, sp, #288	@ 0x120
 8005536:	441c      	add	r4, r3
 8005538:	2000      	movs	r0, #0
 800553a:	2100      	movs	r1, #0
 800553c:	f1b8 0f01 	cmp.w	r8, #1
 8005540:	f300 809c 	bgt.w	800567c <__kernel_rem_pio2+0x65c>
 8005544:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8005548:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800554c:	f1b9 0f00 	cmp.w	r9, #0
 8005550:	f040 80a6 	bne.w	80056a0 <__kernel_rem_pio2+0x680>
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	e9c3 5600 	strd	r5, r6, [r3]
 800555a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800555e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005562:	e7ca      	b.n	80054fa <__kernel_rem_pio2+0x4da>
 8005564:	9d05      	ldr	r5, [sp, #20]
 8005566:	ab48      	add	r3, sp, #288	@ 0x120
 8005568:	441d      	add	r5, r3
 800556a:	4644      	mov	r4, r8
 800556c:	2000      	movs	r0, #0
 800556e:	2100      	movs	r1, #0
 8005570:	2c00      	cmp	r4, #0
 8005572:	da35      	bge.n	80055e0 <__kernel_rem_pio2+0x5c0>
 8005574:	f1b9 0f00 	cmp.w	r9, #0
 8005578:	d038      	beq.n	80055ec <__kernel_rem_pio2+0x5cc>
 800557a:	4602      	mov	r2, r0
 800557c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005580:	9c04      	ldr	r4, [sp, #16]
 8005582:	e9c4 2300 	strd	r2, r3, [r4]
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800558e:	f7fa fe47 	bl	8000220 <__aeabi_dsub>
 8005592:	ad4a      	add	r5, sp, #296	@ 0x128
 8005594:	2401      	movs	r4, #1
 8005596:	45a0      	cmp	r8, r4
 8005598:	da2b      	bge.n	80055f2 <__kernel_rem_pio2+0x5d2>
 800559a:	f1b9 0f00 	cmp.w	r9, #0
 800559e:	d002      	beq.n	80055a6 <__kernel_rem_pio2+0x586>
 80055a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055a4:	4619      	mov	r1, r3
 80055a6:	9b04      	ldr	r3, [sp, #16]
 80055a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80055ac:	e7a5      	b.n	80054fa <__kernel_rem_pio2+0x4da>
 80055ae:	9c05      	ldr	r4, [sp, #20]
 80055b0:	ab48      	add	r3, sp, #288	@ 0x120
 80055b2:	441c      	add	r4, r3
 80055b4:	2000      	movs	r0, #0
 80055b6:	2100      	movs	r1, #0
 80055b8:	f1b8 0f00 	cmp.w	r8, #0
 80055bc:	da09      	bge.n	80055d2 <__kernel_rem_pio2+0x5b2>
 80055be:	f1b9 0f00 	cmp.w	r9, #0
 80055c2:	d002      	beq.n	80055ca <__kernel_rem_pio2+0x5aa>
 80055c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055c8:	4619      	mov	r1, r3
 80055ca:	9b04      	ldr	r3, [sp, #16]
 80055cc:	e9c3 0100 	strd	r0, r1, [r3]
 80055d0:	e793      	b.n	80054fa <__kernel_rem_pio2+0x4da>
 80055d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055d6:	f7fa fe25 	bl	8000224 <__adddf3>
 80055da:	f108 38ff 	add.w	r8, r8, #4294967295
 80055de:	e7eb      	b.n	80055b8 <__kernel_rem_pio2+0x598>
 80055e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80055e4:	f7fa fe1e 	bl	8000224 <__adddf3>
 80055e8:	3c01      	subs	r4, #1
 80055ea:	e7c1      	b.n	8005570 <__kernel_rem_pio2+0x550>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	e7c6      	b.n	8005580 <__kernel_rem_pio2+0x560>
 80055f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80055f6:	f7fa fe15 	bl	8000224 <__adddf3>
 80055fa:	3401      	adds	r4, #1
 80055fc:	e7cb      	b.n	8005596 <__kernel_rem_pio2+0x576>
 80055fe:	ed35 7b02 	vldmdb	r5!, {d7}
 8005602:	ed8d 7b00 	vstr	d7, [sp]
 8005606:	ed95 7b02 	vldr	d7, [r5, #8]
 800560a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800560e:	ec53 2b17 	vmov	r2, r3, d7
 8005612:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005616:	f7fa fe05 	bl	8000224 <__adddf3>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005626:	f7fa fdfb 	bl	8000220 <__aeabi_dsub>
 800562a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800562e:	f7fa fdf9 	bl	8000224 <__adddf3>
 8005632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005636:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800563a:	e9c5 6700 	strd	r6, r7, [r5]
 800563e:	e771      	b.n	8005524 <__kernel_rem_pio2+0x504>
 8005640:	ed34 7b02 	vldmdb	r4!, {d7}
 8005644:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005648:	ec51 0b17 	vmov	r0, r1, d7
 800564c:	4652      	mov	r2, sl
 800564e:	465b      	mov	r3, fp
 8005650:	ed8d 7b00 	vstr	d7, [sp]
 8005654:	f7fa fde6 	bl	8000224 <__adddf3>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4606      	mov	r6, r0
 800565e:	460f      	mov	r7, r1
 8005660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005664:	f7fa fddc 	bl	8000220 <__aeabi_dsub>
 8005668:	4652      	mov	r2, sl
 800566a:	465b      	mov	r3, fp
 800566c:	f7fa fdda 	bl	8000224 <__adddf3>
 8005670:	3d01      	subs	r5, #1
 8005672:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005676:	e9c4 6700 	strd	r6, r7, [r4]
 800567a:	e757      	b.n	800552c <__kernel_rem_pio2+0x50c>
 800567c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005680:	f7fa fdd0 	bl	8000224 <__adddf3>
 8005684:	f108 38ff 	add.w	r8, r8, #4294967295
 8005688:	e758      	b.n	800553c <__kernel_rem_pio2+0x51c>
 800568a:	bf00      	nop
 800568c:	f3af 8000 	nop.w
	...
 8005698:	41700000 	.word	0x41700000
 800569c:	3e700000 	.word	0x3e700000
 80056a0:	9b04      	ldr	r3, [sp, #16]
 80056a2:	9a04      	ldr	r2, [sp, #16]
 80056a4:	601d      	str	r5, [r3, #0]
 80056a6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80056aa:	605c      	str	r4, [r3, #4]
 80056ac:	609f      	str	r7, [r3, #8]
 80056ae:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80056b2:	60d3      	str	r3, [r2, #12]
 80056b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056b8:	6110      	str	r0, [r2, #16]
 80056ba:	6153      	str	r3, [r2, #20]
 80056bc:	e71d      	b.n	80054fa <__kernel_rem_pio2+0x4da>
 80056be:	bf00      	nop

080056c0 <scalbn>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	ec55 4b10 	vmov	r4, r5, d0
 80056c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80056ca:	4606      	mov	r6, r0
 80056cc:	462b      	mov	r3, r5
 80056ce:	b991      	cbnz	r1, 80056f6 <scalbn+0x36>
 80056d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80056d4:	4323      	orrs	r3, r4
 80056d6:	d03b      	beq.n	8005750 <scalbn+0x90>
 80056d8:	4b33      	ldr	r3, [pc, #204]	@ (80057a8 <scalbn+0xe8>)
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	2200      	movs	r2, #0
 80056e0:	f7fa ff56 	bl	8000590 <__aeabi_dmul>
 80056e4:	4b31      	ldr	r3, [pc, #196]	@ (80057ac <scalbn+0xec>)
 80056e6:	429e      	cmp	r6, r3
 80056e8:	4604      	mov	r4, r0
 80056ea:	460d      	mov	r5, r1
 80056ec:	da0f      	bge.n	800570e <scalbn+0x4e>
 80056ee:	a326      	add	r3, pc, #152	@ (adr r3, 8005788 <scalbn+0xc8>)
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	e01e      	b.n	8005734 <scalbn+0x74>
 80056f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80056fa:	4291      	cmp	r1, r2
 80056fc:	d10b      	bne.n	8005716 <scalbn+0x56>
 80056fe:	4622      	mov	r2, r4
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	f7fa fd8e 	bl	8000224 <__adddf3>
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	e020      	b.n	8005750 <scalbn+0x90>
 800570e:	460b      	mov	r3, r1
 8005710:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005714:	3936      	subs	r1, #54	@ 0x36
 8005716:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800571a:	4296      	cmp	r6, r2
 800571c:	dd0d      	ble.n	800573a <scalbn+0x7a>
 800571e:	2d00      	cmp	r5, #0
 8005720:	a11b      	add	r1, pc, #108	@ (adr r1, 8005790 <scalbn+0xd0>)
 8005722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005726:	da02      	bge.n	800572e <scalbn+0x6e>
 8005728:	a11b      	add	r1, pc, #108	@ (adr r1, 8005798 <scalbn+0xd8>)
 800572a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800572e:	a318      	add	r3, pc, #96	@ (adr r3, 8005790 <scalbn+0xd0>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f7fa ff2c 	bl	8000590 <__aeabi_dmul>
 8005738:	e7e6      	b.n	8005708 <scalbn+0x48>
 800573a:	1872      	adds	r2, r6, r1
 800573c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005740:	428a      	cmp	r2, r1
 8005742:	dcec      	bgt.n	800571e <scalbn+0x5e>
 8005744:	2a00      	cmp	r2, #0
 8005746:	dd06      	ble.n	8005756 <scalbn+0x96>
 8005748:	f36f 531e 	bfc	r3, #20, #11
 800574c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005750:	ec45 4b10 	vmov	d0, r4, r5
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800575a:	da08      	bge.n	800576e <scalbn+0xae>
 800575c:	2d00      	cmp	r5, #0
 800575e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005788 <scalbn+0xc8>)
 8005760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005764:	dac3      	bge.n	80056ee <scalbn+0x2e>
 8005766:	a10e      	add	r1, pc, #56	@ (adr r1, 80057a0 <scalbn+0xe0>)
 8005768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800576c:	e7bf      	b.n	80056ee <scalbn+0x2e>
 800576e:	3236      	adds	r2, #54	@ 0x36
 8005770:	f36f 531e 	bfc	r3, #20, #11
 8005774:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005778:	4620      	mov	r0, r4
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <scalbn+0xf0>)
 800577c:	4629      	mov	r1, r5
 800577e:	2200      	movs	r2, #0
 8005780:	e7d8      	b.n	8005734 <scalbn+0x74>
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	c2f8f359 	.word	0xc2f8f359
 800578c:	01a56e1f 	.word	0x01a56e1f
 8005790:	8800759c 	.word	0x8800759c
 8005794:	7e37e43c 	.word	0x7e37e43c
 8005798:	8800759c 	.word	0x8800759c
 800579c:	fe37e43c 	.word	0xfe37e43c
 80057a0:	c2f8f359 	.word	0xc2f8f359
 80057a4:	81a56e1f 	.word	0x81a56e1f
 80057a8:	43500000 	.word	0x43500000
 80057ac:	ffff3cb0 	.word	0xffff3cb0
 80057b0:	3c900000 	.word	0x3c900000
 80057b4:	00000000 	.word	0x00000000

080057b8 <floor>:
 80057b8:	ec51 0b10 	vmov	r0, r1, d0
 80057bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80057c8:	2e13      	cmp	r6, #19
 80057ca:	460c      	mov	r4, r1
 80057cc:	4605      	mov	r5, r0
 80057ce:	4680      	mov	r8, r0
 80057d0:	dc34      	bgt.n	800583c <floor+0x84>
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	da17      	bge.n	8005806 <floor+0x4e>
 80057d6:	a332      	add	r3, pc, #200	@ (adr r3, 80058a0 <floor+0xe8>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa fd22 	bl	8000224 <__adddf3>
 80057e0:	2200      	movs	r2, #0
 80057e2:	2300      	movs	r3, #0
 80057e4:	f7fb f964 	bl	8000ab0 <__aeabi_dcmpgt>
 80057e8:	b150      	cbz	r0, 8005800 <floor+0x48>
 80057ea:	2c00      	cmp	r4, #0
 80057ec:	da55      	bge.n	800589a <floor+0xe2>
 80057ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80057f2:	432c      	orrs	r4, r5
 80057f4:	2500      	movs	r5, #0
 80057f6:	42ac      	cmp	r4, r5
 80057f8:	4c2b      	ldr	r4, [pc, #172]	@ (80058a8 <floor+0xf0>)
 80057fa:	bf08      	it	eq
 80057fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	e023      	b.n	800584e <floor+0x96>
 8005806:	4f29      	ldr	r7, [pc, #164]	@ (80058ac <floor+0xf4>)
 8005808:	4137      	asrs	r7, r6
 800580a:	ea01 0307 	and.w	r3, r1, r7
 800580e:	4303      	orrs	r3, r0
 8005810:	d01d      	beq.n	800584e <floor+0x96>
 8005812:	a323      	add	r3, pc, #140	@ (adr r3, 80058a0 <floor+0xe8>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f7fa fd04 	bl	8000224 <__adddf3>
 800581c:	2200      	movs	r2, #0
 800581e:	2300      	movs	r3, #0
 8005820:	f7fb f946 	bl	8000ab0 <__aeabi_dcmpgt>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0eb      	beq.n	8005800 <floor+0x48>
 8005828:	2c00      	cmp	r4, #0
 800582a:	bfbe      	ittt	lt
 800582c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005830:	4133      	asrlt	r3, r6
 8005832:	18e4      	addlt	r4, r4, r3
 8005834:	ea24 0407 	bic.w	r4, r4, r7
 8005838:	2500      	movs	r5, #0
 800583a:	e7e1      	b.n	8005800 <floor+0x48>
 800583c:	2e33      	cmp	r6, #51	@ 0x33
 800583e:	dd0a      	ble.n	8005856 <floor+0x9e>
 8005840:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005844:	d103      	bne.n	800584e <floor+0x96>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	f7fa fceb 	bl	8000224 <__adddf3>
 800584e:	ec41 0b10 	vmov	d0, r0, r1
 8005852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005856:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800585a:	f04f 37ff 	mov.w	r7, #4294967295
 800585e:	40df      	lsrs	r7, r3
 8005860:	4207      	tst	r7, r0
 8005862:	d0f4      	beq.n	800584e <floor+0x96>
 8005864:	a30e      	add	r3, pc, #56	@ (adr r3, 80058a0 <floor+0xe8>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fcdb 	bl	8000224 <__adddf3>
 800586e:	2200      	movs	r2, #0
 8005870:	2300      	movs	r3, #0
 8005872:	f7fb f91d 	bl	8000ab0 <__aeabi_dcmpgt>
 8005876:	2800      	cmp	r0, #0
 8005878:	d0c2      	beq.n	8005800 <floor+0x48>
 800587a:	2c00      	cmp	r4, #0
 800587c:	da0a      	bge.n	8005894 <floor+0xdc>
 800587e:	2e14      	cmp	r6, #20
 8005880:	d101      	bne.n	8005886 <floor+0xce>
 8005882:	3401      	adds	r4, #1
 8005884:	e006      	b.n	8005894 <floor+0xdc>
 8005886:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800588a:	2301      	movs	r3, #1
 800588c:	40b3      	lsls	r3, r6
 800588e:	441d      	add	r5, r3
 8005890:	4545      	cmp	r5, r8
 8005892:	d3f6      	bcc.n	8005882 <floor+0xca>
 8005894:	ea25 0507 	bic.w	r5, r5, r7
 8005898:	e7b2      	b.n	8005800 <floor+0x48>
 800589a:	2500      	movs	r5, #0
 800589c:	462c      	mov	r4, r5
 800589e:	e7af      	b.n	8005800 <floor+0x48>
 80058a0:	8800759c 	.word	0x8800759c
 80058a4:	7e37e43c 	.word	0x7e37e43c
 80058a8:	bff00000 	.word	0xbff00000
 80058ac:	000fffff 	.word	0x000fffff

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
