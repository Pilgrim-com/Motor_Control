
MotorControlStudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004764  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800494c  0800494c  0000601c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800494c  0800494c  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800494c  0800494c  0000594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004950  08004950  00005950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004954  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000001c  08004970  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004970  00006234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6fe  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211e  00000000  00000000  0001374a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00015868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a04  00000000  00000000  00016578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026635  00000000  00000000  00016f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef79  00000000  00000000  0003d5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6f4e  00000000  00000000  0004c52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  001434bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00146bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004924 	.word	0x08004924

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08004924 	.word	0x08004924

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aa0:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	615a      	str	r2, [r3, #20]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PIDCompute>:

float PIDCompute(CONTROLLER* controller , float kp, float ki, float kd, float error)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6178      	str	r0, [r7, #20]
 8000ac4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ac8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000acc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ad0:	edc7 1a01 	vstr	s3, [r7, #4]

	controller -> kp = kp;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	601a      	str	r2, [r3, #0]
	controller -> kd = kd;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	609a      	str	r2, [r3, #8]
	controller -> ki = ki;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	605a      	str	r2, [r3, #4]

    // Anti-windup: only integrate if not saturated
    if (!((controller->u >= controller->u_max && error > 0) ||
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	edd3 7a04 	vldr	s15, [r3, #16]
 8000af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afa:	bfac      	ite	ge
 8000afc:	2301      	movge	r3, #1
 8000afe:	2300      	movlt	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f083 0301 	eor.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10e      	bne.n	8000b2a <PIDCompute+0x6e>
 8000b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	bfcc      	ite	gt
 8000b1a:	2301      	movgt	r3, #1
 8000b1c:	2300      	movle	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d059      	beq.n	8000bde <PIDCompute+0x122>
          (controller->u <= controller->u_min && error < 0)))
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	bf94      	ite	ls
 8000b40:	2301      	movls	r3, #1
 8000b42:	2300      	movhi	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f083 0301 	eor.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
    if (!((controller->u >= controller->u_max && error > 0) ||
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10e      	bne.n	8000b6e <PIDCompute+0xb2>
          (controller->u <= controller->u_min && error < 0)))
 8000b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5c:	bf4c      	ite	mi
 8000b5e:	2301      	movmi	r3, #1
 8000b60:	2300      	movpl	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f083 0301 	eor.w	r3, r3, #1
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d037      	beq.n	8000bde <PIDCompute+0x122>
    {
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	ed93 7a00 	vldr	s14, [r3]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
                      - (controller->kp + 2 * controller->kd) * controller->prev_error_one
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	edd3 6a00 	vldr	s13, [r3]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ba0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bae:	ee37 7a67 	vsub.f32	s14, s14, s15
                      + (controller->kd * controller->prev_error_two);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8000bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc6:	edc7 7a07 	vstr	s15, [r7, #28]

        controller->u += delta_u;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    if (controller->u > controller->u_max) {controller->u = controller->u_max;}
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	ed93 7a03 	vldr	s14, [r3, #12]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf2:	dd04      	ble.n	8000bfe <PIDCompute+0x142>
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	e00e      	b.n	8000c1c <PIDCompute+0x160>
    else if (controller->u < controller->u_min) {controller->u = controller->u_min;}
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c12:	d503      	bpl.n	8000c1c <PIDCompute+0x160>
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	60da      	str	r2, [r3, #12]

    // Shift error history
    controller->prev_error_two = controller->prev_error_one;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	61da      	str	r2, [r3, #28]
    controller->prev_error_one = error;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	619a      	str	r2, [r3, #24]

    return controller->u;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	ee07 3a90 	vmov	s15, r3
}
 8000c32:	eeb0 0a67 	vmov.f32	s0, s15
 8000c36:	3724      	adds	r7, #36	@ 0x24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6178      	str	r0, [r7, #20]
 8000c48:	6139      	str	r1, [r7, #16]
 8000c4a:	60fa      	str	r2, [r7, #12]
 8000c4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c50:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
	qei->old_val = 0;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->pulses = 0;
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 8000c94:	213c      	movs	r1, #60	@ 0x3c
 8000c96:	6938      	ldr	r0, [r7, #16]
 8000c98:	f002 fba2 	bl	80033e0 <HAL_TIM_Encoder_Start>

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	0000      	movs	r0, r0
	...

08000ca8 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	1ad2      	subs	r2, r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	61da      	str	r2, [r3, #28]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69da      	ldr	r2, [r3, #28]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0fd9      	lsrs	r1, r3, #31
 8000cd6:	440b      	add	r3, r1
 8000cd8:	105b      	asrs	r3, r3, #1
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dd07      	ble.n	8000cee <QEIPosVelUpdate+0x46>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69da      	ldr	r2, [r3, #28]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	1ad2      	subs	r2, r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	61da      	str	r2, [r3, #28]
 8000cec:	e010      	b.n	8000d10 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69da      	ldr	r2, [r3, #28]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	0fd9      	lsrs	r1, r3, #31
 8000cf8:	440b      	add	r3, r1
 8000cfa:	105b      	asrs	r3, r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	da06      	bge.n	8000d10 <QEIPosVelUpdate+0x68>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	441a      	add	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	61da      	str	r2, [r3, #28]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	441a      	add	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d4a:	ee17 0a90 	vmov	r0, s15
 8000d4e:	f7ff fbc7 	bl	80004e0 <__aeabi_f2d>
 8000d52:	a323      	add	r3, pc, #140	@ (adr r3, 8000de0 <QEIPosVelUpdate+0x138>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fc1a 	bl	8000590 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fe46 	bl	80009f4 <__aeabi_d2f>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	619a      	str	r2, [r3, #24]


 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d88:	ee17 0a90 	vmov	r0, s15
 8000d8c:	f7ff fba8 	bl	80004e0 <__aeabi_f2d>
 8000d90:	a313      	add	r3, pc, #76	@ (adr r3, 8000de0 <QEIPosVelUpdate+0x138>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f7ff fbfb 	bl	8000590 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4614      	mov	r4, r2
 8000da0:	461d      	mov	r5, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb88 	bl	80004bc <__aeabi_i2d>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4620      	mov	r0, r4
 8000db2:	4629      	mov	r1, r5
 8000db4:	f7ff fd16 	bl	80007e4 <__aeabi_ddiv>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff fe18 	bl	80009f4 <__aeabi_d2f>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	621a      	str	r2, [r3, #32]

 	// Update value
 	qei -> old_val = qei -> new_val;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	f3af 8000 	nop.w
 8000de0:	54442d18 	.word	0x54442d18
 8000de4:	400921fb 	.word	0x400921fb

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 feb4 	bl	8001b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f86f 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 fa73 	bl	80012e0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000dfa:	f000 f9cd 	bl	8001198 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dfe:	f000 fa21 	bl	8001244 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000e02:	f000 f8b3 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e06:	f000 f979 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


//	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <main+0xac>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	4921      	ldr	r1, [pc, #132]	@ (8000e98 <main+0xb0>)
 8000e14:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <main+0xb4>)
 8000e16:	f000 fbc1 	bl	800159c <MotorInit>

	QEIInit(&revolute_encoder, &htim4, 8192, 1000, 65536);
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8000ea0 <main+0xb8>
 8000e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e26:	491f      	ldr	r1, [pc, #124]	@ (8000ea4 <main+0xbc>)
 8000e28:	481f      	ldr	r0, [pc, #124]	@ (8000ea8 <main+0xc0>)
 8000e2a:	f7ff ff09 	bl	8000c40 <QEIInit>

	PIDInit(&revolute_pos_control, 11, -11);
 8000e2e:	eefa 0a06 	vmov.f32	s1, #166	@ 0xc1300000 -11.0
 8000e32:	eeb2 0a06 	vmov.f32	s0, #38	@ 0x41300000  11.0
 8000e36:	481d      	ldr	r0, [pc, #116]	@ (8000eac <main+0xc4>)
 8000e38:	f7ff fe2c 	bl	8000a94 <PIDInit>
	PIDInit(&revolute_vel_control, 65535, -65535);
 8000e3c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8000eb0 <main+0xc8>
 8000e40:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8000eb4 <main+0xcc>
 8000e44:	481c      	ldr	r0, [pc, #112]	@ (8000eb8 <main+0xd0>)
 8000e46:	f7ff fe25 	bl	8000a94 <PIDInit>

	PID_POS.Kp =Kp_pos;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <main+0xd4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <main+0xd8>)
 8000e50:	6193      	str	r3, [r2, #24]
	PID_POS.Ki =Ki_pos;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <main+0xdc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec0 <main+0xd8>)
 8000e58:	61d3      	str	r3, [r2, #28]
	PID_POS.Kd = Kd_pos;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <main+0xe0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <main+0xd8>)
 8000e60:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	4816      	ldr	r0, [pc, #88]	@ (8000ec0 <main+0xd8>)
 8000e66:	f003 fcfb 	bl	8004860 <arm_pid_init_f32>

	HAL_TIM_Base_Start_IT(&htim5);
 8000e6a:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <main+0xe4>)
 8000e6c:	f002 f826 	bl	8002ebc <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 8000e70:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <main+0xe8>)
 8000e72:	f002 f823 	bl	8002ebc <HAL_TIM_Base_Start_IT>
//
	    // sin Wave
//		target_velocity = 200*sin(2*M_PI*5*(HAL_GetTick()/10e3));


		PID_POS.Kp =Kp_pos;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <main+0xd4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a11      	ldr	r2, [pc, #68]	@ (8000ec0 <main+0xd8>)
 8000e7c:	6193      	str	r3, [r2, #24]
		PID_POS.Ki =Ki_pos;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <main+0xdc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <main+0xd8>)
 8000e84:	61d3      	str	r3, [r2, #28]
		PID_POS.Kd = Kd_pos;
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <main+0xe0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <main+0xd8>)
 8000e8c:	6213      	str	r3, [r2, #32]
		PID_POS.Kp =Kp_pos;
 8000e8e:	bf00      	nop
 8000e90:	e7f1      	b.n	8000e76 <main+0x8e>
 8000e92:	bf00      	nop
 8000e94:	48000800 	.word	0x48000800
 8000e98:	20000038 	.word	0x20000038
 8000e9c:	20000168 	.word	0x20000168
 8000ea0:	447a0000 	.word	0x447a0000
 8000ea4:	200000d0 	.word	0x200000d0
 8000ea8:	200001c4 	.word	0x200001c4
 8000eac:	200001f0 	.word	0x200001f0
 8000eb0:	c77fff00 	.word	0xc77fff00
 8000eb4:	477fff00 	.word	0x477fff00
 8000eb8:	20000210 	.word	0x20000210
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	200001a0 	.word	0x200001a0
 8000ec4:	20000190 	.word	0x20000190
 8000ec8:	20000194 	.word	0x20000194
 8000ecc:	2000011c 	.word	0x2000011c
 8000ed0:	20000084 	.word	0x20000084

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	@ 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	2238      	movs	r2, #56	@ 0x38
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fcf2 	bl	80048cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f001 f96e 	bl	80021d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f06:	2340      	movs	r3, #64	@ 0x40
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f16:	2355      	movs	r3, #85	@ 0x55
 8000f18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0318 	add.w	r3, r7, #24
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fa08 	bl	8002340 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f36:	f000 fb2b 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2104      	movs	r1, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fd06 	bl	8002964 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f5e:	f000 fb17 	bl	8001590 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	@ 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09c      	sub	sp, #112	@ 0x70
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2234      	movs	r2, #52	@ 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fc90 	bl	80048cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fac:	4b51      	ldr	r3, [pc, #324]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fae:	4a52      	ldr	r2, [pc, #328]	@ (80010f8 <MX_TIM1_Init+0x18c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000fb2:	4b50      	ldr	r3, [pc, #320]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fb4:	22a9      	movs	r2, #169	@ 0xa9
 8000fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fc0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000fc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fcc:	4b49      	ldr	r3, [pc, #292]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd2:	4b48      	ldr	r3, [pc, #288]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd8:	4846      	ldr	r0, [pc, #280]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000fda:	f001 fea7 	bl	8002d2c <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f000 fad4 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	483f      	ldr	r0, [pc, #252]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8000ff6:	f002 fce5 	bl	80039c4 <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001000:	f000 fac6 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001004:	483b      	ldr	r0, [pc, #236]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8001006:	f001 ffd1 	bl	8002fac <HAL_TIM_PWM_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001010:	f000 fabe 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001024:	4619      	mov	r1, r3
 8001026:	4833      	ldr	r0, [pc, #204]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8001028:	f003 faaa 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001032:	f000 faad 	bl	8001590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001036:	2360      	movs	r3, #96	@ 0x60
 8001038:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001052:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4826      	ldr	r0, [pc, #152]	@ (80010f4 <MX_TIM1_Init+0x188>)
 800105c:	f002 fb9e 	bl	800379c <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001066:	f000 fa93 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800106a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800106e:	2204      	movs	r2, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4820      	ldr	r0, [pc, #128]	@ (80010f4 <MX_TIM1_Init+0x188>)
 8001074:	f002 fb92 	bl	800379c <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800107e:	f000 fa87 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001082:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001086:	2208      	movs	r2, #8
 8001088:	4619      	mov	r1, r3
 800108a:	481a      	ldr	r0, [pc, #104]	@ (80010f4 <MX_TIM1_Init+0x188>)
 800108c:	f002 fb86 	bl	800379c <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001096:	f000 fa7b 	bl	8001590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <MX_TIM1_Init+0x188>)
 80010d8:	f003 fae8 	bl	80046ac <HAL_TIMEx_ConfigBreakDeadTime>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80010e2:	f000 fa55 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e6:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <MX_TIM1_Init+0x188>)
 80010e8:	f000 fc6e 	bl	80019c8 <HAL_TIM_MspPostInit>

}
 80010ec:	bf00      	nop
 80010ee:	3770      	adds	r7, #112	@ 0x70
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000038 	.word	0x20000038
 80010f8:	40012c00 	.word	0x40012c00

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_TIM2_Init+0x98>)
 800111c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001124:	22a9      	movs	r2, #169	@ 0xa9
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM2_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001130:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001134:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_TIM2_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001144:	f001 fdf2 	bl	8002d2c <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800114e:	f000 fa1f 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_TIM2_Init+0x98>)
 8001160:	f002 fc30 	bl	80039c4 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800116a:	f000 fa11 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	@ (8001194 <MX_TIM2_Init+0x98>)
 800117c:	f003 fa00 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001186:	f000 fa03 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000084 	.word	0x20000084

08001198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2224      	movs	r2, #36	@ 0x24
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fb90 	bl	80048cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_TIM4_Init+0xa4>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <MX_TIM4_Init+0xa8>)
 80011ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <MX_TIM4_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_TIM4_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_TIM4_Init+0xa4>)
 80011ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_TIM4_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_TIM4_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011dc:	2303      	movs	r3, #3
 80011de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	@ (800123c <MX_TIM4_Init+0xa4>)
 8001208:	f002 f844 	bl	8003294 <HAL_TIM_Encoder_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001212:	f000 f9bd 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <MX_TIM4_Init+0xa4>)
 8001224:	f003 f9ac 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800122e:	f000 f9af 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	@ 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000d0 	.word	0x200000d0
 8001240:	40000800 	.word	0x40000800

08001244 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_TIM5_Init+0x94>)
 8001264:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <MX_TIM5_Init+0x98>)
 8001266:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_TIM5_Init+0x94>)
 800126a:	22a9      	movs	r2, #169	@ 0xa9
 800126c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_TIM5_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_TIM5_Init+0x94>)
 8001276:	f04f 32ff 	mov.w	r2, #4294967295
 800127a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_TIM5_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM5_Init+0x94>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001288:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <MX_TIM5_Init+0x94>)
 800128a:	f001 fd4f 	bl	8002d2c <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001294:	f000 f97c 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_TIM5_Init+0x94>)
 80012a6:	f002 fb8d 	bl	80039c4 <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80012b0:	f000 f96e 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_TIM5_Init+0x94>)
 80012c2:	f003 f95d 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80012cc:	f000 f960 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000011c 	.word	0x2000011c
 80012dc:	40000c00 	.word	0x40000c00

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b41      	ldr	r3, [pc, #260]	@ (80013fc <MX_GPIO_Init+0x11c>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a40      	ldr	r2, [pc, #256]	@ (80013fc <MX_GPIO_Init+0x11c>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130e:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a3a      	ldr	r2, [pc, #232]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <MX_GPIO_Init+0x11c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a34      	ldr	r2, [pc, #208]	@ (80013fc <MX_GPIO_Init+0x11c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a2e      	ldr	r2, [pc, #184]	@ (80013fc <MX_GPIO_Init+0x11c>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <MX_GPIO_Init+0x11c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2120      	movs	r1, #32
 800135a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135e:	f000 feff 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	21c0      	movs	r1, #192	@ 0xc0
 8001366:	4826      	ldr	r0, [pc, #152]	@ (8001400 <MX_GPIO_Init+0x120>)
 8001368:	f000 fefa 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800136c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001372:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	481f      	ldr	r0, [pc, #124]	@ (8001400 <MX_GPIO_Init+0x120>)
 8001384:	f000 fd6a 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001388:	230c      	movs	r3, #12
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001398:	230c      	movs	r3, #12
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a6:	f000 fd59 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013aa:	2320      	movs	r3, #32
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c4:	f000 fd4a 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c8:	23c0      	movs	r3, #192	@ 0xc0
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <MX_GPIO_Init+0x120>)
 80013e0:	f000 fd3c 	bl	8001e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2028      	movs	r0, #40	@ 0x28
 80013ea:	f000 fd02 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ee:	2028      	movs	r0, #40	@ 0x28
 80013f0:	f000 fd19 	bl	8001e26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	@ 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800

08001404 <Prismatic_CasCadeControl>:

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0

	error_pos = target_position - revolute_encoder.rads;
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <Prismatic_CasCadeControl+0x124>)
 800140c:	ed93 7a00 	vldr	s14, [r3]
 8001410:	4b46      	ldr	r3, [pc, #280]	@ (800152c <Prismatic_CasCadeControl+0x128>)
 8001412:	edd3 7a06 	vldr	s15, [r3, #24]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	4b45      	ldr	r3, [pc, #276]	@ (8001530 <Prismatic_CasCadeControl+0x12c>)
 800141c:	edc3 7a00 	vstr	s15, [r3]

	output_pos = arm_pid_f32(&PID_POS, error_pos);
 8001420:	4b43      	ldr	r3, [pc, #268]	@ (8001530 <Prismatic_CasCadeControl+0x12c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a43      	ldr	r2, [pc, #268]	@ (8001534 <Prismatic_CasCadeControl+0x130>)
 8001426:	60fa      	str	r2, [r7, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	edd7 7a02 	vldr	s15, [r7, #8]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	edd3 6a01 	vldr	s13, [r3, #4]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	edd3 7a03 	vldr	s15, [r3, #12]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001448:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 7a04 	vldr	s15, [r3, #16]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146a:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a2c      	ldr	r2, [pc, #176]	@ (8001538 <Prismatic_CasCadeControl+0x134>)
 8001486:	6013      	str	r3, [r2, #0]

	if (output_pos > 10) {output_pos = 10;}
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <Prismatic_CasCadeControl+0x134>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	dd03      	ble.n	80014a4 <Prismatic_CasCadeControl+0xa0>
 800149c:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <Prismatic_CasCadeControl+0x134>)
 800149e:	4a27      	ldr	r2, [pc, #156]	@ (800153c <Prismatic_CasCadeControl+0x138>)
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e00c      	b.n	80014be <Prismatic_CasCadeControl+0xba>
	else if (output_pos < -10) {output_pos = -10;}
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <Prismatic_CasCadeControl+0x134>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d502      	bpl.n	80014be <Prismatic_CasCadeControl+0xba>
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <Prismatic_CasCadeControl+0x134>)
 80014ba:	4a21      	ldr	r2, [pc, #132]	@ (8001540 <Prismatic_CasCadeControl+0x13c>)
 80014bc:	601a      	str	r2, [r3, #0]

	error_velo = output_pos - revolute_encoder.radps;
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <Prismatic_CasCadeControl+0x134>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <Prismatic_CasCadeControl+0x128>)
 80014c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80014ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <Prismatic_CasCadeControl+0x140>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]

	output_velo = PIDCompute(&revolute_vel_control, Kp_velo, Ki_velo, Kd_velo, error_velo);
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <Prismatic_CasCadeControl+0x144>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <Prismatic_CasCadeControl+0x148>)
 80014dc:	ed93 7a00 	vldr	s14, [r3]
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <Prismatic_CasCadeControl+0x14c>)
 80014e2:	edd3 6a00 	vldr	s13, [r3]
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <Prismatic_CasCadeControl+0x140>)
 80014e8:	ed93 6a00 	vldr	s12, [r3]
 80014ec:	eef0 1a46 	vmov.f32	s3, s12
 80014f0:	eeb0 1a66 	vmov.f32	s2, s13
 80014f4:	eef0 0a47 	vmov.f32	s1, s14
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	4815      	ldr	r0, [pc, #84]	@ (8001554 <Prismatic_CasCadeControl+0x150>)
 80014fe:	f7ff fadd 	bl	8000abc <PIDCompute>
 8001502:	eef0 7a40 	vmov.f32	s15, s0
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <Prismatic_CasCadeControl+0x154>)
 8001508:	edc3 7a00 	vstr	s15, [r3]

	// Motor control
	MotorSet(&revolute_motor, 1000, output_velo);
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <Prismatic_CasCadeControl+0x154>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eef0 0a67 	vmov.f32	s1, s15
 8001516:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800155c <Prismatic_CasCadeControl+0x158>
 800151a:	4811      	ldr	r0, [pc, #68]	@ (8001560 <Prismatic_CasCadeControl+0x15c>)
 800151c:	f000 f868 	bl	80015f0 <MotorSet>
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	200001c4 	.word	0x200001c4
 8001530:	2000019c 	.word	0x2000019c
 8001534:	200001a0 	.word	0x200001a0
 8001538:	20000198 	.word	0x20000198
 800153c:	41200000 	.word	0x41200000
 8001540:	c1200000 	.word	0xc1200000
 8001544:	2000018c 	.word	0x2000018c
 8001548:	20000004 	.word	0x20000004
 800154c:	20000008 	.word	0x20000008
 8001550:	20000184 	.word	0x20000184
 8001554:	20000210 	.word	0x20000210
 8001558:	20000188 	.word	0x20000188
 800155c:	447a0000 	.word	0x447a0000
 8001560:	20000168 	.word	0x20000168

08001564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d104      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x1a>
		Prismatic_CasCadeControl();
 8001574:	f7ff ff46 	bl	8001404 <Prismatic_CasCadeControl>
		QEIPosVelUpdate(&revolute_encoder);
 8001578:	4804      	ldr	r0, [pc, #16]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800157a:	f7ff fb95 	bl	8000ca8 <QEIPosVelUpdate>
	}

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000084 	.word	0x20000084
 800158c:	200001c4 	.word	0x200001c4

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <Error_Handler+0x8>

0800159c <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <MotorInit+0x4c>)
 80015b6:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8b3a      	ldrh	r2, [r7, #24]
 80015ce:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f001 fc03 	bl	8002ddc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	4619      	mov	r1, r3
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f001 fd48 	bl	8003070 <HAL_TIM_PWM_Start>
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	0a21fe80 	.word	0x0a21fe80
 80015ec:	00000000 	.word	0x00000000

080015f0 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015fc:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8001600:	edd7 7a02 	vldr	s15, [r7, #8]
 8001604:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d137      	bne.n	800167e <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <MotorSet+0x32>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8001620:	e104      	b.n	800182c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	895b      	ldrh	r3, [r3, #10]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d105      	bne.n	8001636 <MotorSet+0x46>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	6393      	str	r3, [r2, #56]	@ 0x38
 8001634:	e0fa      	b.n	800182c <MotorSet+0x23c>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	895b      	ldrh	r3, [r3, #10]
 800163a:	2b08      	cmp	r3, #8
 800163c:	d105      	bne.n	800164a <MotorSet+0x5a>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001648:	e0f0      	b.n	800182c <MotorSet+0x23c>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	895b      	ldrh	r3, [r3, #10]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d105      	bne.n	800165e <MotorSet+0x6e>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	e0e6      	b.n	800182c <MotorSet+0x23c>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	895b      	ldrh	r3, [r3, #10]
 8001662:	2b10      	cmp	r3, #16
 8001664:	d105      	bne.n	8001672 <MotorSet+0x82>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001670:	e0dc      	b.n	800182c <MotorSet+0x23c>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800167c:	e0d6      	b.n	800182c <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800168a:	ed97 7a02 	vldr	s14, [r7, #8]
 800168e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001696:	ee17 2a90 	vmov	r2, s15
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80016a6:	33fe      	adds	r3, #254	@ 0xfe
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fef7 	bl	800049c <__aeabi_ui2d>
 80016ae:	a362      	add	r3, pc, #392	@ (adr r3, 8001838 <MotorSet+0x248>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff f896 	bl	80007e4 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff f978 	bl	80009b4 <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8a1b      	ldrh	r3, [r3, #16]
 80016e0:	3301      	adds	r3, #1
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80016f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	ee17 3a90 	vmov	r3, s15
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8a5b      	ldrh	r3, [r3, #18]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fed3 	bl	80004bc <__aeabi_i2d>
 8001716:	4604      	mov	r4, r0
 8001718:	460d      	mov	r5, r1
 800171a:	edd7 7a01 	vldr	s15, [r7, #4]
 800171e:	eef0 7ae7 	vabs.f32	s15, s15
 8001722:	ee17 0a90 	vmov	r0, s15
 8001726:	f7fe fedb 	bl	80004e0 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe ff2d 	bl	8000590 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001838 <MotorSet+0x248>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f84e 	bl	80007e4 <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f930 	bl	80009b4 <__aeabi_d2uiz>
 8001754:	4603      	mov	r3, r0
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 800175e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	db08      	blt.n	800177e <MotorSet+0x18e>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6858      	ldr	r0, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	891b      	ldrh	r3, [r3, #8]
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	f000 fcf2 	bl	8002160 <HAL_GPIO_WritePin>
 800177c:	e007      	b.n	800178e <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6858      	ldr	r0, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	891b      	ldrh	r3, [r3, #8]
 8001786:	2201      	movs	r2, #1
 8001788:	4619      	mov	r1, r3
 800178a:	f000 fce9 	bl	8002160 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8a1a      	ldrh	r2, [r3, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8a5a      	ldrh	r2, [r3, #18]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8a5a      	ldrh	r2, [r3, #18]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	895b      	ldrh	r3, [r3, #10]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d106      	bne.n	80017c6 <MotorSet+0x1d6>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	6992      	ldr	r2, [r2, #24]
 80017c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017c4:	e032      	b.n	800182c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	895b      	ldrh	r3, [r3, #10]
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d106      	bne.n	80017dc <MotorSet+0x1ec>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017da:	e027      	b.n	800182c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	895b      	ldrh	r3, [r3, #10]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d106      	bne.n	80017f2 <MotorSet+0x202>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80017f0:	e01c      	b.n	800182c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	895b      	ldrh	r3, [r3, #10]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d106      	bne.n	8001808 <MotorSet+0x218>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001806:	e011      	b.n	800182c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	895b      	ldrh	r3, [r3, #10]
 800180c:	2b10      	cmp	r3, #16
 800180e:	d106      	bne.n	800181e <MotorSet+0x22e>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800181c:	e006      	b.n	800182c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800182a:	e7ff      	b.n	800182c <MotorSet+0x23c>
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	f3af 8000 	nop.w
 8001838:	00000000 	.word	0x00000000
 800183c:	40efffe0 	.word	0x40efffe0

08001840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_MspInit+0x44>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	4a0e      	ldr	r2, [pc, #56]	@ (8001884 <HAL_MspInit+0x44>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6613      	str	r3, [r2, #96]	@ 0x60
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <HAL_MspInit+0x44>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_MspInit+0x44>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <HAL_MspInit+0x44>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	6593      	str	r3, [r2, #88]	@ 0x58
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_MspInit+0x44>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001876:	f000 fd53 	bl	8002320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <HAL_TIM_Base_MspInit+0x9c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10c      	bne.n	80018b4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189e:	4a22      	ldr	r2, [pc, #136]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a6:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018b2:	e032      	b.n	800191a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018bc:	d114      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201c      	movs	r0, #28
 80018dc:	f000 fa89 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e0:	201c      	movs	r0, #28
 80018e2:	f000 faa0 	bl	8001e26 <HAL_NVIC_EnableIRQ>
}
 80018e6:	e018      	b.n	800191a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <HAL_TIM_Base_MspInit+0xa4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d113      	bne.n	800191a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_TIM_Base_MspInit+0xa0>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2032      	movs	r0, #50	@ 0x32
 8001910:	f000 fa6f 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001914:	2032      	movs	r0, #50	@ 0x32
 8001916:	f000 fa86 	bl	8001e26 <HAL_NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40000c00 	.word	0x40000c00

08001930 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x8c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12f      	bne.n	80019b2 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001952:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001956:	4a1a      	ldr	r2, [pc, #104]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x90>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001982:	23c0      	movs	r3, #192	@ 0xc0
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001992:	2302      	movs	r3, #2
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4809      	ldr	r0, [pc, #36]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x94>)
 800199e:	f000 fa5d 	bl	8001e5c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201e      	movs	r0, #30
 80019a8:	f000 fa23 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ac:	201e      	movs	r0, #30
 80019ae:	f000 fa3a 	bl	8001e26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	@ 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40000800 	.word	0x40000800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400

080019c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <HAL_TIM_MspPostInit+0x68>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d11d      	bne.n	8001a26 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_TIM_MspPostInit+0x6c>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a11      	ldr	r2, [pc, #68]	@ (8001a34 <HAL_TIM_MspPostInit+0x6c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_TIM_MspPostInit+0x6c>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a02:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a14:	2306      	movs	r3, #6
 8001a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a22:	f000 fa1b 	bl	8001e5c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 f8b7 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <TIM2_IRQHandler+0x10>)
 8001a9e:	f001 fd2d 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000084 	.word	0x20000084

08001aac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <TIM4_IRQHandler+0x10>)
 8001ab2:	f001 fd23 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000d0 	.word	0x200000d0

08001ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ac4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ac8:	f000 fb62 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <TIM5_IRQHandler+0x10>)
 8001ad6:	f001 fd11 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000011c 	.word	0x2000011c

08001ae4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0c:	f7ff ffea 	bl	8001ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopForever+0xe>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopForever+0x16>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f002 fed1 	bl	80048dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3a:	f7ff f955 	bl	8000de8 <main>

08001b3e <LoopForever>:

LoopForever:
    b LoopForever
 8001b3e:	e7fe      	b.n	8001b3e <LoopForever>
  ldr   r0, =_estack
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001b4c:	08004954 	.word	0x08004954
  ldr r2, =_sbss
 8001b50:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001b54:	20000234 	.word	0x20000234

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>

08001b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f939 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f80e 	bl	8001b8c <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e001      	b.n	8001b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7c:	f7ff fe60 	bl	8001840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b80:	79fb      	ldrb	r3, [r7, #7]

}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d022      	beq.n	8001be6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_InitTick+0x6c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_InitTick+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f944 	bl	8001e42 <HAL_SYSTICK_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d809      	bhi.n	8001bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	f000 f910 	bl	8001df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_InitTick+0x70>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e004      	b.n	8001bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000018 	.word	0x20000018
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	20000014 	.word	0x20000014

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a03      	ldr	r2, [pc, #12]	@ (8001c1c <HAL_IncTick+0x1c>)
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000230 	.word	0x20000230
 8001c20:	20000018 	.word	0x20000018

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000230 	.word	0x20000230

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff40 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff90 	bl	8001d30 <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5f 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff33 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa4 	bl	8001d98 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e6a:	e15a      	b.n	8002122 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 814c 	beq.w	800211c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d005      	beq.n	8001e9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d017      	beq.n	8001f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d123      	bne.n	8001f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe8:	4a56      	ldr	r2, [pc, #344]	@ (8002144 <HAL_GPIO_Init+0x2e8>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002012:	d01f      	beq.n	8002054 <HAL_GPIO_Init+0x1f8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4c      	ldr	r2, [pc, #304]	@ (8002148 <HAL_GPIO_Init+0x2ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d019      	beq.n	8002050 <HAL_GPIO_Init+0x1f4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a4b      	ldr	r2, [pc, #300]	@ (800214c <HAL_GPIO_Init+0x2f0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_GPIO_Init+0x1f0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a4a      	ldr	r2, [pc, #296]	@ (8002150 <HAL_GPIO_Init+0x2f4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1ec>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a49      	ldr	r2, [pc, #292]	@ (8002154 <HAL_GPIO_Init+0x2f8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1e8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a48      	ldr	r2, [pc, #288]	@ (8002158 <HAL_GPIO_Init+0x2fc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1e4>
 800203c:	2305      	movs	r3, #5
 800203e:	e00a      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002040:	2306      	movs	r3, #6
 8002042:	e008      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002044:	2304      	movs	r3, #4
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002048:	2303      	movs	r3, #3
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002054:	2300      	movs	r3, #0
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002066:	4937      	ldr	r1, [pc, #220]	@ (8002144 <HAL_GPIO_Init+0x2e8>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002074:	4b39      	ldr	r3, [pc, #228]	@ (800215c <HAL_GPIO_Init+0x300>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002098:	4a30      	ldr	r2, [pc, #192]	@ (800215c <HAL_GPIO_Init+0x300>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800209e:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <HAL_GPIO_Init+0x300>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c2:	4a26      	ldr	r2, [pc, #152]	@ (800215c <HAL_GPIO_Init+0x300>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020c8:	4b24      	ldr	r3, [pc, #144]	@ (800215c <HAL_GPIO_Init+0x300>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ec:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <HAL_GPIO_Init+0x300>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_GPIO_Init+0x300>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002116:	4a11      	ldr	r2, [pc, #68]	@ (800215c <HAL_GPIO_Init+0x300>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f ae9d 	bne.w	8001e6c <HAL_GPIO_Init+0x10>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	48000400 	.word	0x48000400
 800214c:	48000800 	.word	0x48000800
 8002150:	48000c00 	.word	0x48000c00
 8002154:	48001000 	.word	0x48001000
 8002158:	48001400 	.word	0x48001400
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800217c:	e002      	b.n	8002184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f806 	bl	80021c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d141      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f2:	d131      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f4:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021fa:	4a46      	ldr	r2, [pc, #280]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800220c:	4a41      	ldr	r2, [pc, #260]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002214:	4b40      	ldr	r3, [pc, #256]	@ (8002318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2232      	movs	r2, #50	@ 0x32
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a3f      	ldr	r2, [pc, #252]	@ (800231c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	3301      	adds	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222a:	e002      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3b01      	subs	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002232:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223e:	d102      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f2      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002246:	4b33      	ldr	r3, [pc, #204]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d158      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e057      	b.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002258:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800225e:	4a2d      	ldr	r2, [pc, #180]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002264:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002268:	e04d      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002270:	d141      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002272:	4b28      	ldr	r3, [pc, #160]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d131      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002280:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002286:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002290:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002298:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800229e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2232      	movs	r2, #50	@ 0x32
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b6:	e002      	b.n	80022be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ca:	d102      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f2      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d112      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e011      	b.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022f4:	e007      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f6:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022fe:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002300:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40007000 	.word	0x40007000
 8002318:	20000010 	.word	0x20000010
 800231c:	431bde83 	.word	0x431bde83

08002320 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a04      	ldr	r2, [pc, #16]	@ (800233c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800232a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232e:	6093      	str	r3, [r2, #8]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e2fe      	b.n	8002950 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d075      	beq.n	800244a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b97      	ldr	r3, [pc, #604]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b94      	ldr	r3, [pc, #592]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x3e>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d002      	beq.n	8002384 <HAL_RCC_OscConfig+0x44>
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	4b8d      	ldr	r3, [pc, #564]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05b      	beq.n	8002448 <HAL_RCC_OscConfig+0x108>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d157      	bne.n	8002448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e2d9      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x74>
 80023a6:	4b85      	ldr	r3, [pc, #532]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a84      	ldr	r2, [pc, #528]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b7f      	ldr	r3, [pc, #508]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7e      	ldr	r2, [pc, #504]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b7c      	ldr	r3, [pc, #496]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7b      	ldr	r2, [pc, #492]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023d8:	4b78      	ldr	r3, [pc, #480]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a77      	ldr	r2, [pc, #476]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b75      	ldr	r3, [pc, #468]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a74      	ldr	r2, [pc, #464]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff fc14 	bl	8001c24 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fc10 	bl	8001c24 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	@ 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e29e      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002412:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xc0>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fc00 	bl	8001c24 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fbfc 	bl	8001c24 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e28a      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800243a:	4b60      	ldr	r3, [pc, #384]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0xe8>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b59      	ldr	r3, [pc, #356]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b56      	ldr	r3, [pc, #344]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0x136>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d002      	beq.n	800247c <HAL_RCC_OscConfig+0x13c>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d11f      	bne.n	80024bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	4b4f      	ldr	r3, [pc, #316]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_OscConfig+0x154>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e25d      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	4946      	ldr	r1, [pc, #280]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a8:	4b45      	ldr	r3, [pc, #276]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fb6d 	bl	8001b8c <HAL_InitTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d043      	beq.n	8002540 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e249      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d023      	beq.n	800250c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3c      	ldr	r2, [pc, #240]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fba8 	bl	8001c24 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7ff fba4 	bl	8001c24 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e232      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ea:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	492d      	ldr	r1, [pc, #180]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
 800250a:	e01a      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250c:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2a      	ldr	r2, [pc, #168]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7ff fb84 	bl	8001c24 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7ff fb80 	bl	8001c24 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e20e      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002532:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e0>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d041      	beq.n	80025d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01c      	beq.n	8002590 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255c:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff fb5d 	bl	8001c24 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff fb59 	bl	8001c24 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1e7      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002580:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ef      	beq.n	800256e <HAL_RCC_OscConfig+0x22e>
 800258e:	e020      	b.n	80025d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7ff fb40 	bl	8001c24 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a6:	e00d      	b.n	80025c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff fb3c 	bl	8001c24 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d906      	bls.n	80025c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1ca      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c4:	4b8c      	ldr	r3, [pc, #560]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ea      	bne.n	80025a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80a6 	beq.w	800272c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025e4:	4b84      	ldr	r3, [pc, #528]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2b4>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x2b6>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b7f      	ldr	r3, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	4a7e      	ldr	r2, [pc, #504]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6593      	str	r3, [r2, #88]	@ 0x58
 8002606:	4b7c      	ldr	r3, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002616:	4b79      	ldr	r3, [pc, #484]	@ (80027fc <HAL_RCC_OscConfig+0x4bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002622:	4b76      	ldr	r3, [pc, #472]	@ (80027fc <HAL_RCC_OscConfig+0x4bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a75      	ldr	r2, [pc, #468]	@ (80027fc <HAL_RCC_OscConfig+0x4bc>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7ff faf9 	bl	8001c24 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7ff faf5 	bl	8001c24 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e183      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002648:	4b6c      	ldr	r3, [pc, #432]	@ (80027fc <HAL_RCC_OscConfig+0x4bc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d108      	bne.n	800266e <HAL_RCC_OscConfig+0x32e>
 800265c:	4b66      	ldr	r3, [pc, #408]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002662:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800266c:	e024      	b.n	80026b8 <HAL_RCC_OscConfig+0x378>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d110      	bne.n	8002698 <HAL_RCC_OscConfig+0x358>
 8002676:	4b60      	ldr	r3, [pc, #384]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267c:	4a5e      	ldr	r2, [pc, #376]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002686:	4b5c      	ldr	r3, [pc, #368]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268c:	4a5a      	ldr	r2, [pc, #360]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x378>
 8002698:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a8:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff fab0 	bl	8001c24 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7ff faac 	bl	8001c24 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e138      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	4b46      	ldr	r3, [pc, #280]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ed      	beq.n	80026c8 <HAL_RCC_OscConfig+0x388>
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7ff fa99 	bl	8001c24 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7ff fa95 	bl	8001c24 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e121      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270c:	4b3a      	ldr	r3, [pc, #232]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ed      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b35      	ldr	r3, [pc, #212]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	4a34      	ldr	r2, [pc, #208]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d03c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002746:	4a2c      	ldr	r2, [pc, #176]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff fa68 	bl	8001c24 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002758:	f7ff fa64 	bl	8001c24 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0f2      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800276a:	4b23      	ldr	r3, [pc, #140]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800276c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCC_OscConfig+0x418>
 8002778:	e01b      	b.n	80027b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800277a:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 800277c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002780:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff fa4b 	bl	8001c24 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002792:	f7ff fa47 	bl	8001c24 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0d5      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80c9 	beq.w	800294e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027bc:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	f000 8083 	beq.w	80028d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d15e      	bne.n	8002890 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <HAL_RCC_OscConfig+0x4b8>)
 80027d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7ff fa21 	bl	8001c24 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	e00c      	b.n	8002800 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff fa1d 	bl	8001c24 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d905      	bls.n	8002800 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0ab      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	4b55      	ldr	r3, [pc, #340]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ec      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280c:	4b52      	ldr	r3, [pc, #328]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4b52      	ldr	r3, [pc, #328]	@ (800295c <HAL_RCC_OscConfig+0x61c>)
 8002812:	4013      	ands	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6a11      	ldr	r1, [r2, #32]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800281c:	3a01      	subs	r2, #1
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002826:	0212      	lsls	r2, r2, #8
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0552      	lsls	r2, r2, #21
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800283a:	0852      	lsrs	r2, r2, #1
 800283c:	3a01      	subs	r2, #1
 800283e:	0652      	lsls	r2, r2, #25
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002846:	06d2      	lsls	r2, r2, #27
 8002848:	430a      	orrs	r2, r1
 800284a:	4943      	ldr	r1, [pc, #268]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a40      	ldr	r2, [pc, #256]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800285c:	4b3e      	ldr	r3, [pc, #248]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a3d      	ldr	r2, [pc, #244]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002866:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7ff f9dc 	bl	8001c24 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7ff f9d8 	bl	8001c24 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e066      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x530>
 800288e:	e05e      	b.n	800294e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a30      	ldr	r2, [pc, #192]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff f9c2 	bl	8001c24 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7ff f9be 	bl	8001c24 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e04c      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b6:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028c2:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	4924      	ldr	r1, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_OscConfig+0x620>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]
 80028ce:	e03e      	b.n	800294e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e039      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_RCC_OscConfig+0x618>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d12c      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	3b01      	subs	r3, #1
 80028fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d123      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d11b      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d113      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d109      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	019f800c 	.word	0x019f800c
 8002960:	feeefffc 	.word	0xfeeefffc

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e11e      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b91      	ldr	r3, [pc, #580]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d910      	bls.n	80029ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 020f 	bic.w	r2, r3, #15
 8002992:	498c      	ldr	r1, [pc, #560]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b8a      	ldr	r3, [pc, #552]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e106      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d073      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d129      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c0:	4b81      	ldr	r3, [pc, #516]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0f4      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029d0:	f000 f966 	bl	8002ca0 <RCC_GetSysClockFreqFromPLLSource>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4a7c      	ldr	r2, [pc, #496]	@ (8002bcc <HAL_RCC_ClockConfig+0x268>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d93f      	bls.n	8002a5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029de:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d033      	beq.n	8002a5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d12f      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029fe:	4b72      	ldr	r3, [pc, #456]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a06:	4a70      	ldr	r2, [pc, #448]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e024      	b.n	8002a5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0c6      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	4b66      	ldr	r3, [pc, #408]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0be      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a3c:	f000 f8ce 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4a61      	ldr	r2, [pc, #388]	@ (8002bcc <HAL_RCC_ClockConfig+0x268>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d909      	bls.n	8002a5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a52:	4a5d      	ldr	r2, [pc, #372]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4957      	ldr	r1, [pc, #348]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a70:	f7ff f8d8 	bl	8001c24 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7ff f8d4 	bl	8001c24 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e095      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d023      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b43      	ldr	r3, [pc, #268]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a42      	ldr	r2, [pc, #264]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002abe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ac2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ad8:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002ada:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4936      	ldr	r1, [pc, #216]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b80      	cmp	r3, #128	@ 0x80
 8002af8:	d105      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002afa:	4b33      	ldr	r3, [pc, #204]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4a32      	ldr	r2, [pc, #200]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002b00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b06:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d21d      	bcs.n	8002b50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b14:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 020f 	bic.w	r2, r3, #15
 8002b1c:	4929      	ldr	r1, [pc, #164]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b24:	f7ff f87e 	bl	8001c24 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7ff f87a 	bl	8001c24 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e03b      	b.n	8002bba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1ed      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4917      	ldr	r1, [pc, #92]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7a:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	490f      	ldr	r1, [pc, #60]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b8e:	f000 f825 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_RCC_ClockConfig+0x264>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	490c      	ldr	r1, [pc, #48]	@ (8002bd0 <HAL_RCC_ClockConfig+0x26c>)
 8002ba0:	5ccb      	ldrb	r3, [r1, r3]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ffea 	bl	8001b8c <HAL_InitTick>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	04c4b400 	.word	0x04c4b400
 8002bd0:	0800493c 	.word	0x0800493c
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	20000014 	.word	0x20000014

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002be2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d102      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bee:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	e047      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bf4:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c00:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	e03e      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c06:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d136      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3301      	adds	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d10c      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c30:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	0a12      	lsrs	r2, r2, #8
 8002c3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
      break;
 8002c48:	e00c      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c4a:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4a10      	ldr	r2, [pc, #64]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	0a12      	lsrs	r2, r2, #8
 8002c58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
      break;
 8002c62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0e5b      	lsrs	r3, r3, #25
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e001      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c84:	693b      	ldr	r3, [r7, #16]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	016e3600 	.word	0x016e3600

08002ca0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d10c      	bne.n	8002cde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc4:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	4a14      	ldr	r2, [pc, #80]	@ (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cce:	68d2      	ldr	r2, [r2, #12]
 8002cd0:	0a12      	lsrs	r2, r2, #8
 8002cd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
    break;
 8002cdc:	e00c      	b.n	8002cf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ce8:	68d2      	ldr	r2, [r2, #12]
 8002cea:	0a12      	lsrs	r2, r2, #8
 8002cec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    break;
 8002cf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0e5b      	lsrs	r3, r3, #25
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	3301      	adds	r3, #1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40021000 	.word	0x40021000
 8002d24:	016e3600 	.word	0x016e3600
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e049      	b.n	8002dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fd98 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 ff68 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04c      	b.n	8002e8e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <HAL_TIM_Base_Start+0xc0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d01d      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <HAL_TIM_Base_Start+0xc4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ea4 <HAL_TIM_Base_Start+0xc8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_TIM_Base_Start+0xcc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	@ (8002eac <HAL_TIM_Base_Start+0xd0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <HAL_TIM_Base_Start+0xd4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <HAL_TIM_Base_Start+0xd8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d115      	bne.n	8002e78 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_TIM_Base_Start+0xdc>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d015      	beq.n	8002e8a <HAL_TIM_Base_Start+0xae>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e64:	d011      	beq.n	8002e8a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e76:	e008      	b.n	8002e8a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e000      	b.n	8002e8c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40013400 	.word	0x40013400
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40015000 	.word	0x40015000
 8002eb8:	00010007 	.word	0x00010007

08002ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e054      	b.n	8002f7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	@ (8002f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d022      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efe:	d01d      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d018      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a21      	ldr	r2, [pc, #132]	@ (8002f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d013      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	@ (8002f9c <HAL_TIM_Base_Start_IT+0xe0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d115      	bne.n	8002f68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_TIM_Base_Start_IT+0xec>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d015      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0xbe>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f54:	d011      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	e008      	b.n	8002f7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40013400 	.word	0x40013400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40015000 	.word	0x40015000
 8002fa8:	00010007 	.word	0x00010007

08002fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e049      	b.n	8003052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f841 	bl	800305a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 fe28 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_TIM_PWM_Start+0x24>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e03c      	b.n	800310e <HAL_TIM_PWM_Start+0x9e>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d109      	bne.n	80030ae <HAL_TIM_PWM_Start+0x3e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e02f      	b.n	800310e <HAL_TIM_PWM_Start+0x9e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start+0x58>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e022      	b.n	800310e <HAL_TIM_PWM_Start+0x9e>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d109      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x72>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e015      	b.n	800310e <HAL_TIM_PWM_Start+0x9e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_PWM_Start+0x8c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e008      	b.n	800310e <HAL_TIM_PWM_Start+0x9e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0a6      	b.n	8003264 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start+0xb6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003124:	e023      	b.n	800316e <HAL_TIM_PWM_Start+0xfe>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d104      	bne.n	8003136 <HAL_TIM_PWM_Start+0xc6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003134:	e01b      	b.n	800316e <HAL_TIM_PWM_Start+0xfe>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start+0xd6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003144:	e013      	b.n	800316e <HAL_TIM_PWM_Start+0xfe>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start+0xe6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003154:	e00b      	b.n	800316e <HAL_TIM_PWM_Start+0xfe>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b10      	cmp	r3, #16
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Start+0xf6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003164:	e003      	b.n	800316e <HAL_TIM_PWM_Start+0xfe>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2201      	movs	r2, #1
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f001 f9dc 	bl	8004534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3a      	ldr	r2, [pc, #232]	@ (800326c <HAL_TIM_PWM_Start+0x1fc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d018      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x148>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a39      	ldr	r2, [pc, #228]	@ (8003270 <HAL_TIM_PWM_Start+0x200>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x148>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a37      	ldr	r2, [pc, #220]	@ (8003274 <HAL_TIM_PWM_Start+0x204>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x148>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a36      	ldr	r2, [pc, #216]	@ (8003278 <HAL_TIM_PWM_Start+0x208>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x148>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a34      	ldr	r2, [pc, #208]	@ (800327c <HAL_TIM_PWM_Start+0x20c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x148>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a33      	ldr	r2, [pc, #204]	@ (8003280 <HAL_TIM_PWM_Start+0x210>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_PWM_Start+0x14c>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_TIM_PWM_Start+0x14e>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a25      	ldr	r2, [pc, #148]	@ (800326c <HAL_TIM_PWM_Start+0x1fc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e4:	d01d      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a26      	ldr	r2, [pc, #152]	@ (8003284 <HAL_TIM_PWM_Start+0x214>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a24      	ldr	r2, [pc, #144]	@ (8003288 <HAL_TIM_PWM_Start+0x218>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_TIM_PWM_Start+0x21c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <HAL_TIM_PWM_Start+0x200>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_TIM_PWM_Start+0x204>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_TIM_PWM_Start+0x1b2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a18      	ldr	r2, [pc, #96]	@ (8003280 <HAL_TIM_PWM_Start+0x210>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d115      	bne.n	800324e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_TIM_PWM_Start+0x220>)
 800322a:	4013      	ands	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b06      	cmp	r3, #6
 8003232:	d015      	beq.n	8003260 <HAL_TIM_PWM_Start+0x1f0>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323a:	d011      	beq.n	8003260 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	e008      	b.n	8003260 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e000      	b.n	8003262 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40013400 	.word	0x40013400
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800
 8003280:	40015000 	.word	0x40015000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	00010007 	.word	0x00010007

08003294 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e097      	b.n	80033d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fe fb37 	bl	8001930 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80032d8:	f023 0307 	bic.w	r3, r3, #7
 80032dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f000 fca9 	bl	8003c40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	4313      	orrs	r3, r2
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003334:	f023 030c 	bic.w	r3, r3, #12
 8003338:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003340:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	4313      	orrs	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	011a      	lsls	r2, r3, #4
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	031b      	lsls	r3, r3, #12
 8003364:	4313      	orrs	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4313      	orrs	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003400:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003408:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003416:	7b7b      	ldrb	r3, [r7, #13]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e069      	b.n	80034f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003430:	e031      	b.n	8003496 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d110      	bne.n	800345a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800343e:	7b3b      	ldrb	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e055      	b.n	80034f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003458:	e01d      	b.n	8003496 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d108      	bne.n	8003472 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003466:	7b7b      	ldrb	r3, [r7, #13]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800346c:	7b3b      	ldrb	r3, [r7, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e03e      	b.n	80034f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_TIM_Encoder_Start+0xc4>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d008      	beq.n	80034b4 <HAL_TIM_Encoder_Start+0xd4>
 80034a2:	e00f      	b.n	80034c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f841 	bl	8004534 <TIM_CCxChannelCmd>
      break;
 80034b2:	e016      	b.n	80034e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	2104      	movs	r1, #4
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 f839 	bl	8004534 <TIM_CCxChannelCmd>
      break;
 80034c2:	e00e      	b.n	80034e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 f831 	bl	8004534 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	2104      	movs	r1, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f82a 	bl	8004534 <TIM_CCxChannelCmd>
      break;
 80034e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0202 	mvn.w	r2, #2
 8003530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fb5c 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fb4e 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fb5f 	bl	8003c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d020      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0204 	mvn.w	r2, #4
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fb36 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fb28 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb39 	bl	8003c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d020      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0208 	mvn.w	r2, #8
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fb10 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fb02 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fb13 	bl	8003c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 faea 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fadc 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 faed 	bl	8003c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0201 	mvn.w	r2, #1
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd ff7e 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800368e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f001 f8a9 	bl	80047e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f001 f8a1 	bl	80047fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 faa7 	bl	8003c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00c      	beq.n	8003702 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0220 	mvn.w	r2, #32
 80036fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f869 	bl	80047d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f875 	bl	8004810 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 f86d 	bl	8004824 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 f865 	bl	8004838 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f001 f85d 	bl	800484c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0ff      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b14      	cmp	r3, #20
 80037c6:	f200 80f0 	bhi.w	80039aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	08003825 	.word	0x08003825
 80037d4:	080039ab 	.word	0x080039ab
 80037d8:	080039ab 	.word	0x080039ab
 80037dc:	080039ab 	.word	0x080039ab
 80037e0:	08003865 	.word	0x08003865
 80037e4:	080039ab 	.word	0x080039ab
 80037e8:	080039ab 	.word	0x080039ab
 80037ec:	080039ab 	.word	0x080039ab
 80037f0:	080038a7 	.word	0x080038a7
 80037f4:	080039ab 	.word	0x080039ab
 80037f8:	080039ab 	.word	0x080039ab
 80037fc:	080039ab 	.word	0x080039ab
 8003800:	080038e7 	.word	0x080038e7
 8003804:	080039ab 	.word	0x080039ab
 8003808:	080039ab 	.word	0x080039ab
 800380c:	080039ab 	.word	0x080039ab
 8003810:	08003929 	.word	0x08003929
 8003814:	080039ab 	.word	0x080039ab
 8003818:	080039ab 	.word	0x080039ab
 800381c:	080039ab 	.word	0x080039ab
 8003820:	08003969 	.word	0x08003969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fabc 	bl	8003da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0208 	orr.w	r2, r2, #8
 800383e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6999      	ldr	r1, [r3, #24]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	619a      	str	r2, [r3, #24]
      break;
 8003862:	e0a5      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fb36 	bl	8003edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	021a      	lsls	r2, r3, #8
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      break;
 80038a4:	e084      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fba9 	bl	8004004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0208 	orr.w	r2, r2, #8
 80038c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0204 	bic.w	r2, r2, #4
 80038d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]
      break;
 80038e4:	e064      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fc1b 	bl	8004128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	021a      	lsls	r2, r3, #8
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	61da      	str	r2, [r3, #28]
      break;
 8003926:	e043      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fc8e 	bl	8004250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003966:	e023      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fcd8 	bl	8004324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003982:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003992:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	021a      	lsls	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      break;
 80039ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x1c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0f6      	b.n	8003bce <HAL_TIM_ConfigClockSource+0x20a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80039fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6f      	ldr	r2, [pc, #444]	@ (8003bd8 <HAL_TIM_ConfigClockSource+0x214>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f000 80c1 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a20:	4a6d      	ldr	r2, [pc, #436]	@ (8003bd8 <HAL_TIM_ConfigClockSource+0x214>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f200 80c6 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a28:	4a6c      	ldr	r2, [pc, #432]	@ (8003bdc <HAL_TIM_ConfigClockSource+0x218>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	f000 80b9 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a30:	4a6a      	ldr	r2, [pc, #424]	@ (8003bdc <HAL_TIM_ConfigClockSource+0x218>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f200 80be 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a38:	4a69      	ldr	r2, [pc, #420]	@ (8003be0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f000 80b1 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a40:	4a67      	ldr	r2, [pc, #412]	@ (8003be0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	f200 80b6 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a48:	4a66      	ldr	r2, [pc, #408]	@ (8003be4 <HAL_TIM_ConfigClockSource+0x220>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f000 80a9 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a50:	4a64      	ldr	r2, [pc, #400]	@ (8003be4 <HAL_TIM_ConfigClockSource+0x220>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	f200 80ae 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a58:	4a63      	ldr	r2, [pc, #396]	@ (8003be8 <HAL_TIM_ConfigClockSource+0x224>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	f000 80a1 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a60:	4a61      	ldr	r2, [pc, #388]	@ (8003be8 <HAL_TIM_ConfigClockSource+0x224>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f200 80a6 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a68:	4a60      	ldr	r2, [pc, #384]	@ (8003bec <HAL_TIM_ConfigClockSource+0x228>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f000 8099 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a70:	4a5e      	ldr	r2, [pc, #376]	@ (8003bec <HAL_TIM_ConfigClockSource+0x228>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f200 809e 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003a7c:	f000 8091 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003a84:	f200 8096 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a8c:	f000 8089 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a94:	f200 808e 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9c:	d03e      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x158>
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa2:	f200 8087 	bhi.w	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aaa:	f000 8086 	beq.w	8003bba <HAL_TIM_ConfigClockSource+0x1f6>
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab2:	d87f      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ab4:	2b70      	cmp	r3, #112	@ 0x70
 8003ab6:	d01a      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x12a>
 8003ab8:	2b70      	cmp	r3, #112	@ 0x70
 8003aba:	d87b      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003abc:	2b60      	cmp	r3, #96	@ 0x60
 8003abe:	d050      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x19e>
 8003ac0:	2b60      	cmp	r3, #96	@ 0x60
 8003ac2:	d877      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac4:	2b50      	cmp	r3, #80	@ 0x50
 8003ac6:	d03c      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x17e>
 8003ac8:	2b50      	cmp	r3, #80	@ 0x50
 8003aca:	d873      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d058      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x1be>
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d86f      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad4:	2b30      	cmp	r3, #48	@ 0x30
 8003ad6:	d064      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003ad8:	2b30      	cmp	r3, #48	@ 0x30
 8003ada:	d86b      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d060      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d867      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05c      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d05a      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8003aec:	e062      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003afe:	f000 fcf9 	bl	80044f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	609a      	str	r2, [r3, #8]
      break;
 8003b1a:	e04f      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b2c:	f000 fce2 	bl	80044f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b3e:	609a      	str	r2, [r3, #8]
      break;
 8003b40:	e03c      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f000 fc54 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2150      	movs	r1, #80	@ 0x50
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fcad 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003b60:	e02c      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 fc73 	bl	800445a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2160      	movs	r1, #96	@ 0x60
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc9d 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003b80:	e01c      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fc34 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2140      	movs	r1, #64	@ 0x40
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fc8d 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e00c      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f000 fc84 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003bb2:	e003      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb8:	e000      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	00100070 	.word	0x00100070
 8003bdc:	00100060 	.word	0x00100060
 8003be0:	00100050 	.word	0x00100050
 8003be4:	00100040 	.word	0x00100040
 8003be8:	00100030 	.word	0x00100030
 8003bec:	00100020 	.word	0x00100020

08003bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a4c      	ldr	r2, [pc, #304]	@ (8003d84 <TIM_Base_SetConfig+0x144>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d017      	beq.n	8003c88 <TIM_Base_SetConfig+0x48>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5e:	d013      	beq.n	8003c88 <TIM_Base_SetConfig+0x48>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a49      	ldr	r2, [pc, #292]	@ (8003d88 <TIM_Base_SetConfig+0x148>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00f      	beq.n	8003c88 <TIM_Base_SetConfig+0x48>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a48      	ldr	r2, [pc, #288]	@ (8003d8c <TIM_Base_SetConfig+0x14c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00b      	beq.n	8003c88 <TIM_Base_SetConfig+0x48>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a47      	ldr	r2, [pc, #284]	@ (8003d90 <TIM_Base_SetConfig+0x150>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d007      	beq.n	8003c88 <TIM_Base_SetConfig+0x48>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a46      	ldr	r2, [pc, #280]	@ (8003d94 <TIM_Base_SetConfig+0x154>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a45      	ldr	r2, [pc, #276]	@ (8003d98 <TIM_Base_SetConfig+0x158>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d108      	bne.n	8003c9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a39      	ldr	r2, [pc, #228]	@ (8003d84 <TIM_Base_SetConfig+0x144>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d023      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d01f      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a36      	ldr	r2, [pc, #216]	@ (8003d88 <TIM_Base_SetConfig+0x148>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01b      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a35      	ldr	r2, [pc, #212]	@ (8003d8c <TIM_Base_SetConfig+0x14c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d017      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	@ (8003d90 <TIM_Base_SetConfig+0x150>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	@ (8003d94 <TIM_Base_SetConfig+0x154>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00f      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a33      	ldr	r2, [pc, #204]	@ (8003d9c <TIM_Base_SetConfig+0x15c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a32      	ldr	r2, [pc, #200]	@ (8003da0 <TIM_Base_SetConfig+0x160>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a31      	ldr	r2, [pc, #196]	@ (8003da4 <TIM_Base_SetConfig+0x164>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d98 <TIM_Base_SetConfig+0x158>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a18      	ldr	r2, [pc, #96]	@ (8003d84 <TIM_Base_SetConfig+0x144>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <TIM_Base_SetConfig+0x110>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d94 <TIM_Base_SetConfig+0x154>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00f      	beq.n	8003d50 <TIM_Base_SetConfig+0x110>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1a      	ldr	r2, [pc, #104]	@ (8003d9c <TIM_Base_SetConfig+0x15c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_Base_SetConfig+0x110>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	@ (8003da0 <TIM_Base_SetConfig+0x160>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_Base_SetConfig+0x110>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <TIM_Base_SetConfig+0x164>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0x110>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <TIM_Base_SetConfig+0x158>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
  }
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40015000 	.word	0x40015000
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	40014400 	.word	0x40014400
 8003da4:	40014800 	.word	0x40014800

08003da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f023 0201 	bic.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <TIM_OC1_SetConfig+0x11c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <TIM_OC1_SetConfig+0x88>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec8 <TIM_OC1_SetConfig+0x120>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00f      	beq.n	8003e30 <TIM_OC1_SetConfig+0x88>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a2e      	ldr	r2, [pc, #184]	@ (8003ecc <TIM_OC1_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00b      	beq.n	8003e30 <TIM_OC1_SetConfig+0x88>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed0 <TIM_OC1_SetConfig+0x128>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <TIM_OC1_SetConfig+0x88>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed4 <TIM_OC1_SetConfig+0x12c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_OC1_SetConfig+0x88>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed8 <TIM_OC1_SetConfig+0x130>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10c      	bne.n	8003e4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0308 	bic.w	r3, r3, #8
 8003e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <TIM_OC1_SetConfig+0x11c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <TIM_OC1_SetConfig+0xd2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec8 <TIM_OC1_SetConfig+0x120>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <TIM_OC1_SetConfig+0xd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ecc <TIM_OC1_SetConfig+0x124>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_OC1_SetConfig+0xd2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed0 <TIM_OC1_SetConfig+0x128>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_OC1_SetConfig+0xd2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	@ (8003ed4 <TIM_OC1_SetConfig+0x12c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_OC1_SetConfig+0xd2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a18      	ldr	r2, [pc, #96]	@ (8003ed8 <TIM_OC1_SetConfig+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d111      	bne.n	8003e9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40013400 	.word	0x40013400
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800
 8003ed8:	40015000 	.word	0x40015000

08003edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 0210 	bic.w	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fec <TIM_OC2_SetConfig+0x110>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_OC2_SetConfig+0x74>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff0 <TIM_OC2_SetConfig+0x114>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC2_SetConfig+0x74>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff4 <TIM_OC2_SetConfig+0x118>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10d      	bne.n	8003f6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <TIM_OC2_SetConfig+0x110>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <TIM_OC2_SetConfig+0xc0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <TIM_OC2_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00f      	beq.n	8003f9c <TIM_OC2_SetConfig+0xc0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff8 <TIM_OC2_SetConfig+0x11c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <TIM_OC2_SetConfig+0xc0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <TIM_OC2_SetConfig+0x120>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_OC2_SetConfig+0xc0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004000 <TIM_OC2_SetConfig+0x124>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_OC2_SetConfig+0xc0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <TIM_OC2_SetConfig+0x118>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d113      	bne.n	8003fc4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40015000 	.word	0x40015000
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800

08004004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	@ (8004110 <TIM_OC3_SetConfig+0x10c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_OC3_SetConfig+0x72>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <TIM_OC3_SetConfig+0x110>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_OC3_SetConfig+0x72>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	@ (8004118 <TIM_OC3_SetConfig+0x114>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10d      	bne.n	8004092 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800407c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <TIM_OC3_SetConfig+0x10c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <TIM_OC3_SetConfig+0xbe>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <TIM_OC3_SetConfig+0x110>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00f      	beq.n	80040c2 <TIM_OC3_SetConfig+0xbe>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	@ (800411c <TIM_OC3_SetConfig+0x118>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <TIM_OC3_SetConfig+0xbe>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004120 <TIM_OC3_SetConfig+0x11c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <TIM_OC3_SetConfig+0xbe>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004124 <TIM_OC3_SetConfig+0x120>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC3_SetConfig+0xbe>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <TIM_OC3_SetConfig+0x114>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d113      	bne.n	80040ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	621a      	str	r2, [r3, #32]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40013400 	.word	0x40013400
 8004118:	40015000 	.word	0x40015000
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	031b      	lsls	r3, r3, #12
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <TIM_OC4_SetConfig+0x110>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <TIM_OC4_SetConfig+0x74>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2b      	ldr	r2, [pc, #172]	@ (800423c <TIM_OC4_SetConfig+0x114>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_OC4_SetConfig+0x74>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2a      	ldr	r2, [pc, #168]	@ (8004240 <TIM_OC4_SetConfig+0x118>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10d      	bne.n	80041b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	031b      	lsls	r3, r3, #12
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <TIM_OC4_SetConfig+0x110>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <TIM_OC4_SetConfig+0xc0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <TIM_OC4_SetConfig+0x114>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00f      	beq.n	80041e8 <TIM_OC4_SetConfig+0xc0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004244 <TIM_OC4_SetConfig+0x11c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00b      	beq.n	80041e8 <TIM_OC4_SetConfig+0xc0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004248 <TIM_OC4_SetConfig+0x120>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <TIM_OC4_SetConfig+0xc0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a1c      	ldr	r2, [pc, #112]	@ (800424c <TIM_OC4_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_OC4_SetConfig+0xc0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <TIM_OC4_SetConfig+0x118>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d113      	bne.n	8004210 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	019b      	lsls	r3, r3, #6
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40013400 	.word	0x40013400
 8004240:	40015000 	.word	0x40015000
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a19      	ldr	r2, [pc, #100]	@ (800430c <TIM_OC5_SetConfig+0xbc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <TIM_OC5_SetConfig+0x82>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a18      	ldr	r2, [pc, #96]	@ (8004310 <TIM_OC5_SetConfig+0xc0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <TIM_OC5_SetConfig+0x82>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a17      	ldr	r2, [pc, #92]	@ (8004314 <TIM_OC5_SetConfig+0xc4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_OC5_SetConfig+0x82>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <TIM_OC5_SetConfig+0xc8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_OC5_SetConfig+0x82>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <TIM_OC5_SetConfig+0xcc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_OC5_SetConfig+0x82>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <TIM_OC5_SetConfig+0xd0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d109      	bne.n	80042e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	621a      	str	r2, [r3, #32]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40013400 	.word	0x40013400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800
 8004320:	40015000 	.word	0x40015000

08004324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800436a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1a      	ldr	r2, [pc, #104]	@ (80043e4 <TIM_OC6_SetConfig+0xc0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <TIM_OC6_SetConfig+0x84>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a19      	ldr	r2, [pc, #100]	@ (80043e8 <TIM_OC6_SetConfig+0xc4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00f      	beq.n	80043a8 <TIM_OC6_SetConfig+0x84>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <TIM_OC6_SetConfig+0xc8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_OC6_SetConfig+0x84>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <TIM_OC6_SetConfig+0xcc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d007      	beq.n	80043a8 <TIM_OC6_SetConfig+0x84>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a16      	ldr	r2, [pc, #88]	@ (80043f4 <TIM_OC6_SetConfig+0xd0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_OC6_SetConfig+0x84>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a15      	ldr	r2, [pc, #84]	@ (80043f8 <TIM_OC6_SetConfig+0xd4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d109      	bne.n	80043bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	40015000 	.word	0x40015000

080043fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 030a 	bic.w	r3, r3, #10
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445a:	b480      	push	{r7}
 800445c:	b087      	sub	sp, #28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f023 0210 	bic.w	r2, r3, #16
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e074      	b.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a34      	ldr	r2, [pc, #208]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a33      	ldr	r2, [pc, #204]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a31      	ldr	r2, [pc, #196]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a21      	ldr	r2, [pc, #132]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d022      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004618:	d01d      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1f      	ldr	r2, [pc, #124]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d018      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1d      	ldr	r2, [pc, #116]	@ (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1c      	ldr	r2, [pc, #112]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a11      	ldr	r2, [pc, #68]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10c      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40015000 	.word	0x40015000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40014000 	.word	0x40014000

080046ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e078      	b.n	80047ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1b      	ldr	r2, [pc, #108]	@ (80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d11c      	bne.n	80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	051b      	lsls	r3, r3, #20
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40015000 	.word	0x40015000

080047d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	ed93 7a06 	vldr	s14, [r3, #24]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	edd3 7a07 	vldr	s15, [r3, #28]
 8004876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004890:	eeb1 7a67 	vneg.f32	s14, s15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	edd3 7a08 	vldr	s15, [r3, #32]
 800489a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800489e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	330c      	adds	r3, #12
 80048ba:	220c      	movs	r2, #12
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f804 	bl	80048cc <memset>
  }

}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <memset>:
 80048cc:	4402      	add	r2, r0
 80048ce:	4603      	mov	r3, r0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <__libc_init_array>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4d0d      	ldr	r5, [pc, #52]	@ (8004914 <__libc_init_array+0x38>)
 80048e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004918 <__libc_init_array+0x3c>)
 80048e2:	1b64      	subs	r4, r4, r5
 80048e4:	10a4      	asrs	r4, r4, #2
 80048e6:	2600      	movs	r6, #0
 80048e8:	42a6      	cmp	r6, r4
 80048ea:	d109      	bne.n	8004900 <__libc_init_array+0x24>
 80048ec:	4d0b      	ldr	r5, [pc, #44]	@ (800491c <__libc_init_array+0x40>)
 80048ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004920 <__libc_init_array+0x44>)
 80048f0:	f000 f818 	bl	8004924 <_init>
 80048f4:	1b64      	subs	r4, r4, r5
 80048f6:	10a4      	asrs	r4, r4, #2
 80048f8:	2600      	movs	r6, #0
 80048fa:	42a6      	cmp	r6, r4
 80048fc:	d105      	bne.n	800490a <__libc_init_array+0x2e>
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	f855 3b04 	ldr.w	r3, [r5], #4
 8004904:	4798      	blx	r3
 8004906:	3601      	adds	r6, #1
 8004908:	e7ee      	b.n	80048e8 <__libc_init_array+0xc>
 800490a:	f855 3b04 	ldr.w	r3, [r5], #4
 800490e:	4798      	blx	r3
 8004910:	3601      	adds	r6, #1
 8004912:	e7f2      	b.n	80048fa <__libc_init_array+0x1e>
 8004914:	0800494c 	.word	0x0800494c
 8004918:	0800494c 	.word	0x0800494c
 800491c:	0800494c 	.word	0x0800494c
 8004920:	08004950 	.word	0x08004950

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
