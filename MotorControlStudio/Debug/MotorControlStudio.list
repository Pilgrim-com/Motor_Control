
MotorControlStudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a1c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c04  08004c04  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c04  08004c04  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c04  08004c04  00005c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c08  08004c08  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004c0c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  08004c78  00006070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08004c78  0000643c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d68  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b0  00000000  00000000  00019e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b90  00000000  00000000  0001d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d64  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014119  00000000  00000000  00044c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8780  00000000  00000000  00058db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  00151578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001555f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004bdc 	.word	0x08004bdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08004bdc 	.word	0x08004bdc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <KalmanInit>:
#include "Kalman.h"
#include "QEI.h"

// Initialize Kalman filter matrices and parameters
void KalmanInit(KALMAN *kalman, float32_t Matrix_A[16], float32_t Matrix_B[4], float32_t Q_scalar, float32_t R_scalar)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6178      	str	r0, [r7, #20]
 8000a9c:	6139      	str	r1, [r7, #16]
 8000a9e:	60fa      	str	r2, [r7, #12]
 8000aa0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aa4:	edc7 0a01 	vstr	s1, [r7, #4]
    // Initialize matrices A, B, G, H
    arm_mat_init_f32(&kalman->A, 4, 4, Matrix_A);
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	f003 ff85 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_init_f32(&kalman->B, 4, 1, Matrix_B);  // Control matrix
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	f003 ff7d 	bl	80049c2 <arm_mat_init_f32>
    float32_t G_init[4] = {0.0, 0.0, 1.0, 0.0};
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ace:	f04f 0300 	mov.w	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ad4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(kalman->G_f32, G_init, sizeof(G_init));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3388      	adds	r3, #136	@ 0x88
 8000ae4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ae8:	2210      	movs	r2, #16
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 f868 	bl	8004bc0 <memcpy>
    float32_t H_init[4] = {1.0, 0.0, 0.0, 0.0};
 8000af0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	f04f 0300 	mov.w	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(kalman->H_f32, H_init, sizeof(H_init));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	33a0      	adds	r3, #160	@ 0xa0
 8000b0c:	f107 0118 	add.w	r1, r7, #24
 8000b10:	2210      	movs	r2, #16
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 f854 	bl	8004bc0 <memcpy>
    arm_mat_init_f32(&kalman->G, 4, 1, kalman->G_f32);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3388      	adds	r3, #136	@ 0x88
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	f003 ff4c 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_init_f32(&kalman->H, 1, 4, kalman->H_f32);
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	33a0      	adds	r3, #160	@ 0xa0
 8000b34:	2204      	movs	r2, #4
 8000b36:	2101      	movs	r1, #1
 8000b38:	f003 ff43 	bl	80049c2 <arm_mat_init_f32>

    // Transpose matrices A and H
    arm_mat_init_f32(&kalman->A_t, 4, 4, (float *) {0});
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8000b42:	2300      	movs	r3, #0
 8000b44:	2204      	movs	r2, #4
 8000b46:	2104      	movs	r1, #4
 8000b48:	f003 ff3b 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_trans_f32(&kalman->A, &kalman->A_t);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3360      	adds	r3, #96	@ 0x60
 8000b56:	4619      	mov	r1, r3
 8000b58:	4610      	mov	r0, r2
 8000b5a:	f003 ffc4 	bl	8004ae6 <arm_mat_trans_f32>

    arm_mat_init_f32(&kalman->H_t, 1, 4, (float *) {0});
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8000b64:	2300      	movs	r3, #0
 8000b66:	2204      	movs	r2, #4
 8000b68:	2101      	movs	r1, #1
 8000b6a:	f003 ff2a 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_trans_f32(&kalman->H, &kalman->H_t);
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	33e0      	adds	r3, #224	@ 0xe0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	f003 ffb3 	bl	8004ae6 <arm_mat_trans_f32>

    // Initialize state variables (position and velocity)
    kalman->X_init_f32[0] = 1;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000b86:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    kalman->X_init_f32[1] = 1;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000b90:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    // Initialize covariance matrices
    arm_mat_init_f32(&kalman->X, 4, 1, (float *) {0});
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	f003 ff0f 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_init_f32(&kalman->X_pred, 4, 1, (float *) {0});
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 8000baa:	2300      	movs	r3, #0
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	f003 ff07 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_init_f32(&kalman->P, 4, 4, (float *) {0});
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	f003 feff 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_init_f32(&kalman->P_pred, 4, 4, (float *) {0});
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f503 70b0 	add.w	r0, r3, #352	@ 0x160
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2204      	movs	r2, #4
 8000bce:	2104      	movs	r1, #4
 8000bd0:	f003 fef7 	bl	80049c2 <arm_mat_init_f32>

    // Kalman parameters initialization
    arm_mat_init_f32(&kalman->K, 4, 1, (float *) {0});
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2104      	movs	r1, #4
 8000be0:	f003 feef 	bl	80049c2 <arm_mat_init_f32>
    arm_mat_init_f32(&kalman->Z, 1, 1, (float *) {0});
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f503 70c4 	add.w	r0, r3, #392	@ 0x188
 8000bea:	2300      	movs	r3, #0
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	f003 fee7 	bl	80049c2 <arm_mat_init_f32>

    // Assign scalar values to Q and R
    kalman->Q_scalar = Q_scalar;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    kalman->R_scalar = R_scalar;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

    // Control input initialization
    arm_mat_init_f32(&kalman->V_t, 4, 1, (float *) {0});  // Assuming control input is 4x1 vector
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2104      	movs	r1, #4
 8000c10:	f003 fed7 	bl	80049c2 <arm_mat_init_f32>
}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	@ 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <KalmanPrediction>:

// Prediction Step
void KalmanPrediction(KALMAN *kalman, float32_t control_input)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09a      	sub	sp, #104	@ 0x68
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	ed87 0a00 	vstr	s0, [r7]
    // Convert the scalar control input to a 4x1 matrix
	float32_t V_t_f32[4] = {control_input};
 8000c28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	65bb      	str	r3, [r7, #88]	@ 0x58

    arm_matrix_instance_f32 control_input_matrix;
    arm_mat_init_f32(&control_input_matrix, 4, 1, V_t_f32);  // Initialize control input matrix
 8000c3a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c3e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000c42:	2201      	movs	r2, #1
 8000c44:	2104      	movs	r1, #4
 8000c46:	f003 febc 	bl	80049c2 <arm_mat_init_f32>



    // B * V_t
    arm_mat_mult_f32(&kalman->B, &control_input_matrix, &kalman->BV);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8000c56:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f003 fec9 	bl	80049f2 <arm_mat_mult_f32>

    // Predicted state: X_pred = A * X + B * V_t
    arm_mat_mult_f32(&kalman->A, &kalman->X, &kalman->AX);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3358      	adds	r3, #88	@ 0x58
 8000c70:	461a      	mov	r2, r3
 8000c72:	f003 febe 	bl	80049f2 <arm_mat_mult_f32>
    arm_mat_add_f32(&kalman->AX, &kalman->BV, &kalman->X_pred);  // Add control input contribution
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f003 fe5f 	bl	800494c <arm_mat_add_f32>

    // Create Q matrix (diagonal) from scalar Q_scalar
    float Q_f32[16] =
    {
        kalman->Q_scalar, 0, 0, 0,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
    float Q_f32[16] =
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
        0, kalman->Q_scalar, 0, 0,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
    float Q_f32[16] =
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        0, 0, kalman->Q_scalar, 0,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
    float Q_f32[16] =
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	64bb      	str	r3, [r7, #72]	@ 0x48
        0, 0, 0, kalman->Q_scalar
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
    float Q_f32[16] =
 8000cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    };

    arm_matrix_instance_f32 Q_matrix;
    arm_mat_init_f32(&Q_matrix, 4, 4, Q_f32);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	f107 0008 	add.w	r0, r7, #8
 8000cfe:	2204      	movs	r2, #4
 8000d00:	2104      	movs	r1, #4
 8000d02:	f003 fe5e 	bl	80049c2 <arm_mat_init_f32>

    // Predict the covariance: P_pred = A * P * A' + Q
    arm_mat_mult_f32(&kalman->A, &kalman->P, &kalman->AP);  // A * P
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f503 71ac 	add.w	r1, r3, #344	@ 0x158
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3368      	adds	r3, #104	@ 0x68
 8000d16:	461a      	mov	r2, r3
 8000d18:	f003 fe6b 	bl	80049f2 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kalman->AP, &kalman->A_t, &kalman->APA_t);  // A * P * A'
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3370      	adds	r3, #112	@ 0x70
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f003 fe60 	bl	80049f2 <arm_mat_mult_f32>
    arm_mat_add_f32(&kalman->APA_t, &Q_matrix, &kalman->P_pred);  // Add Q (process noise matrix)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f503 72b0 	add.w	r2, r3, #352	@ 0x160
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	f003 fe02 	bl	800494c <arm_mat_add_f32>
}
 8000d48:	bf00      	nop
 8000d4a:	3768      	adds	r7, #104	@ 0x68
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d5c:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	615a      	str	r2, [r3, #20]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6178      	str	r0, [r7, #20]
 8000d80:	6139      	str	r1, [r7, #16]
 8000d82:	60fa      	str	r2, [r7, #12]
 8000d84:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d88:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
	qei->old_val = 0;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->pulses = 0;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 8000dcc:	213c      	movs	r1, #60	@ 0x3c
 8000dce:	6938      	ldr	r0, [r7, #16]
 8000dd0:	f002 fb46 	bl	8003460 <HAL_TIM_Encoder_Start>

}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	61da      	str	r2, [r3, #28]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0fd9      	lsrs	r1, r3, #31
 8000e0e:	440b      	add	r3, r1
 8000e10:	105b      	asrs	r3, r3, #1
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dd07      	ble.n	8000e26 <QEIPosVelUpdate+0x46>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	1ad2      	subs	r2, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	61da      	str	r2, [r3, #28]
 8000e24:	e010      	b.n	8000e48 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69da      	ldr	r2, [r3, #28]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	0fd9      	lsrs	r1, r3, #31
 8000e30:	440b      	add	r3, r1
 8000e32:	105b      	asrs	r3, r3, #1
 8000e34:	425b      	negs	r3, r3
 8000e36:	429a      	cmp	r2, r3
 8000e38:	da06      	bge.n	8000e48 <QEIPosVelUpdate+0x68>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	441a      	add	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	61da      	str	r2, [r3, #28]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	441a      	add	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e82:	ee17 0a90 	vmov	r0, s15
 8000e86:	f7ff fb2b 	bl	80004e0 <__aeabi_f2d>
 8000e8a:	a323      	add	r3, pc, #140	@ (adr r3, 8000f18 <QEIPosVelUpdate+0x138>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	f7ff fb7e 	bl	8000590 <__aeabi_dmul>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff fdaa 	bl	80009f4 <__aeabi_d2f>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	619a      	str	r2, [r3, #24]


 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ec0:	ee17 0a90 	vmov	r0, s15
 8000ec4:	f7ff fb0c 	bl	80004e0 <__aeabi_f2d>
 8000ec8:	a313      	add	r3, pc, #76	@ (adr r3, 8000f18 <QEIPosVelUpdate+0x138>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fb5f 	bl	8000590 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4614      	mov	r4, r2
 8000ed8:	461d      	mov	r5, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff faec 	bl	80004bc <__aeabi_i2d>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4629      	mov	r1, r5
 8000eec:	f7ff fc7a 	bl	80007e4 <__aeabi_ddiv>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fd7c 	bl	80009f4 <__aeabi_d2f>
 8000efc:	4602      	mov	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	621a      	str	r2, [r3, #32]

 	// Update value
 	qei -> old_val = qei -> new_val;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	54442d18 	.word	0x54442d18
 8000f1c:	400921fb 	.word	0x400921fb

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fe58 	bl	8001bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f889 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f000 fa8d 	bl	800144c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000f32:	f000 f9e7 	bl	8001304 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f36:	f000 fa3b 	bl	80013b0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000f3a:	f000 f8cd 	bl	80010d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f3e:	f000 f993 	bl	8001268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	PID_POS.Kp = Kp_pos;
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <main+0xc0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <main+0xc4>)
 8000f48:	6193      	str	r3, [r2, #24]
	PID_POS.Ki = Ki_pos;
 8000f4a:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <main+0xc8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <main+0xc4>)
 8000f50:	61d3      	str	r3, [r2, #28]
	PID_POS.Kd = Kd_pos;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <main+0xcc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <main+0xc4>)
 8000f58:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS, 0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4821      	ldr	r0, [pc, #132]	@ (8000fe4 <main+0xc4>)
 8000f5e:	f003 fcbf 	bl	80048e0 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 8000f62:	2380      	movs	r3, #128	@ 0x80
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <main+0xd0>)
 8000f68:	2208      	movs	r2, #8
 8000f6a:	4922      	ldr	r1, [pc, #136]	@ (8000ff4 <main+0xd4>)
 8000f6c:	4822      	ldr	r0, [pc, #136]	@ (8000ff8 <main+0xd8>)
 8000f6e:	f000 fb57 	bl	8001620 <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 8000f72:	2340      	movs	r3, #64	@ 0x40
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <main+0xd0>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	491e      	ldr	r1, [pc, #120]	@ (8000ff4 <main+0xd4>)
 8000f7c:	481f      	ldr	r0, [pc, #124]	@ (8000ffc <main+0xdc>)
 8000f7e:	f000 fb4f 	bl	8001620 <MotorInit>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8000f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f86:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001000 <main+0xe0>
 8000f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8e:	491d      	ldr	r1, [pc, #116]	@ (8001004 <main+0xe4>)
 8000f90:	481d      	ldr	r0, [pc, #116]	@ (8001008 <main+0xe8>)
 8000f92:	f7ff fef1 	bl	8000d78 <QEIInit>
//	QEIInit(&revolute_motor, &htim3, 8192, 1000, 65536);

	PIDInit(&prismatic_pos_control, 340, -340);
 8000f96:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800100c <main+0xec>
 8000f9a:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8001010 <main+0xf0>
 8000f9e:	481d      	ldr	r0, [pc, #116]	@ (8001014 <main+0xf4>)
 8000fa0:	f7ff fed6 	bl	8000d50 <PIDInit>
	PIDInit(&prismatic_vel_control, 65535, -65535);
 8000fa4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001018 <main+0xf8>
 8000fa8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800101c <main+0xfc>
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <main+0x100>)
 8000fae:	f7ff fecf 	bl	8000d50 <PIDInit>

	KalmanInit(&prismatic_kalman, A_f32, B_f32, Q, R);
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <main+0x104>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <main+0x108>)
 8000fba:	ed93 7a00 	vldr	s14, [r3]
 8000fbe:	eef0 0a47 	vmov.f32	s1, s14
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	4a19      	ldr	r2, [pc, #100]	@ (800102c <main+0x10c>)
 8000fc8:	4919      	ldr	r1, [pc, #100]	@ (8001030 <main+0x110>)
 8000fca:	481a      	ldr	r0, [pc, #104]	@ (8001034 <main+0x114>)
 8000fcc:	f7ff fd62 	bl	8000a94 <KalmanInit>

	HAL_TIM_Base_Start_IT(&htim5);
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <main+0x118>)
 8000fd2:	f001 ffb3 	bl	8002f3c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 8000fd6:	4819      	ldr	r0, [pc, #100]	@ (800103c <main+0x11c>)
 8000fd8:	f001 ffb0 	bl	8002f3c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <main+0xbc>
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	200001f8 	.word	0x200001f8
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	200001f4 	.word	0x200001f4
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	2000008c 	.word	0x2000008c
 8000ff8:	200001bc 	.word	0x200001bc
 8000ffc:	200001d8 	.word	0x200001d8
 8001000:	447a0000 	.word	0x447a0000
 8001004:	20000124 	.word	0x20000124
 8001008:	2000021c 	.word	0x2000021c
 800100c:	c3aa0000 	.word	0xc3aa0000
 8001010:	43aa0000 	.word	0x43aa0000
 8001014:	20000248 	.word	0x20000248
 8001018:	c77fff00 	.word	0xc77fff00
 800101c:	477fff00 	.word	0x477fff00
 8001020:	20000268 	.word	0x20000268
 8001024:	20000058 	.word	0x20000058
 8001028:	2000005c 	.word	0x2000005c
 800102c:	20000048 	.word	0x20000048
 8001030:	20000008 	.word	0x20000008
 8001034:	20000288 	.word	0x20000288
 8001038:	20000170 	.word	0x20000170
 800103c:	200000d8 	.word	0x200000d8

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2238      	movs	r2, #56	@ 0x38
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fd8a 	bl	8004b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001062:	2000      	movs	r0, #0
 8001064:	f001 f8f8 	bl	8002258 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2340      	movs	r3, #64	@ 0x40
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800107e:	2304      	movs	r3, #4
 8001080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001082:	2355      	movs	r3, #85	@ 0x55
 8001084:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f992 	bl	80023c0 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010a2:	f000 fab7 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2303      	movs	r3, #3
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fc90 	bl	80029e4 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010ca:	f000 faa3 	bl	8001614 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	@ 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09c      	sub	sp, #112	@ 0x70
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2234      	movs	r2, #52	@ 0x34
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fd28 	bl	8004b68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001118:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <MX_TIM1_Init+0x188>)
 800111a:	4a52      	ldr	r2, [pc, #328]	@ (8001264 <MX_TIM1_Init+0x18c>)
 800111c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001120:	22a9      	movs	r2, #169	@ 0xa9
 8001122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b4e      	ldr	r3, [pc, #312]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <MX_TIM1_Init+0x188>)
 800112c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b4b      	ldr	r3, [pc, #300]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001138:	4b49      	ldr	r3, [pc, #292]	@ (8001260 <MX_TIM1_Init+0x188>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b48      	ldr	r3, [pc, #288]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001144:	4846      	ldr	r0, [pc, #280]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001146:	f001 fe31 	bl	8002dac <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 fa60 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800115e:	4619      	mov	r1, r3
 8001160:	483f      	ldr	r0, [pc, #252]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001162:	f002 fc6f 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800116c:	f000 fa52 	bl	8001614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001170:	483b      	ldr	r0, [pc, #236]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001172:	f001 ff5b 	bl	800302c <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800117c:	f000 fa4a 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001190:	4619      	mov	r1, r3
 8001192:	4833      	ldr	r0, [pc, #204]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001194:	f003 fa34 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800119e:	f000 fa39 	bl	8001614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a2:	2360      	movs	r3, #96	@ 0x60
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011aa:	2300      	movs	r3, #0
 80011ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4826      	ldr	r0, [pc, #152]	@ (8001260 <MX_TIM1_Init+0x188>)
 80011c8:	f002 fb28 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011d2:	f000 fa1f 	bl	8001614 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011da:	2204      	movs	r2, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4820      	ldr	r0, [pc, #128]	@ (8001260 <MX_TIM1_Init+0x188>)
 80011e0:	f002 fb1c 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011ea:	f000 fa13 	bl	8001614 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011f2:	2208      	movs	r2, #8
 80011f4:	4619      	mov	r1, r3
 80011f6:	481a      	ldr	r0, [pc, #104]	@ (8001260 <MX_TIM1_Init+0x188>)
 80011f8:	f002 fb10 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001202:	f000 fa07 	bl	8001614 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001244:	f003 fa72 	bl	800472c <HAL_TIMEx_ConfigBreakDeadTime>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800124e:	f000 f9e1 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001252:	4803      	ldr	r0, [pc, #12]	@ (8001260 <MX_TIM1_Init+0x188>)
 8001254:	f000 fbf8 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3770      	adds	r7, #112	@ 0x70
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000008c 	.word	0x2000008c
 8001264:	40012c00 	.word	0x40012c00

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001286:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001290:	22a9      	movs	r2, #169	@ 0xa9
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM2_Init+0x98>)
 800129c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012b0:	f001 fd7c 	bl	8002dac <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ba:	f000 f9ab 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012cc:	f002 fbba 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012d6:	f000 f99d 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012e8:	f003 f98a 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012f2:	f000 f98f 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000d8 	.word	0x200000d8

08001304 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2224      	movs	r2, #36	@ 0x24
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fc28 	bl	8004b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001324:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <MX_TIM4_Init+0xa8>)
 8001326:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001334:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001348:	2303      	movs	r3, #3
 800134a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001350:	2301      	movs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001374:	f001 ffce 	bl	8003314 <HAL_TIM_Encoder_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800137e:	f000 f949 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001390:	f003 f936 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800139a:	f000 f93b 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	@ 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000124 	.word	0x20000124
 80013ac:	40000800 	.word	0x40000800

080013b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <MX_TIM5_Init+0x98>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013d6:	22a9      	movs	r2, #169	@ 0xa9
 80013d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013e2:	f04f 32ff 	mov.w	r2, #4294967295
 80013e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f4:	4813      	ldr	r0, [pc, #76]	@ (8001444 <MX_TIM5_Init+0x94>)
 80013f6:	f001 fcd9 	bl	8002dac <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001400:	f000 f908 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001408:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <MX_TIM5_Init+0x94>)
 8001412:	f002 fb17 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800141c:	f000 f8fa 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_TIM5_Init+0x94>)
 800142e:	f003 f8e7 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001438:	f000 f8ec 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000170 	.word	0x20000170
 8001448:	40000c00 	.word	0x40000c00

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b48      	ldr	r3, [pc, #288]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a47      	ldr	r2, [pc, #284]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b45      	ldr	r3, [pc, #276]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4b42      	ldr	r3, [pc, #264]	@ (8001584 <MX_GPIO_Init+0x138>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a41      	ldr	r2, [pc, #260]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b3f      	ldr	r3, [pc, #252]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a3b      	ldr	r2, [pc, #236]	@ (8001584 <MX_GPIO_Init+0x138>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <MX_GPIO_Init+0x138>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <MX_GPIO_Init+0x138>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a35      	ldr	r2, [pc, #212]	@ (8001584 <MX_GPIO_Init+0x138>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <MX_GPIO_Init+0x138>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2120      	movs	r1, #32
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ca:	f000 fe89 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	21c0      	movs	r1, #192	@ 0xc0
 80014d2:	482d      	ldr	r0, [pc, #180]	@ (8001588 <MX_GPIO_Init+0x13c>)
 80014d4:	f000 fe84 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC3 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_3;
 80014d8:	f242 0308 	movw	r3, #8200	@ 0x2008
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4826      	ldr	r0, [pc, #152]	@ (8001588 <MX_GPIO_Init+0x13c>)
 80014f0:	f000 fcf4 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80014f4:	2313      	movs	r3, #19
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f000 fce6 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001510:	230c      	movs	r3, #12
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001520:	230c      	movs	r3, #12
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f000 fcd5 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001532:	2320      	movs	r3, #32
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f000 fcc6 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001550:	23c0      	movs	r3, #192	@ 0xc0
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4808      	ldr	r0, [pc, #32]	@ (8001588 <MX_GPIO_Init+0x13c>)
 8001568:	f000 fcb8 	bl	8001edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2028      	movs	r0, #40	@ 0x28
 8001572:	f000 fc7e 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001576:	2028      	movs	r0, #40	@ 0x28
 8001578:	f000 fc95 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	48000800 	.word	0x48000800

0800158c <HAL_TIM_PeriodElapsedCallback>:

	// Motor control
	MotorSet(&prismatic_motor, 1000, output_velo);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d127      	bne.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x60>
//		Prismatic_CasCadeControl();

		MotorSet(&prismatic_motor, 1000, 65535);
 800159c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80015f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80015a0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80015fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80015a4:	4816      	ldr	r0, [pc, #88]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015a6:	f000 f863 	bl	8001670 <MotorSet>
		QEIPosVelUpdate(&prismatic_encoder);
 80015aa:	4816      	ldr	r0, [pc, #88]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80015ac:	f7ff fc18 	bl	8000de0 <QEIPosVelUpdate>

//		KalmanUpdate(&prismatic_kalman, prismatic_encoder.rads);
		KalmanPrediction(&prismatic_kalman, 12.0);
 80015b0:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 80015b4:	4814      	ldr	r0, [pc, #80]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80015b6:	f7ff fb31 	bl	8000c1c <KalmanPrediction>

		kalman_rads = prismatic_kalman.X_pred.pData[0];
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80015bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff8c 	bl	80004e0 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	490f      	ldr	r1, [pc, #60]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80015ce:	e9c1 2300 	strd	r2, r3, [r1]
		kalman_radps = prismatic_kalman.X_pred.pData[1];
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80015d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80015d8:	3304      	adds	r3, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff7f 	bl	80004e0 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	490a      	ldr	r1, [pc, #40]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]


	}

}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200000d8 	.word	0x200000d8
 80015f8:	477fff00 	.word	0x477fff00
 80015fc:	447a0000 	.word	0x447a0000
 8001600:	200001bc 	.word	0x200001bc
 8001604:	2000021c 	.word	0x2000021c
 8001608:	20000288 	.word	0x20000288
 800160c:	20000428 	.word	0x20000428
 8001610:	20000430 	.word	0x20000430

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <Error_Handler+0x8>

08001620 <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <MotorInit+0x4c>)
 800163a:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8b3a      	ldrh	r2, [r7, #24]
 8001652:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f001 fc01 	bl	8002e5c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4619      	mov	r1, r3
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f001 fd46 	bl	80030f0 <HAL_TIM_PWM_Start>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	0a21fe80 	.word	0x0a21fe80

08001670 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	ed87 0a02 	vstr	s0, [r7, #8]
 800167c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	d137      	bne.n	80016fe <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	895b      	ldrh	r3, [r3, #10]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d105      	bne.n	80016a2 <MotorSet+0x32>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 80016a0:	e104      	b.n	80018ac <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	895b      	ldrh	r3, [r3, #10]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d105      	bne.n	80016b6 <MotorSet+0x46>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80016b4:	e0fa      	b.n	80018ac <MotorSet+0x23c>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	895b      	ldrh	r3, [r3, #10]
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d105      	bne.n	80016ca <MotorSet+0x5a>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016c8:	e0f0      	b.n	80018ac <MotorSet+0x23c>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	895b      	ldrh	r3, [r3, #10]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d105      	bne.n	80016de <MotorSet+0x6e>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	e0e6      	b.n	80018ac <MotorSet+0x23c>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	895b      	ldrh	r3, [r3, #10]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d105      	bne.n	80016f2 <MotorSet+0x82>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	6493      	str	r3, [r2, #72]	@ 0x48
 80016f0:	e0dc      	b.n	80018ac <MotorSet+0x23c>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80016fc:	e0d6      	b.n	80018ac <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800170a:	ed97 7a02 	vldr	s14, [r7, #8]
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001716:	ee17 2a90 	vmov	r2, s15
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001726:	33fe      	adds	r3, #254	@ 0xfe
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe feb7 	bl	800049c <__aeabi_ui2d>
 800172e:	a362      	add	r3, pc, #392	@ (adr r3, 80018b8 <MotorSet+0x248>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff f856 	bl	80007e4 <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff f938 	bl	80009b4 <__aeabi_d2uiz>
 8001744:	4603      	mov	r3, r0
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8a1b      	ldrh	r3, [r3, #16]
 8001760:	3301      	adds	r3, #1
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800176e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800177a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8a5b      	ldrh	r3, [r3, #18]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe93 	bl	80004bc <__aeabi_i2d>
 8001796:	4604      	mov	r4, r0
 8001798:	460d      	mov	r5, r1
 800179a:	edd7 7a01 	vldr	s15, [r7, #4]
 800179e:	eef0 7ae7 	vabs.f32	s15, s15
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f7fe fe9b 	bl	80004e0 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7fe feed 	bl	8000590 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	a33e      	add	r3, pc, #248	@ (adr r3, 80018b8 <MotorSet+0x248>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7ff f80e 	bl	80007e4 <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f8f0 	bl	80009b4 <__aeabi_d2uiz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 80017de:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	db08      	blt.n	80017fe <MotorSet+0x18e>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6858      	ldr	r0, [r3, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	891b      	ldrh	r3, [r3, #8]
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f000 fcf2 	bl	80021e0 <HAL_GPIO_WritePin>
 80017fc:	e007      	b.n	800180e <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6858      	ldr	r0, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	891b      	ldrh	r3, [r3, #8]
 8001806:	2201      	movs	r2, #1
 8001808:	4619      	mov	r1, r3
 800180a:	f000 fce9 	bl	80021e0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8a1a      	ldrh	r2, [r3, #16]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8a5a      	ldrh	r2, [r3, #18]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8a5a      	ldrh	r2, [r3, #18]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	895b      	ldrh	r3, [r3, #10]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d106      	bne.n	8001846 <MotorSet+0x1d6>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6992      	ldr	r2, [r2, #24]
 8001842:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001844:	e032      	b.n	80018ac <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	895b      	ldrh	r3, [r3, #10]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d106      	bne.n	800185c <MotorSet+0x1ec>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800185a:	e027      	b.n	80018ac <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	895b      	ldrh	r3, [r3, #10]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d106      	bne.n	8001872 <MotorSet+0x202>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001870:	e01c      	b.n	80018ac <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	895b      	ldrh	r3, [r3, #10]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d106      	bne.n	8001888 <MotorSet+0x218>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001886:	e011      	b.n	80018ac <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	895b      	ldrh	r3, [r3, #10]
 800188c:	2b10      	cmp	r3, #16
 800188e:	d106      	bne.n	800189e <MotorSet+0x22e>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800189c:	e006      	b.n	80018ac <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80018aa:	e7ff      	b.n	80018ac <MotorSet+0x23c>
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bdb0      	pop	{r4, r5, r7, pc}
 80018b4:	f3af 8000 	nop.w
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40efffe0 	.word	0x40efffe0

080018c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <HAL_MspInit+0x44>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <HAL_MspInit+0x44>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x44>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x44>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018f6:	f000 fd53 	bl	80023a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800191a:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191e:	4a22      	ldr	r2, [pc, #136]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001924:	6613      	str	r3, [r2, #96]	@ 0x60
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001932:	e032      	b.n	800199a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800193c:	d114      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193e:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201c      	movs	r0, #28
 800195c:	f000 fa89 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001960:	201c      	movs	r0, #28
 8001962:	f000 faa0 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
}
 8001966:	e018      	b.n	800199a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <HAL_TIM_Base_MspInit+0xa4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d113      	bne.n	800199a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6593      	str	r3, [r2, #88]	@ 0x58
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2032      	movs	r0, #50	@ 0x32
 8001990:	f000 fa6f 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001994:	2032      	movs	r0, #50	@ 0x32
 8001996:	f000 fa86 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40000c00 	.word	0x40000c00

080019b0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12f      	bne.n	8001a32 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x90>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x90>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x90>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x90>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x90>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x90>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23c0      	movs	r3, #192	@ 0xc0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a12:	2302      	movs	r3, #2
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a1e:	f000 fa5d 	bl	8001edc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	201e      	movs	r0, #30
 8001a28:	f000 fa23 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a2c:	201e      	movs	r0, #30
 8001a2e:	f000 fa3a 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	@ 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48000400 	.word	0x48000400

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11d      	bne.n	8001aa6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a82:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a94:	2306      	movs	r3, #6
 8001a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa2:	f000 fa1b 	bl	8001edc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <NMI_Handler+0x4>

08001ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <UsageFault_Handler+0x4>

08001ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f8b7 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <TIM2_IRQHandler+0x10>)
 8001b1e:	f001 fd2d 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000d8 	.word	0x200000d8

08001b2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM4_IRQHandler+0x10>)
 8001b32:	f001 fd23 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000124 	.word	0x20000124

08001b40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b48:	f000 fb62 	bl	8002210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <TIM5_IRQHandler+0x10>)
 8001b56:	f001 fd11 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000170 	.word	0x20000170

08001b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <SystemInit+0x20>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <SystemInit+0x20>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b8c:	f7ff ffea 	bl	8001b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	@ (8001bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <LoopForever+0xe>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd4 <LoopForever+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f002 ffdf 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bba:	f7ff f9b1 	bl	8000f20 <main>

08001bbe <LoopForever>:

LoopForever:
    b LoopForever
 8001bbe:	e7fe      	b.n	8001bbe <LoopForever>
  ldr   r0, =_estack
 8001bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bcc:	08004c0c 	.word	0x08004c0c
  ldr r2, =_sbss
 8001bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bd4:	2000043c 	.word	0x2000043c

08001bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_2_IRQHandler>

08001bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f939 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f80e 	bl	8001c0c <HAL_InitTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	e001      	b.n	8001c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bfc:	f7ff fe60 	bl	80018c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c00:	79fb      	ldrb	r3, [r7, #7]

}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_InitTick+0x68>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d022      	beq.n	8001c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_InitTick+0x6c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <HAL_InitTick+0x68>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f944 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10f      	bne.n	8001c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	d809      	bhi.n	8001c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c46:	2200      	movs	r2, #0
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4e:	f000 f910 	bl	8001e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_InitTick+0x70>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e007      	b.n	8001c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e004      	b.n	8001c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e001      	b.n	8001c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000068 	.word	0x20000068
 8001c78:	20000060 	.word	0x20000060
 8001c7c:	20000064 	.word	0x20000064

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a03      	ldr	r2, [pc, #12]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000438 	.word	0x20000438
 8001ca0:	20000068 	.word	0x20000068

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000438 	.word	0x20000438

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	@ (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff40 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff90 	bl	8001db0 <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5f 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff33 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa4 	bl	8001e18 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eea:	e15a      	b.n	80021a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 814c 	beq.w	800219c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d005      	beq.n	8001f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d130      	bne.n	8001f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f52:	2201      	movs	r2, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 0201 	and.w	r2, r3, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d017      	beq.n	8001fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d123      	bne.n	800200e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0203 	and.w	r2, r3, #3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a6 	beq.w	800219c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002050:	4b5b      	ldr	r3, [pc, #364]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	4a5a      	ldr	r2, [pc, #360]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6613      	str	r3, [r2, #96]	@ 0x60
 800205c:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 800205e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002068:	4a56      	ldr	r2, [pc, #344]	@ (80021c4 <HAL_GPIO_Init+0x2e8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002092:	d01f      	beq.n	80020d4 <HAL_GPIO_Init+0x1f8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d019      	beq.n	80020d0 <HAL_GPIO_Init+0x1f4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a4b      	ldr	r2, [pc, #300]	@ (80021cc <HAL_GPIO_Init+0x2f0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a4a      	ldr	r2, [pc, #296]	@ (80021d0 <HAL_GPIO_Init+0x2f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1ec>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a49      	ldr	r2, [pc, #292]	@ (80021d4 <HAL_GPIO_Init+0x2f8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1e8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a48      	ldr	r2, [pc, #288]	@ (80021d8 <HAL_GPIO_Init+0x2fc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1e4>
 80020bc:	2305      	movs	r3, #5
 80020be:	e00a      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020c0:	2306      	movs	r3, #6
 80020c2:	e008      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020c8:	2303      	movs	r3, #3
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020d4:	2300      	movs	r3, #0
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e6:	4937      	ldr	r1, [pc, #220]	@ (80021c4 <HAL_GPIO_Init+0x2e8>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f4:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_GPIO_Init+0x300>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002118:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <HAL_GPIO_Init+0x300>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800211e:	4b2f      	ldr	r3, [pc, #188]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002142:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_GPIO_Init+0x300>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <HAL_GPIO_Init+0x300>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002172:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_GPIO_Init+0x300>)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f ae9d 	bne.w	8001eec <HAL_GPIO_Init+0x10>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	48000400 	.word	0x48000400
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	48001000 	.word	0x48001000
 80021d8:	48001400 	.word	0x48001400
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f806 	bl	8002240 <HAL_GPIO_EXTI_Callback>
  }
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40010400 	.word	0x40010400

08002240 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d141      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002266:	4b4b      	ldr	r3, [pc, #300]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002272:	d131      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002274:	4b47      	ldr	r3, [pc, #284]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800227a:	4a46      	ldr	r2, [pc, #280]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002280:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002284:	4b43      	ldr	r3, [pc, #268]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800228c:	4a41      	ldr	r2, [pc, #260]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002292:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002294:	4b40      	ldr	r3, [pc, #256]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2232      	movs	r2, #50	@ 0x32
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	4a3f      	ldr	r2, [pc, #252]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022aa:	e002      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b2:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022be:	d102      	bne.n	80022c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f2      	bne.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c6:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d2:	d158      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e057      	b.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022de:	4a2d      	ldr	r2, [pc, #180]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022e8:	e04d      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f0:	d141      	bne.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f2:	4b28      	ldr	r3, [pc, #160]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fe:	d131      	bne.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002300:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002306:	4a23      	ldr	r2, [pc, #140]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002310:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002318:	4a1e      	ldr	r2, [pc, #120]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800231e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2232      	movs	r2, #50	@ 0x32
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002336:	e002      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3b01      	subs	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234a:	d102      	bne.n	8002352 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f2      	bne.n	8002338 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235e:	d112      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e011      	b.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002374:	e007      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002376:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800237e:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002380:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002384:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40007000 	.word	0x40007000
 8002398:	20000060 	.word	0x20000060
 800239c:	431bde83 	.word	0x431bde83

080023a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ae:	6093      	str	r3, [r2, #8]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e2fe      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d075      	beq.n	80024ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	4b97      	ldr	r3, [pc, #604]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e8:	4b94      	ldr	r3, [pc, #592]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d102      	bne.n	80023fe <HAL_RCC_OscConfig+0x3e>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_OscConfig+0x44>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d10b      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	4b8d      	ldr	r3, [pc, #564]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d05b      	beq.n	80024c8 <HAL_RCC_OscConfig+0x108>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d157      	bne.n	80024c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e2d9      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x74>
 8002426:	4b85      	ldr	r3, [pc, #532]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a84      	ldr	r2, [pc, #528]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b7f      	ldr	r3, [pc, #508]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7e      	ldr	r2, [pc, #504]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b7c      	ldr	r3, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7b      	ldr	r2, [pc, #492]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002458:	4b78      	ldr	r3, [pc, #480]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a77      	ldr	r2, [pc, #476]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b75      	ldr	r3, [pc, #468]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a74      	ldr	r2, [pc, #464]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff fc14 	bl	8001ca4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fc10 	bl	8001ca4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e29e      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002492:	4b6a      	ldr	r3, [pc, #424]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xc0>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fc00 	bl	8001ca4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fbfc 	bl	8001ca4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	@ 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e28a      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ba:	4b60      	ldr	r3, [pc, #384]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0xe8>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d075      	beq.n	80025c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b59      	ldr	r3, [pc, #356]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e0:	4b56      	ldr	r3, [pc, #344]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0x136>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_OscConfig+0x13c>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d11f      	bne.n	800253c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fc:	4b4f      	ldr	r3, [pc, #316]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x154>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e25d      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b49      	ldr	r3, [pc, #292]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	4946      	ldr	r1, [pc, #280]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002528:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fb6d 	bl	8001c0c <HAL_InitTick>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d043      	beq.n	80025c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e249      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b3d      	ldr	r3, [pc, #244]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a3c      	ldr	r2, [pc, #240]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff fba8 	bl	8001ca4 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7ff fba4 	bl	8001ca4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e232      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256a:	4b34      	ldr	r3, [pc, #208]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b31      	ldr	r3, [pc, #196]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	492d      	ldr	r1, [pc, #180]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
 800258a:	e01a      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258c:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2a      	ldr	r2, [pc, #168]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff fb84 	bl	8001ca4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7ff fb80 	bl	8001ca4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e20e      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1e0>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d041      	beq.n	8002652 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01c      	beq.n	8002610 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80025d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025dc:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7ff fb5d 	bl	8001ca4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ee:	f7ff fb59 	bl	8001ca4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1e7      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ef      	beq.n	80025ee <HAL_RCC_OscConfig+0x22e>
 800260e:	e020      	b.n	8002652 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_RCC_OscConfig+0x27c>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7ff fb40 	bl	8001ca4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002626:	e00d      	b.n	8002644 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff fb3c 	bl	8001ca4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d906      	bls.n	8002644 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1ca      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	20000064 	.word	0x20000064
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b8c      	ldr	r3, [pc, #560]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ea      	bne.n	8002628 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002664:	4b84      	ldr	r3, [pc, #528]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x2b4>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x2b6>
 8002674:	2300      	movs	r3, #0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b7f      	ldr	r3, [pc, #508]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267e:	4a7e      	ldr	r2, [pc, #504]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	@ 0x58
 8002686:	4b7c      	ldr	r3, [pc, #496]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	4b79      	ldr	r3, [pc, #484]	@ (800287c <HAL_RCC_OscConfig+0x4bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a2:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCC_OscConfig+0x4bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	@ (800287c <HAL_RCC_OscConfig+0x4bc>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7ff faf9 	bl	8001ca4 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7ff faf5 	bl	8001ca4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e183      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c8:	4b6c      	ldr	r3, [pc, #432]	@ (800287c <HAL_RCC_OscConfig+0x4bc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d108      	bne.n	80026ee <HAL_RCC_OscConfig+0x32e>
 80026dc:	4b66      	ldr	r3, [pc, #408]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	4a65      	ldr	r2, [pc, #404]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ec:	e024      	b.n	8002738 <HAL_RCC_OscConfig+0x378>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d110      	bne.n	8002718 <HAL_RCC_OscConfig+0x358>
 80026f6:	4b60      	ldr	r3, [pc, #384]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002706:	4b5c      	ldr	r3, [pc, #368]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270c:	4a5a      	ldr	r2, [pc, #360]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002716:	e00f      	b.n	8002738 <HAL_RCC_OscConfig+0x378>
 8002718:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	4a56      	ldr	r2, [pc, #344]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7ff fab0 	bl	8001ca4 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7ff faac 	bl	8001ca4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e138      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275e:	4b46      	ldr	r3, [pc, #280]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ed      	beq.n	8002748 <HAL_RCC_OscConfig+0x388>
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff fa99 	bl	8001ca4 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7ff fa95 	bl	8001ca4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e121      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ed      	bne.n	8002776 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4a34      	ldr	r2, [pc, #208]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03c      	beq.n	8002832 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01c      	beq.n	80027fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80027c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff fa68 	bl	8001ca4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d8:	f7ff fa64 	bl	8001ca4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0f2      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80027ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ef      	beq.n	80027d8 <HAL_RCC_OscConfig+0x418>
 80027f8:	e01b      	b.n	8002832 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002800:	4a1d      	ldr	r2, [pc, #116]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7ff fa4b 	bl	8001ca4 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002812:	f7ff fa47 	bl	8001ca4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0d5      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ef      	bne.n	8002812 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80c9 	beq.w	80029ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b0c      	cmp	r3, #12
 8002846:	f000 8083 	beq.w	8002950 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d15e      	bne.n	8002910 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a08      	ldr	r2, [pc, #32]	@ (8002878 <HAL_RCC_OscConfig+0x4b8>)
 8002858:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff fa21 	bl	8001ca4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	e00c      	b.n	8002880 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7ff fa1d 	bl	8001ca4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d905      	bls.n	8002880 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0ab      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	4b55      	ldr	r3, [pc, #340]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ec      	bne.n	8002866 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288c:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <HAL_RCC_OscConfig+0x61c>)
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6a11      	ldr	r1, [r2, #32]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800289c:	3a01      	subs	r2, #1
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80028a6:	0212      	lsls	r2, r2, #8
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0552      	lsls	r2, r2, #21
 80028b4:	4311      	orrs	r1, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028ba:	0852      	lsrs	r2, r2, #1
 80028bc:	3a01      	subs	r2, #1
 80028be:	0652      	lsls	r2, r2, #25
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028c6:	06d2      	lsls	r2, r2, #27
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4943      	ldr	r1, [pc, #268]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a40      	ldr	r2, [pc, #256]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a3d      	ldr	r2, [pc, #244]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff f9dc 	bl	8001ca4 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7ff f9d8 	bl	8001ca4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e066      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x530>
 800290e:	e05e      	b.n	80029ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a30      	ldr	r2, [pc, #192]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff f9c2 	bl	8001ca4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f9be 	bl	8001ca4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04c      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002936:	4b28      	ldr	r3, [pc, #160]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002942:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	4924      	ldr	r1, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 8002948:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <HAL_RCC_OscConfig+0x620>)
 800294a:	4013      	ands	r3, r2
 800294c:	60cb      	str	r3, [r1, #12]
 800294e:	e03e      	b.n	80029ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e039      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800295c:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_RCC_OscConfig+0x618>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d12c      	bne.n	80029ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	3b01      	subs	r3, #1
 800297c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d123      	bne.n	80029ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d11b      	bne.n	80029ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d113      	bne.n	80029ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	019f800c 	.word	0x019f800c
 80029e0:	feeefffc 	.word	0xfeeefffc

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e11e      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b91      	ldr	r3, [pc, #580]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 020f 	bic.w	r2, r3, #15
 8002a12:	498c      	ldr	r1, [pc, #560]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b8a      	ldr	r3, [pc, #552]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e106      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d073      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d129      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a40:	4b81      	ldr	r3, [pc, #516]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0f4      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a50:	f000 f966 	bl	8002d20 <RCC_GetSysClockFreqFromPLLSource>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4a7c      	ldr	r2, [pc, #496]	@ (8002c4c <HAL_RCC_ClockConfig+0x268>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d93f      	bls.n	8002ade <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d033      	beq.n	8002ade <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d12f      	bne.n	8002ade <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7e:	4b72      	ldr	r3, [pc, #456]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a86:	4a70      	ldr	r2, [pc, #448]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e024      	b.n	8002ade <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0c6      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aac:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0be      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002abc:	f000 f8ce 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4a61      	ldr	r2, [pc, #388]	@ (8002c4c <HAL_RCC_ClockConfig+0x268>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d909      	bls.n	8002ade <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aca:	4b5f      	ldr	r3, [pc, #380]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b5a      	ldr	r3, [pc, #360]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4957      	ldr	r1, [pc, #348]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7ff f8d8 	bl	8001ca4 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7ff f8d4 	bl	8001ca4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e095      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b38:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b50:	4b3d      	ldr	r3, [pc, #244]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b58:	4a3b      	ldr	r2, [pc, #236]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b39      	ldr	r3, [pc, #228]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4936      	ldr	r1, [pc, #216]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b80      	cmp	r3, #128	@ 0x80
 8002b78:	d105      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b7a:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4a32      	ldr	r2, [pc, #200]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002b80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b86:	4b2f      	ldr	r3, [pc, #188]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d21d      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 020f 	bic.w	r2, r3, #15
 8002b9c:	4929      	ldr	r1, [pc, #164]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f87e 	bl	8001ca4 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff f87a 	bl	8001ca4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e03b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	@ (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ed      	bne.n	8002bac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4917      	ldr	r1, [pc, #92]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	490f      	ldr	r1, [pc, #60]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0e:	f000 f825 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b0c      	ldr	r3, [pc, #48]	@ (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490c      	ldr	r1, [pc, #48]	@ (8002c50 <HAL_RCC_ClockConfig+0x26c>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x270>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_RCC_ClockConfig+0x274>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe ffea 	bl	8001c0c <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	04c4b400 	.word	0x04c4b400
 8002c50:	08004bf4 	.word	0x08004bf4
 8002c54:	20000060 	.word	0x20000060
 8002c58:	20000064 	.word	0x20000064

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c62:	4b2c      	ldr	r3, [pc, #176]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e047      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c74:	4b27      	ldr	r3, [pc, #156]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e03e      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c86:	4b23      	ldr	r3, [pc, #140]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d136      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4a16      	ldr	r2, [pc, #88]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cba:	68d2      	ldr	r2, [r2, #12]
 8002cbc:	0a12      	lsrs	r2, r2, #8
 8002cbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
      break;
 8002cc8:	e00c      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cca:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4a10      	ldr	r2, [pc, #64]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	0a12      	lsrs	r2, r2, #8
 8002cd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
      break;
 8002ce2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0e5b      	lsrs	r3, r3, #25
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e001      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d04:	693b      	ldr	r3, [r7, #16]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	016e3600 	.word	0x016e3600

08002d20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d10c      	bne.n	8002d5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d44:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d4e:	68d2      	ldr	r2, [r2, #12]
 8002d50:	0a12      	lsrs	r2, r2, #8
 8002d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
    break;
 8002d5c:	e00c      	b.n	8002d78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5e:	4a12      	ldr	r2, [pc, #72]	@ (8002da8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	0a12      	lsrs	r2, r2, #8
 8002d6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
    break;
 8002d76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0e5b      	lsrs	r3, r3, #25
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d92:	687b      	ldr	r3, [r7, #4]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40021000 	.word	0x40021000
 8002da4:	016e3600 	.word	0x016e3600
 8002da8:	00f42400 	.word	0x00f42400

08002dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e049      	b.n	8002e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fd98 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 ff68 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04c      	b.n	8002f0e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a26      	ldr	r2, [pc, #152]	@ (8002f1c <HAL_TIM_Base_Start+0xc0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8e:	d01d      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a22      	ldr	r2, [pc, #136]	@ (8002f20 <HAL_TIM_Base_Start+0xc4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a21      	ldr	r2, [pc, #132]	@ (8002f24 <HAL_TIM_Base_Start+0xc8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f28 <HAL_TIM_Base_Start+0xcc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <HAL_TIM_Base_Start+0xd0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <HAL_TIM_Base_Start+0xd4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_Base_Start+0x70>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <HAL_TIM_Base_Start+0xd8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d115      	bne.n	8002ef8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_TIM_Base_Start+0xdc>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d015      	beq.n	8002f0a <HAL_TIM_Base_Start+0xae>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d011      	beq.n	8002f0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	e008      	b.n	8002f0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e000      	b.n	8002f0c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40000c00 	.word	0x40000c00
 8002f2c:	40013400 	.word	0x40013400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40015000 	.word	0x40015000
 8002f38:	00010007 	.word	0x00010007

08002f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e054      	b.n	8002ffe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a26      	ldr	r2, [pc, #152]	@ (800300c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d022      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d01d      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_TIM_Base_Start_IT+0xe0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	@ (8003020 <HAL_TIM_Base_Start_IT+0xe4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_TIM_Base_Start_IT+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d115      	bne.n	8002fe8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <HAL_TIM_Base_Start_IT+0xec>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d015      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0xbe>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd4:	d011      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe6:	e008      	b.n	8002ffa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e000      	b.n	8002ffc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40013400 	.word	0x40013400
 8003020:	40014000 	.word	0x40014000
 8003024:	40015000 	.word	0x40015000
 8003028:	00010007 	.word	0x00010007

0800302c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e049      	b.n	80030d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f841 	bl	80030da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 fe28 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_TIM_PWM_Start+0x24>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e03c      	b.n	800318e <HAL_TIM_PWM_Start+0x9e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d109      	bne.n	800312e <HAL_TIM_PWM_Start+0x3e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e02f      	b.n	800318e <HAL_TIM_PWM_Start+0x9e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d109      	bne.n	8003148 <HAL_TIM_PWM_Start+0x58>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e022      	b.n	800318e <HAL_TIM_PWM_Start+0x9e>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d109      	bne.n	8003162 <HAL_TIM_PWM_Start+0x72>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	e015      	b.n	800318e <HAL_TIM_PWM_Start+0x9e>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b10      	cmp	r3, #16
 8003166:	d109      	bne.n	800317c <HAL_TIM_PWM_Start+0x8c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e008      	b.n	800318e <HAL_TIM_PWM_Start+0x9e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0a6      	b.n	80032e4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start+0xb6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a4:	e023      	b.n	80031ee <HAL_TIM_PWM_Start+0xfe>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start+0xc6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b4:	e01b      	b.n	80031ee <HAL_TIM_PWM_Start+0xfe>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0xd6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c4:	e013      	b.n	80031ee <HAL_TIM_PWM_Start+0xfe>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xe6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_PWM_Start+0xfe>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xf6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e4:	e003      	b.n	80031ee <HAL_TIM_PWM_Start+0xfe>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f9dc 	bl	80045b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3a      	ldr	r2, [pc, #232]	@ (80032ec <HAL_TIM_PWM_Start+0x1fc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_PWM_Start+0x148>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a39      	ldr	r2, [pc, #228]	@ (80032f0 <HAL_TIM_PWM_Start+0x200>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_TIM_PWM_Start+0x148>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a37      	ldr	r2, [pc, #220]	@ (80032f4 <HAL_TIM_PWM_Start+0x204>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_PWM_Start+0x148>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a36      	ldr	r2, [pc, #216]	@ (80032f8 <HAL_TIM_PWM_Start+0x208>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_PWM_Start+0x148>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a34      	ldr	r2, [pc, #208]	@ (80032fc <HAL_TIM_PWM_Start+0x20c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_PWM_Start+0x148>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a33      	ldr	r2, [pc, #204]	@ (8003300 <HAL_TIM_PWM_Start+0x210>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_TIM_PWM_Start+0x14c>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_TIM_PWM_Start+0x14e>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a25      	ldr	r2, [pc, #148]	@ (80032ec <HAL_TIM_PWM_Start+0x1fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003264:	d01d      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <HAL_TIM_PWM_Start+0x214>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <HAL_TIM_PWM_Start+0x218>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a23      	ldr	r2, [pc, #140]	@ (800330c <HAL_TIM_PWM_Start+0x21c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <HAL_TIM_PWM_Start+0x200>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <HAL_TIM_PWM_Start+0x204>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x1b2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <HAL_TIM_PWM_Start+0x210>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d115      	bne.n	80032ce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_TIM_PWM_Start+0x220>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d015      	beq.n	80032e0 <HAL_TIM_PWM_Start+0x1f0>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ba:	d011      	beq.n	80032e0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032cc:	e008      	b.n	80032e0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e000      	b.n	80032e2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800
 8003300:	40015000 	.word	0x40015000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	00010007 	.word	0x00010007

08003314 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e097      	b.n	8003458 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fe fb37 	bl	80019b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003358:	f023 0307 	bic.w	r3, r3, #7
 800335c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 fca9 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003396:	f023 0303 	bic.w	r3, r3, #3
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	4313      	orrs	r3, r2
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80033b4:	f023 030c 	bic.w	r3, r3, #12
 80033b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	4313      	orrs	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	011a      	lsls	r2, r3, #4
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	031b      	lsls	r3, r3, #12
 80033e4:	4313      	orrs	r3, r2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4313      	orrs	r3, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003470:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003478:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003480:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003488:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d110      	bne.n	80034b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003496:	7b7b      	ldrb	r3, [r7, #13]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d001      	beq.n	80034a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e069      	b.n	8003574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b0:	e031      	b.n	8003516 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d110      	bne.n	80034da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034be:	7b3b      	ldrb	r3, [r7, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d001      	beq.n	80034c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e055      	b.n	8003574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034d8:	e01d      	b.n	8003516 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e0:	7bbb      	ldrb	r3, [r7, #14]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e6:	7b7b      	ldrb	r3, [r7, #13]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034ec:	7b3b      	ldrb	r3, [r7, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03e      	b.n	8003574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_TIM_Encoder_Start+0xc4>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d008      	beq.n	8003534 <HAL_TIM_Encoder_Start+0xd4>
 8003522:	e00f      	b.n	8003544 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f841 	bl	80045b4 <TIM_CCxChannelCmd>
      break;
 8003532:	e016      	b.n	8003562 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	2104      	movs	r1, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f001 f839 	bl	80045b4 <TIM_CCxChannelCmd>
      break;
 8003542:	e00e      	b.n	8003562 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f831 	bl	80045b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	2104      	movs	r1, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f001 f82a 	bl	80045b4 <TIM_CCxChannelCmd>
      break;
 8003560:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0202 	mvn.w	r2, #2
 80035b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fb5c 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fb4e 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fb5f 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fb36 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fb28 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb39 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0208 	mvn.w	r2, #8
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2204      	movs	r2, #4
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fb10 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fb02 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb13 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d020      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0210 	mvn.w	r2, #16
 8003694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2208      	movs	r2, #8
 800369a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 faea 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80036b0:	e005      	b.n	80036be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fadc 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 faed 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0201 	mvn.w	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd ff52 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f001 f8a9 	bl	8004868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f001 f8a1 	bl	800487c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 faa7 	bl	8003cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0220 	mvn.w	r2, #32
 800377a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 f869 	bl	8004854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800379e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f001 f875 	bl	8004890 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80037c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f001 f86d 	bl	80048a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 f865 	bl	80048b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f001 f85d 	bl	80048cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003836:	2302      	movs	r3, #2
 8003838:	e0ff      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b14      	cmp	r3, #20
 8003846:	f200 80f0 	bhi.w	8003a2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800384a:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	080038a5 	.word	0x080038a5
 8003854:	08003a2b 	.word	0x08003a2b
 8003858:	08003a2b 	.word	0x08003a2b
 800385c:	08003a2b 	.word	0x08003a2b
 8003860:	080038e5 	.word	0x080038e5
 8003864:	08003a2b 	.word	0x08003a2b
 8003868:	08003a2b 	.word	0x08003a2b
 800386c:	08003a2b 	.word	0x08003a2b
 8003870:	08003927 	.word	0x08003927
 8003874:	08003a2b 	.word	0x08003a2b
 8003878:	08003a2b 	.word	0x08003a2b
 800387c:	08003a2b 	.word	0x08003a2b
 8003880:	08003967 	.word	0x08003967
 8003884:	08003a2b 	.word	0x08003a2b
 8003888:	08003a2b 	.word	0x08003a2b
 800388c:	08003a2b 	.word	0x08003a2b
 8003890:	080039a9 	.word	0x080039a9
 8003894:	08003a2b 	.word	0x08003a2b
 8003898:	08003a2b 	.word	0x08003a2b
 800389c:	08003a2b 	.word	0x08003a2b
 80038a0:	080039e9 	.word	0x080039e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fabc 	bl	8003e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	619a      	str	r2, [r3, #24]
      break;
 80038e2:	e0a5      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fb36 	bl	8003f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800390e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	619a      	str	r2, [r3, #24]
      break;
 8003924:	e084      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fba9 	bl	8004084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0208 	orr.w	r2, r2, #8
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0204 	bic.w	r2, r2, #4
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	61da      	str	r2, [r3, #28]
      break;
 8003964:	e064      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fc1b 	bl	80041a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69d9      	ldr	r1, [r3, #28]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	61da      	str	r2, [r3, #28]
      break;
 80039a6:	e043      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fc8e 	bl	80042d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039e6:	e023      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fcd8 	bl	80043a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	021a      	lsls	r2, r3, #8
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_ConfigClockSource+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0f6      	b.n	8003c4e <HAL_TIM_ConfigClockSource+0x20a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6f      	ldr	r2, [pc, #444]	@ (8003c58 <HAL_TIM_ConfigClockSource+0x214>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f000 80c1 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003aa0:	4a6d      	ldr	r2, [pc, #436]	@ (8003c58 <HAL_TIM_ConfigClockSource+0x214>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f200 80c6 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003aa8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c5c <HAL_TIM_ConfigClockSource+0x218>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f000 80b9 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c5c <HAL_TIM_ConfigClockSource+0x218>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f200 80be 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ab8:	4a69      	ldr	r2, [pc, #420]	@ (8003c60 <HAL_TIM_ConfigClockSource+0x21c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f000 80b1 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003ac0:	4a67      	ldr	r2, [pc, #412]	@ (8003c60 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f200 80b6 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac8:	4a66      	ldr	r2, [pc, #408]	@ (8003c64 <HAL_TIM_ConfigClockSource+0x220>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f000 80a9 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003ad0:	4a64      	ldr	r2, [pc, #400]	@ (8003c64 <HAL_TIM_ConfigClockSource+0x220>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f200 80ae 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad8:	4a63      	ldr	r2, [pc, #396]	@ (8003c68 <HAL_TIM_ConfigClockSource+0x224>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f000 80a1 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003ae0:	4a61      	ldr	r2, [pc, #388]	@ (8003c68 <HAL_TIM_ConfigClockSource+0x224>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f200 80a6 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae8:	4a60      	ldr	r2, [pc, #384]	@ (8003c6c <HAL_TIM_ConfigClockSource+0x228>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f000 8099 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003af0:	4a5e      	ldr	r2, [pc, #376]	@ (8003c6c <HAL_TIM_ConfigClockSource+0x228>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f200 809e 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003af8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003afc:	f000 8091 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003b00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b04:	f200 8096 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b0c:	f000 8089 	beq.w	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003b10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b14:	f200 808e 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b1c:	d03e      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0x158>
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b22:	f200 8087 	bhi.w	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2a:	f000 8086 	beq.w	8003c3a <HAL_TIM_ConfigClockSource+0x1f6>
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b32:	d87f      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b34:	2b70      	cmp	r3, #112	@ 0x70
 8003b36:	d01a      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x12a>
 8003b38:	2b70      	cmp	r3, #112	@ 0x70
 8003b3a:	d87b      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b3c:	2b60      	cmp	r3, #96	@ 0x60
 8003b3e:	d050      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x19e>
 8003b40:	2b60      	cmp	r3, #96	@ 0x60
 8003b42:	d877      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b44:	2b50      	cmp	r3, #80	@ 0x50
 8003b46:	d03c      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x17e>
 8003b48:	2b50      	cmp	r3, #80	@ 0x50
 8003b4a:	d873      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b4c:	2b40      	cmp	r3, #64	@ 0x40
 8003b4e:	d058      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x1be>
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	d86f      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b54:	2b30      	cmp	r3, #48	@ 0x30
 8003b56:	d064      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003b58:	2b30      	cmp	r3, #48	@ 0x30
 8003b5a:	d86b      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d060      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d867      	bhi.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d05c      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d05a      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x1de>
 8003b6c:	e062      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b7e:	f000 fcf9 	bl	8004574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	609a      	str	r2, [r3, #8]
      break;
 8003b9a:	e04f      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	f000 fce2 	bl	8004574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bbe:	609a      	str	r2, [r3, #8]
      break;
 8003bc0:	e03c      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 fc54 	bl	800447c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2150      	movs	r1, #80	@ 0x50
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fcad 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003be0:	e02c      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 fc73 	bl	80044da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2160      	movs	r1, #96	@ 0x60
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fc9d 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003c00:	e01c      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 fc34 	bl	800447c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2140      	movs	r1, #64	@ 0x40
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fc8d 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003c20:	e00c      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f000 fc84 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003c32:	e003      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      break;
 8003c38:	e000      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	00100070 	.word	0x00100070
 8003c5c:	00100060 	.word	0x00100060
 8003c60:	00100050 	.word	0x00100050
 8003c64:	00100040 	.word	0x00100040
 8003c68:	00100030 	.word	0x00100030
 8003c6c:	00100020 	.word	0x00100020

08003c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8003e04 <TIM_Base_SetConfig+0x144>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d017      	beq.n	8003d08 <TIM_Base_SetConfig+0x48>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cde:	d013      	beq.n	8003d08 <TIM_Base_SetConfig+0x48>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a49      	ldr	r2, [pc, #292]	@ (8003e08 <TIM_Base_SetConfig+0x148>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00f      	beq.n	8003d08 <TIM_Base_SetConfig+0x48>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a48      	ldr	r2, [pc, #288]	@ (8003e0c <TIM_Base_SetConfig+0x14c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <TIM_Base_SetConfig+0x48>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a47      	ldr	r2, [pc, #284]	@ (8003e10 <TIM_Base_SetConfig+0x150>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <TIM_Base_SetConfig+0x48>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a46      	ldr	r2, [pc, #280]	@ (8003e14 <TIM_Base_SetConfig+0x154>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0x48>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a45      	ldr	r2, [pc, #276]	@ (8003e18 <TIM_Base_SetConfig+0x158>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d108      	bne.n	8003d1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a39      	ldr	r2, [pc, #228]	@ (8003e04 <TIM_Base_SetConfig+0x144>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d023      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d28:	d01f      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a36      	ldr	r2, [pc, #216]	@ (8003e08 <TIM_Base_SetConfig+0x148>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01b      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a35      	ldr	r2, [pc, #212]	@ (8003e0c <TIM_Base_SetConfig+0x14c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d017      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a34      	ldr	r2, [pc, #208]	@ (8003e10 <TIM_Base_SetConfig+0x150>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a33      	ldr	r2, [pc, #204]	@ (8003e14 <TIM_Base_SetConfig+0x154>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00f      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a33      	ldr	r2, [pc, #204]	@ (8003e1c <TIM_Base_SetConfig+0x15c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a32      	ldr	r2, [pc, #200]	@ (8003e20 <TIM_Base_SetConfig+0x160>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d007      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a31      	ldr	r2, [pc, #196]	@ (8003e24 <TIM_Base_SetConfig+0x164>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_Base_SetConfig+0xaa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2c      	ldr	r2, [pc, #176]	@ (8003e18 <TIM_Base_SetConfig+0x158>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a18      	ldr	r2, [pc, #96]	@ (8003e04 <TIM_Base_SetConfig+0x144>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <TIM_Base_SetConfig+0x110>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <TIM_Base_SetConfig+0x154>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00f      	beq.n	8003dd0 <TIM_Base_SetConfig+0x110>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e1c <TIM_Base_SetConfig+0x15c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <TIM_Base_SetConfig+0x110>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <TIM_Base_SetConfig+0x160>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_Base_SetConfig+0x110>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <TIM_Base_SetConfig+0x164>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_Base_SetConfig+0x110>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a13      	ldr	r2, [pc, #76]	@ (8003e18 <TIM_Base_SetConfig+0x158>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d103      	bne.n	8003dd8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f023 0201 	bic.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	611a      	str	r2, [r3, #16]
  }
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40013400 	.word	0x40013400
 8003e18:	40015000 	.word	0x40015000
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800

08003e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f023 0201 	bic.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0302 	bic.w	r3, r3, #2
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a30      	ldr	r2, [pc, #192]	@ (8003f44 <TIM_OC1_SetConfig+0x11c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x88>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f48 <TIM_OC1_SetConfig+0x120>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x88>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a2e      	ldr	r2, [pc, #184]	@ (8003f4c <TIM_OC1_SetConfig+0x124>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x88>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <TIM_OC1_SetConfig+0x128>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x88>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f54 <TIM_OC1_SetConfig+0x12c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC1_SetConfig+0x88>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8003f58 <TIM_OC1_SetConfig+0x130>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10c      	bne.n	8003eca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0308 	bic.w	r3, r3, #8
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <TIM_OC1_SetConfig+0x11c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <TIM_OC1_SetConfig+0xd2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <TIM_OC1_SetConfig+0x120>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_OC1_SetConfig+0xd2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f4c <TIM_OC1_SetConfig+0x124>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_OC1_SetConfig+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f50 <TIM_OC1_SetConfig+0x128>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_OC1_SetConfig+0xd2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <TIM_OC1_SetConfig+0x12c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_OC1_SetConfig+0xd2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <TIM_OC1_SetConfig+0x130>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800
 8003f58:	40015000 	.word	0x40015000

08003f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 0210 	bic.w	r2, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0320 	bic.w	r3, r3, #32
 8003faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2c      	ldr	r2, [pc, #176]	@ (800406c <TIM_OC2_SetConfig+0x110>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_OC2_SetConfig+0x74>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004070 <TIM_OC2_SetConfig+0x114>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC2_SetConfig+0x74>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a2a      	ldr	r2, [pc, #168]	@ (8004074 <TIM_OC2_SetConfig+0x118>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10d      	bne.n	8003fec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a1f      	ldr	r2, [pc, #124]	@ (800406c <TIM_OC2_SetConfig+0x110>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <TIM_OC2_SetConfig+0xc0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <TIM_OC2_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00f      	beq.n	800401c <TIM_OC2_SetConfig+0xc0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <TIM_OC2_SetConfig+0x11c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <TIM_OC2_SetConfig+0xc0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <TIM_OC2_SetConfig+0x120>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <TIM_OC2_SetConfig+0xc0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <TIM_OC2_SetConfig+0x124>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_OC2_SetConfig+0xc0>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <TIM_OC2_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d113      	bne.n	8004044 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40013400 	.word	0x40013400
 8004074:	40015000 	.word	0x40015000
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004190 <TIM_OC3_SetConfig+0x10c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_OC3_SetConfig+0x72>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004194 <TIM_OC3_SetConfig+0x110>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_OC3_SetConfig+0x72>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a29      	ldr	r2, [pc, #164]	@ (8004198 <TIM_OC3_SetConfig+0x114>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10d      	bne.n	8004112 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1e      	ldr	r2, [pc, #120]	@ (8004190 <TIM_OC3_SetConfig+0x10c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <TIM_OC3_SetConfig+0xbe>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <TIM_OC3_SetConfig+0x110>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00f      	beq.n	8004142 <TIM_OC3_SetConfig+0xbe>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <TIM_OC3_SetConfig+0x118>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00b      	beq.n	8004142 <TIM_OC3_SetConfig+0xbe>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <TIM_OC3_SetConfig+0x11c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <TIM_OC3_SetConfig+0xbe>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1b      	ldr	r2, [pc, #108]	@ (80041a4 <TIM_OC3_SetConfig+0x120>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_OC3_SetConfig+0xbe>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <TIM_OC3_SetConfig+0x114>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d113      	bne.n	800416a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40013400 	.word	0x40013400
 8004198:	40015000 	.word	0x40015000
 800419c:	40014000 	.word	0x40014000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800

080041a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	031b      	lsls	r3, r3, #12
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <TIM_OC4_SetConfig+0x110>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_OC4_SetConfig+0x74>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2b      	ldr	r2, [pc, #172]	@ (80042bc <TIM_OC4_SetConfig+0x114>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_OC4_SetConfig+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2a      	ldr	r2, [pc, #168]	@ (80042c0 <TIM_OC4_SetConfig+0x118>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10d      	bne.n	8004238 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004236:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a1f      	ldr	r2, [pc, #124]	@ (80042b8 <TIM_OC4_SetConfig+0x110>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <TIM_OC4_SetConfig+0xc0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <TIM_OC4_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00f      	beq.n	8004268 <TIM_OC4_SetConfig+0xc0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <TIM_OC4_SetConfig+0x11c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_OC4_SetConfig+0xc0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a1d      	ldr	r2, [pc, #116]	@ (80042c8 <TIM_OC4_SetConfig+0x120>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_OC4_SetConfig+0xc0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a1c      	ldr	r2, [pc, #112]	@ (80042cc <TIM_OC4_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC4_SetConfig+0xc0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a17      	ldr	r2, [pc, #92]	@ (80042c0 <TIM_OC4_SetConfig+0x118>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d113      	bne.n	8004290 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800426e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004276:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	019b      	lsls	r3, r3, #6
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40015000 	.word	0x40015000
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400
 80042cc:	40014800 	.word	0x40014800

080042d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <TIM_OC5_SetConfig+0xbc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <TIM_OC5_SetConfig+0x82>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <TIM_OC5_SetConfig+0xc0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00f      	beq.n	8004352 <TIM_OC5_SetConfig+0x82>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <TIM_OC5_SetConfig+0xc4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_OC5_SetConfig+0x82>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <TIM_OC5_SetConfig+0xc8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <TIM_OC5_SetConfig+0x82>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a15      	ldr	r2, [pc, #84]	@ (800439c <TIM_OC5_SetConfig+0xcc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC5_SetConfig+0x82>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a14      	ldr	r2, [pc, #80]	@ (80043a0 <TIM_OC5_SetConfig+0xd0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d109      	bne.n	8004366 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004358:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40013400 	.word	0x40013400
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800
 80043a0:	40015000 	.word	0x40015000

080043a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	051b      	lsls	r3, r3, #20
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004464 <TIM_OC6_SetConfig+0xc0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <TIM_OC6_SetConfig+0x84>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <TIM_OC6_SetConfig+0xc4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00f      	beq.n	8004428 <TIM_OC6_SetConfig+0x84>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a18      	ldr	r2, [pc, #96]	@ (800446c <TIM_OC6_SetConfig+0xc8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_OC6_SetConfig+0x84>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <TIM_OC6_SetConfig+0xcc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC6_SetConfig+0x84>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a16      	ldr	r2, [pc, #88]	@ (8004474 <TIM_OC6_SetConfig+0xd0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC6_SetConfig+0x84>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <TIM_OC6_SetConfig+0xd4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800442e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	029b      	lsls	r3, r3, #10
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800
 8004478:	40015000 	.word	0x40015000

0800447c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 030a 	bic.w	r3, r3, #10
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044da:	b480      	push	{r7}
 80044dc:	b087      	sub	sp, #28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f023 0210 	bic.w	r2, r3, #16
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	031b      	lsls	r3, r3, #12
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	f043 0307 	orr.w	r3, r3, #7
 8004560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800458e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	021a      	lsls	r2, r3, #8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	431a      	orrs	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	609a      	str	r2, [r3, #8]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2201      	movs	r2, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	401a      	ands	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e074      	b.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a34      	ldr	r2, [pc, #208]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a33      	ldr	r2, [pc, #204]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a31      	ldr	r2, [pc, #196]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800465c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a21      	ldr	r2, [pc, #132]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d022      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004698:	d01d      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1f      	ldr	r2, [pc, #124]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d018      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a18      	ldr	r2, [pc, #96]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a11      	ldr	r2, [pc, #68]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10c      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40013400 	.word	0x40013400
 8004718:	40015000 	.word	0x40015000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40014000 	.word	0x40014000

0800472c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004744:	2302      	movs	r3, #2
 8004746:	e078      	b.n	800483a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1b      	ldr	r2, [pc, #108]	@ (800484c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	@ (8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d11c      	bne.n	8004828 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	051b      	lsls	r3, r3, #20
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40015000 	.word	0x40015000

08004854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80048f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8004900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004910:	eeb1 7a67 	vneg.f32	s14, s15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	edd3 7a08 	vldr	s15, [r3, #32]
 800491a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800491e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d006      	beq.n	8004944 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	330c      	adds	r3, #12
 800493a:	220c      	movs	r2, #12
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f912 	bl	8004b68 <memset>
  }

}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800494c:	b480      	push	{r7}
 800494e:	b08b      	sub	sp, #44	@ 0x2c
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	885b      	ldrh	r3, [r3, #2]
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800497e:	e013      	b.n	80049a8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	627a      	str	r2, [r7, #36]	@ 0x24
 8004986:	ed93 7a00 	vldr	s14, [r3]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	1d1a      	adds	r2, r3, #4
 800498e:	623a      	str	r2, [r7, #32]
 8004990:	edd3 7a00 	vldr	s15, [r3]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	1d1a      	adds	r2, r3, #4
 8004998:	61fa      	str	r2, [r7, #28]
 800499a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e8      	bne.n	8004980 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80049ae:	2300      	movs	r3, #0
 80049b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80049b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	372c      	adds	r7, #44	@ 0x2c
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	817b      	strh	r3, [r7, #10]
 80049d0:	4613      	mov	r3, r2
 80049d2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	897a      	ldrh	r2, [r7, #10]
 80049d8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	893a      	ldrh	r2, [r7, #8]
 80049de:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	605a      	str	r2, [r3, #4]
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b093      	sub	sp, #76	@ 0x4c
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	885b      	ldrh	r3, [r3, #2]
 8004a26:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	885b      	ldrh	r3, [r3, #2]
 8004a2c:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8004a2e:	2300      	movs	r3, #0
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a32:	8b7b      	ldrh	r3, [r7, #26]
 8004a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8004a40:	8b3b      	ldrh	r3, [r7, #24]
 8004a42:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8004a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a52:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8004a54:	8afb      	ldrh	r3, [r7, #22]
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8004a58:	e017      	b.n	8004a8a <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5c:	1d1a      	adds	r2, r3, #4
 8004a5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a60:	ed93 7a00 	vldr	s14, [r3]
 8004a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a76:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8004a7a:	8b3b      	ldrh	r3, [r7, #24]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a80:	4413      	add	r3, r2
 8004a82:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	3b01      	subs	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e4      	bne.n	8004a5a <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8004a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a98:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8004aa0:	8b3a      	ldrh	r2, [r7, #24]
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	4413      	add	r3, r2
 8004aac:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ca      	bne.n	8004a4a <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8004ab4:	8b3b      	ldrh	r3, [r7, #24]
 8004ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab8:	4413      	add	r3, r2
 8004aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8004abc:	8afb      	ldrh	r3, [r7, #22]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ac2:	4413      	add	r3, r2
 8004ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1b1      	bne.n	8004a36 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8004ad6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	374c      	adds	r7, #76	@ 0x4c
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b08b      	sub	sp, #44	@ 0x2c
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	885b      	ldrh	r3, [r3, #2]
 8004b06:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8004b08:	89fb      	ldrh	r3, [r7, #14]
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8004b1a:	89bb      	ldrh	r3, [r7, #12]
 8004b1c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8004b1e:	e00d      	b.n	8004b3c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	4413      	add	r3, r2
 8004b34:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ee      	bne.n	8004b20 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3301      	adds	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1dd      	bne.n	8004b10 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004b54:	2300      	movs	r3, #0
 8004b56:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8004b58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	372c      	adds	r7, #44	@ 0x2c
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <memset>:
 8004b68:	4402      	add	r2, r0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <memset+0xa>
 8004b70:	4770      	bx	lr
 8004b72:	f803 1b01 	strb.w	r1, [r3], #1
 8004b76:	e7f9      	b.n	8004b6c <memset+0x4>

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	@ (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f000 f826 	bl	8004bdc <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08004c04 	.word	0x08004c04
 8004bb4:	08004c04 	.word	0x08004c04
 8004bb8:	08004c04 	.word	0x08004c04
 8004bbc:	08004c08 	.word	0x08004c08

08004bc0 <memcpy>:
 8004bc0:	440a      	add	r2, r1
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bc8:	d100      	bne.n	8004bcc <memcpy+0xc>
 8004bca:	4770      	bx	lr
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	d1f9      	bne.n	8004bce <memcpy+0xe>
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
