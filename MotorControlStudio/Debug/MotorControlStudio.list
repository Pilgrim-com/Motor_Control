
MotorControlStudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dfc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005064  08005064  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005064  08005064  0000706c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005064  08005064  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005064  08005064  00006064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005068  08005068  00006068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800506c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000006c  080050d8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080050d8  00007558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d5a  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bd  00000000  00000000  0001adf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8f  00000000  00000000  0001e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d64  00000000  00000000  0001ef37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014255  00000000  00000000  00045c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f87ad  00000000  00000000  00059ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015269d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  001526e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00156760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004fbc 	.word	0x08004fbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	08004fbc 	.word	0x08004fbc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <KalmanInit>:
#include "Kalman.h"
#include "QEI.h"

// Initialize Kalman filter matrices and parameters
void KalmanInit(KALMAN *kalman, float32_t Matrix_A[16], float32_t Matrix_B[4], float32_t Q_scalar, float32_t R_scalar)
{
 8000a94:	b5b0      	push	{r4, r5, r7, lr}
 8000a96:	b0cc      	sub	sp, #304	@ 0x130
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000aa2:	6018      	str	r0, [r3, #0]
 8000aa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000aa8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000aac:	6019      	str	r1, [r3, #0]
 8000aae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ab2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000abc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ac0:	ed83 0a00 	vstr	s0, [r3]
 8000ac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ac8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000acc:	edc3 0a00 	vstr	s1, [r3]
	// set constance

	//Matrix A
	for (int i = 0; i < 16; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000ad6:	e018      	b.n	8000b0a <KalmanInit+0x76>
	{
		kalman->A_f32[i] = Matrix_A[i];
 8000ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000ae2:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000af0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b04:	3301      	adds	r3, #1
 8000b06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	dde2      	ble.n	8000ad8 <KalmanInit+0x44>
	}
	arm_mat_init_f32(&kalman->A, 4, 4, kalman->A_f32);
 8000b12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8000b20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	f004 f938 	bl	8004da2 <arm_mat_init_f32>
	//Matrix A transpose
	arm_mat_init_f32(&kalman->A_t, 4, 4, kalman->A_t_f32);
 8000b32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b36:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8000b40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3340      	adds	r3, #64	@ 0x40
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	2104      	movs	r1, #4
 8000b50:	f004 f927 	bl	8004da2 <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->A, &kalman->A_t);
 8000b54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8000b62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3388      	adds	r3, #136	@ 0x88
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4610      	mov	r0, r2
 8000b72:	f004 f9a8 	bl	8004ec6 <arm_mat_trans_f32>

	//Matrix B
	for(int i = 0; i<4; i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000b7c:	e019      	b.n	8000bb2 <KalmanInit+0x11e>
	{
		kalman->B_f32[i] = Matrix_B[i];
 8000b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000b88:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ba0:	3324      	adds	r3, #36	@ 0x24
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<4; i++)
 8000ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bac:	3301      	adds	r3, #1
 8000bae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000bb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	dde1      	ble.n	8000b7e <KalmanInit+0xea>
	}
	arm_mat_init_f32(&kalman->B, 4, 1, kalman->B_f32);
 8000bba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bbe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8000bc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bcc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3390      	adds	r3, #144	@ 0x90
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	f004 f8e3 	bl	8004da2 <arm_mat_init_f32>

	//Matrix G
	float32_t G_new[4] = {0, 0, 1, 0};
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000bec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000bf0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	memcpy(kalman->G_f32, G_new, sizeof(G_new));
 8000bfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	33d8      	adds	r3, #216	@ 0xd8
 8000c08:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 f9c6 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->G, 4, 1, kalman->G_f32);
 8000c14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c18:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8000c22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c26:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	33d8      	adds	r3, #216	@ 0xd8
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2104      	movs	r1, #4
 8000c32:	f004 f8b6 	bl	8004da2 <arm_mat_init_f32>

	//Matrix H
	float32_t H_new[4] = {1, 0, 0, 0};
 8000c36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000c3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	memcpy(kalman->H_f32, H_new, sizeof(H_new));
 8000c56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	33f0      	adds	r3, #240	@ 0xf0
 8000c62:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000c66:	2210      	movs	r2, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 f999 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->H, 1, 4, kalman->H_f32);
 8000c6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8000c7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c80:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	33f0      	adds	r3, #240	@ 0xf0
 8000c88:	2204      	movs	r2, #4
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	f004 f889 	bl	8004da2 <arm_mat_init_f32>

	//Matrix I
	float32_t I_new[16] =
 8000c90:	4bdb      	ldr	r3, [pc, #876]	@ (8001000 <KalmanInit+0x56c>)
 8000c92:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			1.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 1.0,
	};
	memcpy(kalman->I_f32, I_new, sizeof(I_new));
 8000cac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000cba:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8000cbe:	2240      	movs	r2, #64	@ 0x40
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 f96d 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->I, 4, 4,kalman->I_f32);
 8000cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 8000cd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cd8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	f004 f85c 	bl	8004da2 <arm_mat_init_f32>

	//Measurement
	float32_t Z_new[1] = {0};
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	memcpy(kalman->Z_f32, Z_new, sizeof(Z_new));
 8000cf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cf6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000d04:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->Z, 1, 1, kalman->Z_f32);
 8000d06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f503 70aa 	add.w	r0, r3, #340	@ 0x154
 8000d14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d18:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	f004 f83c 	bl	8004da2 <arm_mat_init_f32>

	//Matrix X
	float32_t X_init[4] = { 0 };
 8000d2a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
	memcpy(kalman->X_f32, X_init, sizeof(X_init));
 8000d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8000d46:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 f927 	bl	8004fa0 <memcpy>
	memcpy(kalman->X_pred_f32, X_init, sizeof(X_init));
 8000d52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000d60:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000d64:	2210      	movs	r2, #16
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 f91a 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->X, 4, 1, kalman->X_f32);
 8000d6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f503 70be 	add.w	r0, r3, #380	@ 0x17c
 8000d7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	f004 f809 	bl	8004da2 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->X_pred, 4, 1, kalman->X_pred_f32);
 8000d90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8000d9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000da2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000dac:	2201      	movs	r2, #1
 8000dae:	2104      	movs	r1, #4
 8000db0:	f003 fff7 	bl	8004da2 <arm_mat_init_f32>

	//Matrix P
	float32_t P_init[16] = {
 8000db4:	4b93      	ldr	r3, [pc, #588]	@ (8001004 <KalmanInit+0x570>)
 8000db6:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000dba:	461d      	mov	r5, r3
 8000dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    100.0, 0.0, 0.0, 0.0,
	    0.0, 100.0, 0.0, 0.0,
	    0.0, 0.0, 100.0, 0.0,
	    0.0, 0.0, 0.0, 100.0
	};
	memcpy(kalman->P_f32, P_init, sizeof(P_init));
 8000dd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dd4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000dde:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8000de2:	2240      	movs	r2, #64	@ 0x40
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f8db 	bl	8004fa0 <memcpy>
	memcpy(kalman->P_pred_f32, P_init, sizeof(P_init));
 8000dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8000df8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8000dfc:	2240      	movs	r2, #64	@ 0x40
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 f8ce 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->P, 4, 4, kalman->P_f32);
 8000e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e08:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f503 7003 	add.w	r0, r3, #524	@ 0x20c
 8000e12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e20:	2204      	movs	r2, #4
 8000e22:	2104      	movs	r1, #4
 8000e24:	f003 ffbd 	bl	8004da2 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->P_pred, 4, 4, kalman->P_pred_f32);
 8000e28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8000e36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8000e44:	2204      	movs	r2, #4
 8000e46:	2104      	movs	r1, #4
 8000e48:	f003 ffab 	bl	8004da2 <arm_mat_init_f32>

	//Matrix K (kalman gain)
	float32_t K_new[4] = {0};
 8000e4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
	memcpy(kalman->K_f32, K_new, sizeof(K_new));
 8000e5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8000e68:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 f896 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->K, 4, 1, kalman->K_f32);
 8000e74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f503 700b 	add.w	r0, r3, #556	@ 0x22c
 8000e82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8000e90:	2201      	movs	r2, #1
 8000e92:	2104      	movs	r1, #4
 8000e94:	f003 ff85 	bl	8004da2 <arm_mat_init_f32>

	//Matrix Q
	float32_t Q_new[16] =
 8000e98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ea0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000ea4:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ecc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ee8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000eec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000ef0:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000efc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
 8000f06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
 8000f14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
 8000f22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000f3c:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000f88:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
			Q_scalar, 0.0, 0.0, 0.0,
			0.0, Q_scalar, 0.0, 0.0,
			0.0, 0.0, Q_scalar, 0.0,
			0.0, 0.0, 0.0, Q_scalar
	};
	memcpy(kalman->Q_f32, Q_new, sizeof(Q_new));
 8000f90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000f9e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000fa2:	2240      	movs	r2, #64	@ 0x40
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fffb 	bl	8004fa0 <memcpy>
	arm_mat_init_f32(&kalman->Q, 4, 4, kalman->Q_f32);
 8000faa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 8000fb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	2104      	movs	r1, #4
 8000fca:	f003 feea 	bl	8004da2 <arm_mat_init_f32>

	//MatrixR
	float32_t R_new[1] = {R_scalar};
 8000fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000fd6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000fda:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	601a      	str	r2, [r3, #0]
	memcpy(kalman->R_f32, R_new, sizeof(R_new));
 8000fe2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fe6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8000ff0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000ff4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e004      	b.n	8001008 <KalmanInit+0x574>
 8000ffe:	bf00      	nop
 8001000:	08004fd4 	.word	0x08004fd4
 8001004:	08005014 	.word	0x08005014
	arm_mat_init_f32(&kalman->R, 1, 1, kalman->R_f32);
 8001008:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800100c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001016:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800101a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001024:	2201      	movs	r2, #1
 8001026:	2101      	movs	r1, #1
 8001028:	f003 febb 	bl	8004da2 <arm_mat_init_f32>

	//Matrix of contol input
	float32_t U_new[1] = {0.0};
 800102c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001030:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
	memcpy(kalman->U_f32, U_new, sizeof(U_new));
 800103a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800103e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001048:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800104c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 8001054:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001058:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
 8001062:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001066:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001070:	2201      	movs	r2, #1
 8001072:	2101      	movs	r1, #1
 8001074:	f003 fe95 	bl	8004da2 <arm_mat_init_f32>

}
 8001078:	bf00      	nop
 800107a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	bf00      	nop

08001084 <KalmanPrediction>:

// Prediction Step
void KalmanPrediction(KALMAN *kalman, float32_t control_input)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09a      	sub	sp, #104	@ 0x68
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	ed87 0a00 	vstr	s0, [r7]
    // Update control input U
    kalman->U_f32[0] = control_input;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
    arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80010a4:	2201      	movs	r2, #1
 80010a6:	2101      	movs	r1, #1
 80010a8:	f003 fe7b 	bl	8004da2 <arm_mat_init_f32>
    // Temporary matrices for intermediate results
    arm_matrix_instance_f32 temp1, temp2;
    float32_t temp1_data[4], temp2_data[16];

    // Step 1: X_pred = A * X + B * U
    arm_mat_init_f32(&temp1, 4, 1, temp1_data);
 80010ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010b0:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80010b4:	2201      	movs	r2, #1
 80010b6:	2104      	movs	r1, #4
 80010b8:	f003 fe73 	bl	8004da2 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->A, &kalman->X, &temp1);  // temp1 = A * X
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80010c8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80010cc:	4619      	mov	r1, r3
 80010ce:	f003 fe80 	bl	8004dd2 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kalman->B, &kalman->U, &kalman->X_pred);  // X_pred = B * U
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80010e4:	461a      	mov	r2, r3
 80010e6:	f003 fe74 	bl	8004dd2 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp1, &kalman->X_pred, &kalman->X_pred);  // X_pred = A*X + B*U
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 71c2 	add.w	r1, r3, #388	@ 0x184
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 80010f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fe16 	bl	8004d2c <arm_mat_add_f32>

    // Step 2: P_pred = A * P * A^T + Q
    arm_mat_init_f32(&temp1, 4, 4, temp1_data);
 8001100:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001104:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001108:	2204      	movs	r2, #4
 800110a:	2104      	movs	r1, #4
 800110c:	f003 fe49 	bl	8004da2 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, 4, 4, temp2_data);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001118:	2204      	movs	r2, #4
 800111a:	2104      	movs	r1, #4
 800111c:	f003 fe41 	bl	8004da2 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->A, &kalman->P, &temp1);  // temp1 = A * P
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800112c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001130:	4619      	mov	r1, r3
 8001132:	f003 fe4e 	bl	8004dd2 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp1, &kalman->A_t, &temp2);    // temp2 = A * P * A^T
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 800113c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001140:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fe44 	bl	8004dd2 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp2, &kalman->Q, &kalman->P_pred);  // P_pred = A*P*A^T + Q
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f503 711d 	add.w	r1, r3, #628	@ 0x274
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f503 7205 	add.w	r2, r3, #532	@ 0x214
 8001156:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fde6 	bl	8004d2c <arm_mat_add_f32>
}
 8001160:	bf00      	nop
 8001162:	3768      	adds	r7, #104	@ 0x68
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6178      	str	r0, [r7, #20]
 8001198:	6139      	str	r1, [r7, #16]
 800119a:	60fa      	str	r2, [r7, #12]
 800119c:	ed87 0a02 	vstr	s0, [r7, #8]
 80011a0:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24
	qei->old_val = 0;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->pulses = 0;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 80011e4:	213c      	movs	r1, #60	@ 0x3c
 80011e6:	6938      	ldr	r0, [r7, #16]
 80011e8:	f002 fb2a 	bl	8003840 <HAL_TIM_Encoder_Start>

}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0000      	movs	r0, r0
	...

080011f8 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	61da      	str	r2, [r3, #28]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0fd9      	lsrs	r1, r3, #31
 8001226:	440b      	add	r3, r1
 8001228:	105b      	asrs	r3, r3, #1
 800122a:	429a      	cmp	r2, r3
 800122c:	dd07      	ble.n	800123e <QEIPosVelUpdate+0x46>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	61da      	str	r2, [r3, #28]
 800123c:	e010      	b.n	8001260 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	0fd9      	lsrs	r1, r3, #31
 8001248:	440b      	add	r3, r1
 800124a:	105b      	asrs	r3, r3, #1
 800124c:	425b      	negs	r3, r3
 800124e:	429a      	cmp	r2, r3
 8001250:	da06      	bge.n	8001260 <QEIPosVelUpdate+0x68>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	441a      	add	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	61da      	str	r2, [r3, #28]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	441a      	add	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a05 	vldr	s15, [r3, #20]
 8001296:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800129a:	ee17 0a90 	vmov	r0, s15
 800129e:	f7ff f91f 	bl	80004e0 <__aeabi_f2d>
 80012a2:	a323      	add	r3, pc, #140	@ (adr r3, 8001330 <QEIPosVelUpdate+0x138>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f972 	bl	8000590 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fb9e 	bl	80009f4 <__aeabi_d2f>
 80012b8:	4602      	mov	r2, r0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]


 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d8:	ee17 0a90 	vmov	r0, s15
 80012dc:	f7ff f900 	bl	80004e0 <__aeabi_f2d>
 80012e0:	a313      	add	r3, pc, #76	@ (adr r3, 8001330 <QEIPosVelUpdate+0x138>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f953 	bl	8000590 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8e0 	bl	80004bc <__aeabi_i2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7ff fa6e 	bl	80007e4 <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fb70 	bl	80009f4 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	621a      	str	r2, [r3, #32]

 	// Update value
 	qei -> old_val = qei -> new_val;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	54442d18 	.word	0x54442d18
 8001334:	400921fb 	.word	0x400921fb

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f000 fe3c 	bl	8001fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 f889 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f000 fa8d 	bl	8001864 <MX_GPIO_Init>
  MX_TIM4_Init();
 800134a:	f000 f9e7 	bl	800171c <MX_TIM4_Init>
  MX_TIM5_Init();
 800134e:	f000 fa3b 	bl	80017c8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001352:	f000 f8cd 	bl	80014f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001356:	f000 f993 	bl	8001680 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	PID_POS.Kp = Kp_pos;
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <main+0xc0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a27      	ldr	r2, [pc, #156]	@ (80013fc <main+0xc4>)
 8001360:	6193      	str	r3, [r2, #24]
	PID_POS.Ki = Ki_pos;
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <main+0xc8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a25      	ldr	r2, [pc, #148]	@ (80013fc <main+0xc4>)
 8001368:	61d3      	str	r3, [r2, #28]
	PID_POS.Kd = Kd_pos;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <main+0xcc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <main+0xc4>)
 8001370:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS, 0);
 8001372:	2100      	movs	r1, #0
 8001374:	4821      	ldr	r0, [pc, #132]	@ (80013fc <main+0xc4>)
 8001376:	f003 fca3 	bl	8004cc0 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <main+0xd0>)
 8001380:	2208      	movs	r2, #8
 8001382:	4922      	ldr	r1, [pc, #136]	@ (800140c <main+0xd4>)
 8001384:	4822      	ldr	r0, [pc, #136]	@ (8001410 <main+0xd8>)
 8001386:	f000 fb3b 	bl	8001a00 <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 800138a:	2340      	movs	r3, #64	@ 0x40
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <main+0xd0>)
 8001390:	2204      	movs	r2, #4
 8001392:	491e      	ldr	r1, [pc, #120]	@ (800140c <main+0xd4>)
 8001394:	481f      	ldr	r0, [pc, #124]	@ (8001414 <main+0xdc>)
 8001396:	f000 fb33 	bl	8001a00 <MotorInit>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 800139a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001418 <main+0xe0>
 80013a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a6:	491d      	ldr	r1, [pc, #116]	@ (800141c <main+0xe4>)
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <main+0xe8>)
 80013aa:	f7ff fef1 	bl	8001190 <QEIInit>
//	QEIInit(&revolute_motor, &htim3, 8192, 1000, 65536);

	PIDInit(&prismatic_pos_control, 340, -340);
 80013ae:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001424 <main+0xec>
 80013b2:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8001428 <main+0xf0>
 80013b6:	481d      	ldr	r0, [pc, #116]	@ (800142c <main+0xf4>)
 80013b8:	f7ff fed6 	bl	8001168 <PIDInit>
	PIDInit(&prismatic_vel_control, 65535, -65535);
 80013bc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001430 <main+0xf8>
 80013c0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001434 <main+0xfc>
 80013c4:	481c      	ldr	r0, [pc, #112]	@ (8001438 <main+0x100>)
 80013c6:	f7ff fecf 	bl	8001168 <PIDInit>

	KalmanInit(&prismatic_kalman, A_f32, B_f32, Q, R);
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <main+0x104>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <main+0x108>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	eef0 0a47 	vmov.f32	s1, s14
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <main+0x10c>)
 80013e0:	4919      	ldr	r1, [pc, #100]	@ (8001448 <main+0x110>)
 80013e2:	481a      	ldr	r0, [pc, #104]	@ (800144c <main+0x114>)
 80013e4:	f7ff fb56 	bl	8000a94 <KalmanInit>

	HAL_TIM_Base_Start_IT(&htim5);
 80013e8:	4819      	ldr	r0, [pc, #100]	@ (8001450 <main+0x118>)
 80013ea:	f001 ff97 	bl	800331c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 80013ee:	4819      	ldr	r0, [pc, #100]	@ (8001454 <main+0x11c>)
 80013f0:	f001 ff94 	bl	800331c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <main+0xbc>
 80013f8:	20000000 	.word	0x20000000
 80013fc:	200001f4 	.word	0x200001f4
 8001400:	20000004 	.word	0x20000004
 8001404:	200001f0 	.word	0x200001f0
 8001408:	48000800 	.word	0x48000800
 800140c:	20000088 	.word	0x20000088
 8001410:	200001b8 	.word	0x200001b8
 8001414:	200001d4 	.word	0x200001d4
 8001418:	447a0000 	.word	0x447a0000
 800141c:	20000120 	.word	0x20000120
 8001420:	20000218 	.word	0x20000218
 8001424:	c3aa0000 	.word	0xc3aa0000
 8001428:	43aa0000 	.word	0x43aa0000
 800142c:	20000244 	.word	0x20000244
 8001430:	c77fff00 	.word	0xc77fff00
 8001434:	477fff00 	.word	0x477fff00
 8001438:	20000264 	.word	0x20000264
 800143c:	20000058 	.word	0x20000058
 8001440:	2000005c 	.word	0x2000005c
 8001444:	20000048 	.word	0x20000048
 8001448:	20000008 	.word	0x20000008
 800144c:	20000284 	.word	0x20000284
 8001450:	2000016c 	.word	0x2000016c
 8001454:	200000d4 	.word	0x200000d4

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2238      	movs	r2, #56	@ 0x38
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fd6e 	bl	8004f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800147a:	2000      	movs	r0, #0
 800147c:	f001 f8dc 	bl	8002638 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148a:	2340      	movs	r3, #64	@ 0x40
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148e:	2302      	movs	r3, #2
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001492:	2302      	movs	r3, #2
 8001494:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001496:	2304      	movs	r3, #4
 8001498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800149a:	2355      	movs	r3, #85	@ 0x55
 800149c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f976 	bl	80027a0 <HAL_RCC_OscConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014ba:	f000 fa9b 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c2:	2303      	movs	r3, #3
 80014c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2104      	movs	r1, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fc74 	bl	8002dc4 <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014e2:	f000 fa87 	bl	80019f4 <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3750      	adds	r7, #80	@ 0x50
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b09c      	sub	sp, #112	@ 0x70
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2234      	movs	r2, #52	@ 0x34
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fd0c 	bl	8004f48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001530:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <MX_TIM1_Init+0x188>)
 8001532:	4a52      	ldr	r2, [pc, #328]	@ (800167c <MX_TIM1_Init+0x18c>)
 8001534:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001536:	4b50      	ldr	r3, [pc, #320]	@ (8001678 <MX_TIM1_Init+0x188>)
 8001538:	22a9      	movs	r2, #169	@ 0xa9
 800153a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <MX_TIM1_Init+0x188>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001542:	4b4d      	ldr	r3, [pc, #308]	@ (8001678 <MX_TIM1_Init+0x188>)
 8001544:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b4b      	ldr	r3, [pc, #300]	@ (8001678 <MX_TIM1_Init+0x188>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001550:	4b49      	ldr	r3, [pc, #292]	@ (8001678 <MX_TIM1_Init+0x188>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b48      	ldr	r3, [pc, #288]	@ (8001678 <MX_TIM1_Init+0x188>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800155c:	4846      	ldr	r0, [pc, #280]	@ (8001678 <MX_TIM1_Init+0x188>)
 800155e:	f001 fe15 	bl	800318c <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001568:	f000 fa44 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001570:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001576:	4619      	mov	r1, r3
 8001578:	483f      	ldr	r0, [pc, #252]	@ (8001678 <MX_TIM1_Init+0x188>)
 800157a:	f002 fc53 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001584:	f000 fa36 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001588:	483b      	ldr	r0, [pc, #236]	@ (8001678 <MX_TIM1_Init+0x188>)
 800158a:	f001 ff3f 	bl	800340c <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001594:	f000 fa2e 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015a8:	4619      	mov	r1, r3
 80015aa:	4833      	ldr	r0, [pc, #204]	@ (8001678 <MX_TIM1_Init+0x188>)
 80015ac:	f003 fa18 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015b6:	f000 fa1d 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	@ 0x60
 80015bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4826      	ldr	r0, [pc, #152]	@ (8001678 <MX_TIM1_Init+0x188>)
 80015e0:	f002 fb0c 	bl	8003bfc <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015ea:	f000 fa03 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015f2:	2204      	movs	r2, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4820      	ldr	r0, [pc, #128]	@ (8001678 <MX_TIM1_Init+0x188>)
 80015f8:	f002 fb00 	bl	8003bfc <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001602:	f000 f9f7 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001606:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800160a:	2208      	movs	r2, #8
 800160c:	4619      	mov	r1, r3
 800160e:	481a      	ldr	r0, [pc, #104]	@ (8001678 <MX_TIM1_Init+0x188>)
 8001610:	f002 faf4 	bl	8003bfc <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800161a:	f000 f9eb 	bl	80019f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001636:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001644:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001648:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4807      	ldr	r0, [pc, #28]	@ (8001678 <MX_TIM1_Init+0x188>)
 800165c:	f003 fa56 	bl	8004b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001666:	f000 f9c5 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800166a:	4803      	ldr	r0, [pc, #12]	@ (8001678 <MX_TIM1_Init+0x188>)
 800166c:	f000 fbdc 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 8001670:	bf00      	nop
 8001672:	3770      	adds	r7, #112	@ 0x70
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000088 	.word	0x20000088
 800167c:	40012c00 	.word	0x40012c00

08001680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016a8:	22a9      	movs	r2, #169	@ 0xa9
 80016aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c6:	4814      	ldr	r0, [pc, #80]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016c8:	f001 fd60 	bl	800318c <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016d2:	f000 f98f 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_TIM2_Init+0x98>)
 80016e4:	f002 fb9e 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ee:	f000 f981 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM2_Init+0x98>)
 8001700:	f003 f96e 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800170a:	f000 f973 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200000d4 	.word	0x200000d4

0800171c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2224      	movs	r2, #36	@ 0x24
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fc0c 	bl	8004f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	463b      	mov	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 800173c:	4a21      	ldr	r2, [pc, #132]	@ (80017c4 <MX_TIM4_Init+0xa8>)
 800173e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001740:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800174c:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 800174e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001760:	2303      	movs	r3, #3
 8001762:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001778:	2301      	movs	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 800178c:	f001 ffb2 	bl	80036f4 <HAL_TIM_Encoder_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001796:	f000 f92d 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <MX_TIM4_Init+0xa4>)
 80017a8:	f003 f91a 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80017b2:	f000 f91f 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3730      	adds	r7, #48	@ 0x30
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000120 	.word	0x20000120
 80017c4:	40000800 	.word	0x40000800

080017c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_TIM5_Init+0x94>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <MX_TIM5_Init+0x98>)
 80017ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <MX_TIM5_Init+0x94>)
 80017ee:	22a9      	movs	r2, #169	@ 0xa9
 80017f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_TIM5_Init+0x94>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <MX_TIM5_Init+0x94>)
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
 80017fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_TIM5_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <MX_TIM5_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800180c:	4813      	ldr	r0, [pc, #76]	@ (800185c <MX_TIM5_Init+0x94>)
 800180e:	f001 fcbd 	bl	800318c <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001818:	f000 f8ec 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <MX_TIM5_Init+0x94>)
 800182a:	f002 fafb 	bl	8003e24 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001834:	f000 f8de 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_TIM5_Init+0x94>)
 8001846:	f003 f8cb 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001850:	f000 f8d0 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000016c 	.word	0x2000016c
 8001860:	40000c00 	.word	0x40000c00

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b48      	ldr	r3, [pc, #288]	@ (800199c <MX_GPIO_Init+0x138>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a47      	ldr	r2, [pc, #284]	@ (800199c <MX_GPIO_Init+0x138>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b45      	ldr	r3, [pc, #276]	@ (800199c <MX_GPIO_Init+0x138>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001892:	4b42      	ldr	r3, [pc, #264]	@ (800199c <MX_GPIO_Init+0x138>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a41      	ldr	r2, [pc, #260]	@ (800199c <MX_GPIO_Init+0x138>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <MX_GPIO_Init+0x138>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <MX_GPIO_Init+0x138>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a3b      	ldr	r2, [pc, #236]	@ (800199c <MX_GPIO_Init+0x138>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b39      	ldr	r3, [pc, #228]	@ (800199c <MX_GPIO_Init+0x138>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <MX_GPIO_Init+0x138>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a35      	ldr	r2, [pc, #212]	@ (800199c <MX_GPIO_Init+0x138>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b33      	ldr	r3, [pc, #204]	@ (800199c <MX_GPIO_Init+0x138>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2120      	movs	r1, #32
 80018de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e2:	f000 fe6d 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	21c0      	movs	r1, #192	@ 0xc0
 80018ea:	482d      	ldr	r0, [pc, #180]	@ (80019a0 <MX_GPIO_Init+0x13c>)
 80018ec:	f000 fe68 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC3 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_3;
 80018f0:	f242 0308 	movw	r3, #8200	@ 0x2008
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4826      	ldr	r0, [pc, #152]	@ (80019a0 <MX_GPIO_Init+0x13c>)
 8001908:	f000 fcd8 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800190c:	2313      	movs	r3, #19
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001910:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001924:	f000 fcca 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001928:	230c      	movs	r3, #12
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001938:	230c      	movs	r3, #12
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f000 fcb9 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800194a:	2320      	movs	r3, #32
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f000 fcaa 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001968:	23c0      	movs	r3, #192	@ 0xc0
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <MX_GPIO_Init+0x13c>)
 8001980:	f000 fc9c 	bl	80022bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2028      	movs	r0, #40	@ 0x28
 800198a:	f000 fc62 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800198e:	2028      	movs	r0, #40	@ 0x28
 8001990:	f000 fc79 	bl	8002286 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	@ 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000800 	.word	0x48000800

080019a4 <HAL_TIM_PeriodElapsedCallback>:

	// Motor control
	MotorSet(&prismatic_motor, 1000, output_velo);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10e      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
//		Prismatic_CasCadeControl();

		MotorSet(&prismatic_motor, 1000, 65535);
 80019b4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80019e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80019b8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80019e4 <HAL_TIM_PeriodElapsedCallback+0x40>
 80019bc:	480a      	ldr	r0, [pc, #40]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019be:	f000 f847 	bl	8001a50 <MotorSet>
		QEIPosVelUpdate(&prismatic_encoder);
 80019c2:	480a      	ldr	r0, [pc, #40]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019c4:	f7ff fc18 	bl	80011f8 <QEIPosVelUpdate>

//		KalmanUpdate(&prismatic_kalman, prismatic_encoder.rads);
		KalmanPrediction(&prismatic_kalman, 12.0);
 80019c8:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019ce:	f7ff fb59 	bl	8001084 <KalmanPrediction>
//		kalman_radps = prismatic_kalman.X_pred.pData[1];


	}

}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200000d4 	.word	0x200000d4
 80019e0:	477fff00 	.word	0x477fff00
 80019e4:	447a0000 	.word	0x447a0000
 80019e8:	200001b8 	.word	0x200001b8
 80019ec:	20000218 	.word	0x20000218
 80019f0:	20000284 	.word	0x20000284

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <Error_Handler+0x8>

08001a00 <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <MotorInit+0x4c>)
 8001a1a:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8b3a      	ldrh	r2, [r7, #24]
 8001a32:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8001a34:	68b8      	ldr	r0, [r7, #8]
 8001a36:	f001 fc01 	bl	800323c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	68b8      	ldr	r0, [r7, #8]
 8001a40:	f001 fd46 	bl	80034d0 <HAL_TIM_PWM_Start>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	0a21fe80 	.word	0x0a21fe80

08001a50 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a5c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8001a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	d137      	bne.n	8001ade <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	895b      	ldrh	r3, [r3, #10]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <MotorSet+0x32>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8001a80:	e104      	b.n	8001c8c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	895b      	ldrh	r3, [r3, #10]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d105      	bne.n	8001a96 <MotorSet+0x46>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a94:	e0fa      	b.n	8001c8c <MotorSet+0x23c>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	895b      	ldrh	r3, [r3, #10]
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d105      	bne.n	8001aaa <MotorSet+0x5a>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001aa8:	e0f0      	b.n	8001c8c <MotorSet+0x23c>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	895b      	ldrh	r3, [r3, #10]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d105      	bne.n	8001abe <MotorSet+0x6e>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001abc:	e0e6      	b.n	8001c8c <MotorSet+0x23c>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	895b      	ldrh	r3, [r3, #10]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d105      	bne.n	8001ad2 <MotorSet+0x82>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ad0:	e0dc      	b.n	8001c8c <MotorSet+0x23c>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001adc:	e0d6      	b.n	8001c8c <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aea:	ed97 7a02 	vldr	s14, [r7, #8]
 8001aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af6:	ee17 2a90 	vmov	r2, s15
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001b06:	33fe      	adds	r3, #254	@ 0xfe
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fcc7 	bl	800049c <__aeabi_ui2d>
 8001b0e:	a362      	add	r3, pc, #392	@ (adr r3, 8001c98 <MotorSet+0x248>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fe66 	bl	80007e4 <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7fe ff48 	bl	80009b4 <__aeabi_d2uiz>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8a1b      	ldrh	r3, [r3, #16]
 8001b40:	3301      	adds	r3, #1
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b62:	ee17 3a90 	vmov	r3, s15
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8a5b      	ldrh	r3, [r3, #18]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fca3 	bl	80004bc <__aeabi_i2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b82:	ee17 0a90 	vmov	r0, s15
 8001b86:	f7fe fcab 	bl	80004e0 <__aeabi_f2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4629      	mov	r1, r5
 8001b92:	f7fe fcfd 	bl	8000590 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001c98 <MotorSet+0x248>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fe1e 	bl	80007e4 <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff00 	bl	80009b4 <__aeabi_d2uiz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 8001bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	db08      	blt.n	8001bde <MotorSet+0x18e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	891b      	ldrh	r3, [r3, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f000 fcf2 	bl	80025c0 <HAL_GPIO_WritePin>
 8001bdc:	e007      	b.n	8001bee <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6858      	ldr	r0, [r3, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	891b      	ldrh	r3, [r3, #8]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	f000 fce9 	bl	80025c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8a1a      	ldrh	r2, [r3, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8a5a      	ldrh	r2, [r3, #18]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8a5a      	ldrh	r2, [r3, #18]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	895b      	ldrh	r3, [r3, #10]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <MotorSet+0x1d6>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6992      	ldr	r2, [r2, #24]
 8001c22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c24:	e032      	b.n	8001c8c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	895b      	ldrh	r3, [r3, #10]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d106      	bne.n	8001c3c <MotorSet+0x1ec>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c3a:	e027      	b.n	8001c8c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	895b      	ldrh	r3, [r3, #10]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d106      	bne.n	8001c52 <MotorSet+0x202>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001c50:	e01c      	b.n	8001c8c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	895b      	ldrh	r3, [r3, #10]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d106      	bne.n	8001c68 <MotorSet+0x218>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c66:	e011      	b.n	8001c8c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	895b      	ldrh	r3, [r3, #10]
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d106      	bne.n	8001c7e <MotorSet+0x22e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001c7c:	e006      	b.n	8001c8c <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001c8a:	e7ff      	b.n	8001c8c <MotorSet+0x23c>
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	f3af 8000 	nop.w
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	40efffe0 	.word	0x40efffe0

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x44>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce4 <HAL_MspInit+0x44>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_MspInit+0x44>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_MspInit+0x44>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x44>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_MspInit+0x44>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cd6:	f000 fd53 	bl	8002780 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <HAL_TIM_Base_MspInit+0x9c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10c      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d06:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d12:	e032      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	201c      	movs	r0, #28
 8001d3c:	f000 fa89 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d40:	201c      	movs	r0, #28
 8001d42:	f000 faa0 	bl	8002286 <HAL_NVIC_EnableIRQ>
}
 8001d46:	e018      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_TIM_Base_MspInit+0xa4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d113      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_TIM_Base_MspInit+0xa0>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2032      	movs	r0, #50	@ 0x32
 8001d70:	f000 fa6f 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d74:	2032      	movs	r0, #50	@ 0x32
 8001d76:	f000 fa86 	bl	8002286 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40000c00 	.word	0x40000c00

08001d90 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1b      	ldr	r2, [pc, #108]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d12f      	bne.n	8001e12 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x90>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x90>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x90>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x90>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x90>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x90>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23c0      	movs	r3, #192	@ 0xc0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001df2:	2302      	movs	r3, #2
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001dfe:	f000 fa5d 	bl	80022bc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	201e      	movs	r0, #30
 8001e08:	f000 fa23 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e0c:	201e      	movs	r0, #30
 8001e0e:	f000 fa3a 	bl	8002286 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	@ 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000400 	.word	0x48000400

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11d      	bne.n	8001e86 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e62:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e74:	2306      	movs	r3, #6
 8001e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e82:	f000 fa1b 	bl	80022bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40021000 	.word	0x40021000

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <NMI_Handler+0x4>

08001ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <MemManage_Handler+0x4>

08001eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eee:	f000 f8b7 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <TIM2_IRQHandler+0x10>)
 8001efe:	f001 fd2d 	bl	800395c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200000d4 	.word	0x200000d4

08001f0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <TIM4_IRQHandler+0x10>)
 8001f12:	f001 fd23 	bl	800395c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000120 	.word	0x20000120

08001f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f28:	f000 fb62 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <TIM5_IRQHandler+0x10>)
 8001f36:	f001 fd11 	bl	800395c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000016c 	.word	0x2000016c

08001f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f68:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f6c:	f7ff ffea 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <LoopForever+0xe>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb4 <LoopForever+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f002 ffdf 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9a:	f7ff f9cd 	bl	8001338 <main>

08001f9e <LoopForever>:

LoopForever:
    b LoopForever
 8001f9e:	e7fe      	b.n	8001f9e <LoopForever>
  ldr   r0, =_estack
 8001fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fac:	0800506c 	.word	0x0800506c
  ldr r2, =_sbss
 8001fb0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fb4:	20000558 	.word	0x20000558

08001fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC1_2_IRQHandler>

08001fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f939 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 f80e 	bl	8001fec <HAL_InitTick>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e001      	b.n	8001fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fdc:	f7ff fe60 	bl	8001ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_InitTick+0x68>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d022      	beq.n	8002046 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_InitTick+0x6c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_InitTick+0x68>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800200c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f944 	bl	80022a2 <HAL_SYSTICK_Config>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	d809      	bhi.n	800203a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002026:	2200      	movs	r2, #0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	f04f 30ff 	mov.w	r0, #4294967295
 800202e:	f000 f910 	bl	8002252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_InitTick+0x70>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e007      	b.n	800204a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e004      	b.n	800204a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000068 	.word	0x20000068
 8002058:	20000060 	.word	0x20000060
 800205c:	20000064 	.word	0x20000064

08002060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_IncTick+0x1c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_IncTick+0x20>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4413      	add	r3, r2
 800206e:	4a03      	ldr	r2, [pc, #12]	@ (800207c <HAL_IncTick+0x1c>)
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000554 	.word	0x20000554
 8002080:	20000068 	.word	0x20000068

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000554 	.word	0x20000554

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	@ (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff40 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff90 	bl	8002190 <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5f 	bl	800213c <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff33 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa4 	bl	80021f8 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ca:	e15a      	b.n	8002582 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 814c 	beq.w	800257c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d005      	beq.n	80022fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d130      	bne.n	800235e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002332:	2201      	movs	r2, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0201 	and.w	r2, r3, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b03      	cmp	r3, #3
 8002368:	d017      	beq.n	800239a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d123      	bne.n	80023ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	08da      	lsrs	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3208      	adds	r2, #8
 80023ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	6939      	ldr	r1, [r7, #16]
 80023ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0203 	and.w	r2, r3, #3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80a6 	beq.w	800257c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002430:	4b5b      	ldr	r3, [pc, #364]	@ (80025a0 <HAL_GPIO_Init+0x2e4>)
 8002432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002434:	4a5a      	ldr	r2, [pc, #360]	@ (80025a0 <HAL_GPIO_Init+0x2e4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6613      	str	r3, [r2, #96]	@ 0x60
 800243c:	4b58      	ldr	r3, [pc, #352]	@ (80025a0 <HAL_GPIO_Init+0x2e4>)
 800243e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002448:	4a56      	ldr	r2, [pc, #344]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002472:	d01f      	beq.n	80024b4 <HAL_GPIO_Init+0x1f8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4c      	ldr	r2, [pc, #304]	@ (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d019      	beq.n	80024b0 <HAL_GPIO_Init+0x1f4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4b      	ldr	r2, [pc, #300]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1f0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4a      	ldr	r2, [pc, #296]	@ (80025b0 <HAL_GPIO_Init+0x2f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a49      	ldr	r2, [pc, #292]	@ (80025b4 <HAL_GPIO_Init+0x2f8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a48      	ldr	r2, [pc, #288]	@ (80025b8 <HAL_GPIO_Init+0x2fc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e4>
 800249c:	2305      	movs	r3, #5
 800249e:	e00a      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024a0:	2306      	movs	r3, #6
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e004      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024b4:	2300      	movs	r3, #0
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	f002 0203 	and.w	r2, r2, #3
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	4093      	lsls	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c6:	4937      	ldr	r1, [pc, #220]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d4:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_GPIO_Init+0x300>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f8:	4a30      	ldr	r2, [pc, #192]	@ (80025bc <HAL_GPIO_Init+0x300>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024fe:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_GPIO_Init+0x300>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002522:	4a26      	ldr	r2, [pc, #152]	@ (80025bc <HAL_GPIO_Init+0x300>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_GPIO_Init+0x300>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_GPIO_Init+0x300>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002552:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_GPIO_Init+0x300>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002576:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <HAL_GPIO_Init+0x300>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ae9d 	bne.w	80022cc <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	48001400 	.word	0x48001400
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002606:	4a05      	ldr	r2, [pc, #20]	@ (800261c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f806 	bl	8002620 <HAL_GPIO_EXTI_Callback>
  }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d141      	bne.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002646:	4b4b      	ldr	r3, [pc, #300]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002652:	d131      	bne.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002654:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800265a:	4a46      	ldr	r2, [pc, #280]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002664:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800266c:	4a41      	ldr	r2, [pc, #260]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002674:	4b40      	ldr	r3, [pc, #256]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2232      	movs	r2, #50	@ 0x32
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	0c9b      	lsrs	r3, r3, #18
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800268a:	e002      	b.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3b01      	subs	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002692:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269e:	d102      	bne.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f2      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a6:	4b33      	ldr	r3, [pc, #204]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b2:	d158      	bne.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e057      	b.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026be:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026c8:	e04d      	b.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d0:	d141      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d2:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	d131      	bne.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e6:	4a23      	ldr	r2, [pc, #140]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f0:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002700:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2232      	movs	r2, #50	@ 0x32
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9b      	lsrs	r3, r3, #18
 8002712:	3301      	adds	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002716:	e002      	b.n	800271e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3b01      	subs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272a:	d102      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f2      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d112      	bne.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e011      	b.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002754:	e007      	b.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002756:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800275e:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002764:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40007000 	.word	0x40007000
 8002778:	20000060 	.word	0x20000060
 800277c:	431bde83 	.word	0x431bde83

08002780 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a04      	ldr	r2, [pc, #16]	@ (800279c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800278a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800278e:	6093      	str	r3, [r2, #8]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e2fe      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d075      	beq.n	80028aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	4b97      	ldr	r3, [pc, #604]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c8:	4b94      	ldr	r3, [pc, #592]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d102      	bne.n	80027de <HAL_RCC_OscConfig+0x3e>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_OscConfig+0x44>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d10b      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	4b8d      	ldr	r3, [pc, #564]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d05b      	beq.n	80028a8 <HAL_RCC_OscConfig+0x108>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d157      	bne.n	80028a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e2d9      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x74>
 8002806:	4b85      	ldr	r3, [pc, #532]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a84      	ldr	r2, [pc, #528]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7e      	ldr	r2, [pc, #504]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002838:	4b78      	ldr	r3, [pc, #480]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a77      	ldr	r2, [pc, #476]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b75      	ldr	r3, [pc, #468]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a74      	ldr	r2, [pc, #464]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff fc14 	bl	8002084 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7ff fc10 	bl	8002084 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	@ 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e29e      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002872:	4b6a      	ldr	r3, [pc, #424]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xc0>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff fc00 	bl	8002084 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002888:	f7ff fbfc 	bl	8002084 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	@ 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e28a      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289a:	4b60      	ldr	r3, [pc, #384]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0xe8>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4b59      	ldr	r3, [pc, #356]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c0:	4b56      	ldr	r3, [pc, #344]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_OscConfig+0x136>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_OscConfig+0x13c>
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d11f      	bne.n	800291c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028dc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x154>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e25d      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b49      	ldr	r3, [pc, #292]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4946      	ldr	r1, [pc, #280]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002908:	4b45      	ldr	r3, [pc, #276]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fb6d 	bl	8001fec <HAL_InitTick>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d043      	beq.n	80029a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e249      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d023      	beq.n	800296c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a3c      	ldr	r2, [pc, #240]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff fba8 	bl	8002084 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002938:	f7ff fba4 	bl	8002084 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e232      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294a:	4b34      	ldr	r3, [pc, #208]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	061b      	lsls	r3, r3, #24
 8002964:	492d      	ldr	r1, [pc, #180]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
 800296a:	e01a      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2a      	ldr	r2, [pc, #168]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fb84 	bl	8002084 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7ff fb80 	bl	8002084 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e20e      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1e0>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d041      	beq.n	8002a32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029bc:	4a17      	ldr	r2, [pc, #92]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7ff fb5d 	bl	8002084 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7ff fb59 	bl	8002084 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1e7      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ef      	beq.n	80029ce <HAL_RCC_OscConfig+0x22e>
 80029ee:	e020      	b.n	8002a32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f6:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff fb40 	bl	8002084 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a06:	e00d      	b.n	8002a24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff fb3c 	bl	8002084 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d906      	bls.n	8002a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1ca      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	20000064 	.word	0x20000064
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	4b8c      	ldr	r3, [pc, #560]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ea      	bne.n	8002a08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a6 	beq.w	8002b8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a44:	4b84      	ldr	r3, [pc, #528]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2b4>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x2b6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a66:	4b7c      	ldr	r3, [pc, #496]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a72:	2301      	movs	r3, #1
 8002a74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a76:	4b79      	ldr	r3, [pc, #484]	@ (8002c5c <HAL_RCC_OscConfig+0x4bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d118      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a82:	4b76      	ldr	r3, [pc, #472]	@ (8002c5c <HAL_RCC_OscConfig+0x4bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a75      	ldr	r2, [pc, #468]	@ (8002c5c <HAL_RCC_OscConfig+0x4bc>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff faf9 	bl	8002084 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7ff faf5 	bl	8002084 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e183      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c5c <HAL_RCC_OscConfig+0x4bc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_RCC_OscConfig+0x32e>
 8002abc:	4b66      	ldr	r3, [pc, #408]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	4a65      	ldr	r2, [pc, #404]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002acc:	e024      	b.n	8002b18 <HAL_RCC_OscConfig+0x378>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d110      	bne.n	8002af8 <HAL_RCC_OscConfig+0x358>
 8002ad6:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002adc:	4a5e      	ldr	r2, [pc, #376]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aec:	4a5a      	ldr	r2, [pc, #360]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af6:	e00f      	b.n	8002b18 <HAL_RCC_OscConfig+0x378>
 8002af8:	4b57      	ldr	r3, [pc, #348]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	4a56      	ldr	r2, [pc, #344]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b08:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d016      	beq.n	8002b4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff fab0 	bl	8002084 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7ff faac 	bl	8002084 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e138      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b46      	ldr	r3, [pc, #280]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ed      	beq.n	8002b28 <HAL_RCC_OscConfig+0x388>
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fa99 	bl	8002084 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff fa95 	bl	8002084 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e121      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ed      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b35      	ldr	r3, [pc, #212]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	4a34      	ldr	r2, [pc, #208]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d03c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01c      	beq.n	8002bda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7ff fa68 	bl	8002084 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb8:	f7ff fa64 	bl	8002084 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0f2      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bca:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ef      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x418>
 8002bd8:	e01b      	b.n	8002c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bda:	4b1f      	ldr	r3, [pc, #124]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002be0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7ff fa4b 	bl	8002084 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf2:	f7ff fa47 	bl	8002084 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0d5      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ef      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80c9 	beq.w	8002dae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	f000 8083 	beq.w	8002d30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d15e      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a08      	ldr	r2, [pc, #32]	@ (8002c58 <HAL_RCC_OscConfig+0x4b8>)
 8002c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7ff fa21 	bl	8002084 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	e00c      	b.n	8002c60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7ff fa1d 	bl	8002084 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d905      	bls.n	8002c60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0ab      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c60:	4b55      	ldr	r3, [pc, #340]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ec      	bne.n	8002c46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b52      	ldr	r3, [pc, #328]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	4b52      	ldr	r3, [pc, #328]	@ (8002dbc <HAL_RCC_OscConfig+0x61c>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6a11      	ldr	r1, [r2, #32]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	4311      	orrs	r1, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c86:	0212      	lsls	r2, r2, #8
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c8e:	0852      	lsrs	r2, r2, #1
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0552      	lsls	r2, r2, #21
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c9a:	0852      	lsrs	r2, r2, #1
 8002c9c:	3a01      	subs	r2, #1
 8002c9e:	0652      	lsls	r2, r2, #25
 8002ca0:	4311      	orrs	r1, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ca6:	06d2      	lsls	r2, r2, #27
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4943      	ldr	r1, [pc, #268]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f9dc 	bl	8002084 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff f9d8 	bl	8002084 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e066      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x530>
 8002cee:	e05e      	b.n	8002dae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf0:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a30      	ldr	r2, [pc, #192]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f9c2 	bl	8002084 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff f9be 	bl	8002084 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04c      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d16:	4b28      	ldr	r3, [pc, #160]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d22:	4b25      	ldr	r3, [pc, #148]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4924      	ldr	r1, [pc, #144]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002d28:	4b25      	ldr	r3, [pc, #148]	@ (8002dc0 <HAL_RCC_OscConfig+0x620>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]
 8002d2e:	e03e      	b.n	8002dae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e039      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_RCC_OscConfig+0x618>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d12c      	bne.n	8002daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d123      	bne.n	8002daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d11b      	bne.n	8002daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d113      	bne.n	8002daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	019f800c 	.word	0x019f800c
 8002dc0:	feeefffc 	.word	0xfeeefffc

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e11e      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b91      	ldr	r3, [pc, #580]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b8e      	ldr	r3, [pc, #568]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	498c      	ldr	r1, [pc, #560]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e106      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d073      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d129      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e20:	4b81      	ldr	r3, [pc, #516]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0f4      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e30:	f000 f966 	bl	8003100 <RCC_GetSysClockFreqFromPLLSource>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4a7c      	ldr	r2, [pc, #496]	@ (800302c <HAL_RCC_ClockConfig+0x268>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d93f      	bls.n	8002ebe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d033      	beq.n	8002ebe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d12f      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e5e:	4b72      	ldr	r3, [pc, #456]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e66:	4a70      	ldr	r2, [pc, #448]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e6e:	2380      	movs	r3, #128	@ 0x80
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e024      	b.n	8002ebe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0c6      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8c:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0be      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e9c:	f000 f8ce 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4a61      	ldr	r2, [pc, #388]	@ (800302c <HAL_RCC_ClockConfig+0x268>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d909      	bls.n	8002ebe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4957      	ldr	r1, [pc, #348]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7ff f8d8 	bl	8002084 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7ff f8d4 	bl	8002084 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e095      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b4e      	ldr	r3, [pc, #312]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d023      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f18:	4b43      	ldr	r3, [pc, #268]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f30:	4b3d      	ldr	r3, [pc, #244]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f38:	4a3b      	ldr	r2, [pc, #236]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f40:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4936      	ldr	r1, [pc, #216]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b80      	cmp	r3, #128	@ 0x80
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f5a:	4b33      	ldr	r3, [pc, #204]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4a32      	ldr	r2, [pc, #200]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002f60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f66:	4b2f      	ldr	r3, [pc, #188]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d21d      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 020f 	bic.w	r2, r3, #15
 8002f7c:	4929      	ldr	r1, [pc, #164]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f84:	f7ff f87e 	bl	8002084 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7ff f87a 	bl	8002084 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e03b      	b.n	800301a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1ed      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4917      	ldr	r1, [pc, #92]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490f      	ldr	r1, [pc, #60]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fee:	f000 f825 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490c      	ldr	r1, [pc, #48]	@ (8003030 <HAL_RCC_ClockConfig+0x26c>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <HAL_RCC_ClockConfig+0x270>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_RCC_ClockConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe ffea 	bl	8001fec <HAL_InitTick>
 8003018:	4603      	mov	r3, r0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	04c4b400 	.word	0x04c4b400
 8003030:	08005054 	.word	0x08005054
 8003034:	20000060 	.word	0x20000060
 8003038:	20000064 	.word	0x20000064

0800303c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003042:	4b2c      	ldr	r3, [pc, #176]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b04      	cmp	r3, #4
 800304c:	d102      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e047      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003054:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b08      	cmp	r3, #8
 800305e:	d102      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003060:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	e03e      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003066:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d136      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3301      	adds	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d10c      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003090:	4a1a      	ldr	r2, [pc, #104]	@ (80030fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	4a16      	ldr	r2, [pc, #88]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800309a:	68d2      	ldr	r2, [r2, #12]
 800309c:	0a12      	lsrs	r2, r2, #8
 800309e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	617b      	str	r3, [r7, #20]
      break;
 80030a8:	e00c      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030aa:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	4a10      	ldr	r2, [pc, #64]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	0a12      	lsrs	r2, r2, #8
 80030b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
      break;
 80030c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0e5b      	lsrs	r3, r3, #25
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	3301      	adds	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e001      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030e4:	693b      	ldr	r3, [r7, #16]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	016e3600 	.word	0x016e3600

08003100 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3301      	adds	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d10c      	bne.n	800313e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003124:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800312e:	68d2      	ldr	r2, [r2, #12]
 8003130:	0a12      	lsrs	r2, r2, #8
 8003132:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
    break;
 800313c:	e00c      	b.n	8003158 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800313e:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003148:	68d2      	ldr	r2, [r2, #12]
 800314a:	0a12      	lsrs	r2, r2, #8
 800314c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    break;
 8003156:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003158:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0e5b      	lsrs	r3, r3, #25
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	3301      	adds	r3, #1
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	016e3600 	.word	0x016e3600
 8003188:	00f42400 	.word	0x00f42400

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e049      	b.n	8003232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fd98 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 ff68 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e04c      	b.n	80032ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a26      	ldr	r2, [pc, #152]	@ (80032fc <HAL_TIM_Base_Start+0xc0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d022      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326e:	d01d      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a22      	ldr	r2, [pc, #136]	@ (8003300 <HAL_TIM_Base_Start+0xc4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d018      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a21      	ldr	r2, [pc, #132]	@ (8003304 <HAL_TIM_Base_Start+0xc8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <HAL_TIM_Base_Start+0xcc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00e      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <HAL_TIM_Base_Start+0xd0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <HAL_TIM_Base_Start+0xd4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_TIM_Base_Start+0x70>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <HAL_TIM_Base_Start+0xd8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d115      	bne.n	80032d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_TIM_Base_Start+0xdc>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d015      	beq.n	80032ea <HAL_TIM_Base_Start+0xae>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c4:	d011      	beq.n	80032ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	e008      	b.n	80032ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e000      	b.n	80032ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40000c00 	.word	0x40000c00
 800330c:	40013400 	.word	0x40013400
 8003310:	40014000 	.word	0x40014000
 8003314:	40015000 	.word	0x40015000
 8003318:	00010007 	.word	0x00010007

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e054      	b.n	80033de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a26      	ldr	r2, [pc, #152]	@ (80033ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335e:	d01d      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a22      	ldr	r2, [pc, #136]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1f      	ldr	r2, [pc, #124]	@ (80033f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_TIM_Base_Start_IT+0xe0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1c      	ldr	r2, [pc, #112]	@ (8003400 <HAL_TIM_Base_Start_IT+0xe4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <HAL_TIM_Base_Start_IT+0xe8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d115      	bne.n	80033c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <HAL_TIM_Base_Start_IT+0xec>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d015      	beq.n	80033da <HAL_TIM_Base_Start_IT+0xbe>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d011      	beq.n	80033da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	e008      	b.n	80033da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e000      	b.n	80033dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	40015000 	.word	0x40015000
 8003408:	00010007 	.word	0x00010007

0800340c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e049      	b.n	80034b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f841 	bl	80034ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f000 fe28 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_TIM_PWM_Start+0x24>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e03c      	b.n	800356e <HAL_TIM_PWM_Start+0x9e>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d109      	bne.n	800350e <HAL_TIM_PWM_Start+0x3e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e02f      	b.n	800356e <HAL_TIM_PWM_Start+0x9e>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d109      	bne.n	8003528 <HAL_TIM_PWM_Start+0x58>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e022      	b.n	800356e <HAL_TIM_PWM_Start+0x9e>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d109      	bne.n	8003542 <HAL_TIM_PWM_Start+0x72>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e015      	b.n	800356e <HAL_TIM_PWM_Start+0x9e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b10      	cmp	r3, #16
 8003546:	d109      	bne.n	800355c <HAL_TIM_PWM_Start+0x8c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e008      	b.n	800356e <HAL_TIM_PWM_Start+0x9e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0a6      	b.n	80036c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <HAL_TIM_PWM_Start+0xb6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003584:	e023      	b.n	80035ce <HAL_TIM_PWM_Start+0xfe>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d104      	bne.n	8003596 <HAL_TIM_PWM_Start+0xc6>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003594:	e01b      	b.n	80035ce <HAL_TIM_PWM_Start+0xfe>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_PWM_Start+0xd6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a4:	e013      	b.n	80035ce <HAL_TIM_PWM_Start+0xfe>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xe6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035b4:	e00b      	b.n	80035ce <HAL_TIM_PWM_Start+0xfe>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0xf6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c4:	e003      	b.n	80035ce <HAL_TIM_PWM_Start+0xfe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2201      	movs	r2, #1
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 f9dc 	bl	8004994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <HAL_TIM_PWM_Start+0x1fc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d018      	beq.n	8003618 <HAL_TIM_PWM_Start+0x148>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a39      	ldr	r2, [pc, #228]	@ (80036d0 <HAL_TIM_PWM_Start+0x200>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_TIM_PWM_Start+0x148>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a37      	ldr	r2, [pc, #220]	@ (80036d4 <HAL_TIM_PWM_Start+0x204>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_TIM_PWM_Start+0x148>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a36      	ldr	r2, [pc, #216]	@ (80036d8 <HAL_TIM_PWM_Start+0x208>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_TIM_PWM_Start+0x148>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a34      	ldr	r2, [pc, #208]	@ (80036dc <HAL_TIM_PWM_Start+0x20c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_TIM_PWM_Start+0x148>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a33      	ldr	r2, [pc, #204]	@ (80036e0 <HAL_TIM_PWM_Start+0x210>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_TIM_PWM_Start+0x14c>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_TIM_PWM_Start+0x14e>
 800361c:	2300      	movs	r3, #0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a25      	ldr	r2, [pc, #148]	@ (80036cc <HAL_TIM_PWM_Start+0x1fc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d022      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003644:	d01d      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a26      	ldr	r2, [pc, #152]	@ (80036e4 <HAL_TIM_PWM_Start+0x214>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d018      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <HAL_TIM_PWM_Start+0x218>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a23      	ldr	r2, [pc, #140]	@ (80036ec <HAL_TIM_PWM_Start+0x21c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_TIM_PWM_Start+0x200>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	@ (80036d4 <HAL_TIM_PWM_Start+0x204>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_PWM_Start+0x1b2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a18      	ldr	r2, [pc, #96]	@ (80036e0 <HAL_TIM_PWM_Start+0x210>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d115      	bne.n	80036ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_TIM_PWM_Start+0x220>)
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d015      	beq.n	80036c0 <HAL_TIM_PWM_Start+0x1f0>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369a:	d011      	beq.n	80036c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	e008      	b.n	80036c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e000      	b.n	80036c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800
 80036e0:	40015000 	.word	0x40015000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800
 80036ec:	40000c00 	.word	0x40000c00
 80036f0:	00010007 	.word	0x00010007

080036f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e097      	b.n	8003838 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fe fb37 	bl	8001d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f000 fca9 	bl	80040a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	4313      	orrs	r3, r2
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003794:	f023 030c 	bic.w	r3, r3, #12
 8003798:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	4313      	orrs	r3, r2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	011a      	lsls	r2, r3, #4
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	4313      	orrs	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4313      	orrs	r3, r2
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003850:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003858:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003860:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003868:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d110      	bne.n	8003892 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003876:	7b7b      	ldrb	r3, [r7, #13]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e069      	b.n	8003954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003890:	e031      	b.n	80038f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d110      	bne.n	80038ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003898:	7bbb      	ldrb	r3, [r7, #14]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800389e:	7b3b      	ldrb	r3, [r7, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d001      	beq.n	80038a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e055      	b.n	8003954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038b8:	e01d      	b.n	80038f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c6:	7b7b      	ldrb	r3, [r7, #13]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038cc:	7b3b      	ldrb	r3, [r7, #12]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e03e      	b.n	8003954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_TIM_Encoder_Start+0xc4>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d008      	beq.n	8003914 <HAL_TIM_Encoder_Start+0xd4>
 8003902:	e00f      	b.n	8003924 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f841 	bl	8004994 <TIM_CCxChannelCmd>
      break;
 8003912:	e016      	b.n	8003942 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	2104      	movs	r1, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f001 f839 	bl	8004994 <TIM_CCxChannelCmd>
      break;
 8003922:	e00e      	b.n	8003942 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f001 f831 	bl	8004994 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	2104      	movs	r1, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f82a 	bl	8004994 <TIM_CCxChannelCmd>
      break;
 8003940:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0202 	mvn.w	r2, #2
 8003990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fb5c 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fb4e 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fb5f 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d020      	beq.n	8003a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0204 	mvn.w	r2, #4
 80039dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fb36 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fb28 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb39 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d020      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01b      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0208 	mvn.w	r2, #8
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fb10 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fb02 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb13 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d020      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01b      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0210 	mvn.w	r2, #16
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 faea 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fadc 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 faed 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0201 	mvn.w	r2, #1
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd ff6e 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00c      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 f8a9 	bl	8004c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00c      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 f8a1 	bl	8004c5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00c      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 faa7 	bl	800408c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0220 	mvn.w	r2, #32
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 f869 	bl	8004c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f001 f875 	bl	8004c70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f001 f86d 	bl	8004c84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00c      	beq.n	8003bce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 f865 	bl	8004c98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 f85d 	bl	8004cac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0ff      	b.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b14      	cmp	r3, #20
 8003c26:	f200 80f0 	bhi.w	8003e0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003e0b 	.word	0x08003e0b
 8003c38:	08003e0b 	.word	0x08003e0b
 8003c3c:	08003e0b 	.word	0x08003e0b
 8003c40:	08003cc5 	.word	0x08003cc5
 8003c44:	08003e0b 	.word	0x08003e0b
 8003c48:	08003e0b 	.word	0x08003e0b
 8003c4c:	08003e0b 	.word	0x08003e0b
 8003c50:	08003d07 	.word	0x08003d07
 8003c54:	08003e0b 	.word	0x08003e0b
 8003c58:	08003e0b 	.word	0x08003e0b
 8003c5c:	08003e0b 	.word	0x08003e0b
 8003c60:	08003d47 	.word	0x08003d47
 8003c64:	08003e0b 	.word	0x08003e0b
 8003c68:	08003e0b 	.word	0x08003e0b
 8003c6c:	08003e0b 	.word	0x08003e0b
 8003c70:	08003d89 	.word	0x08003d89
 8003c74:	08003e0b 	.word	0x08003e0b
 8003c78:	08003e0b 	.word	0x08003e0b
 8003c7c:	08003e0b 	.word	0x08003e0b
 8003c80:	08003dc9 	.word	0x08003dc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fabc 	bl	8004208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6999      	ldr	r1, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	619a      	str	r2, [r3, #24]
      break;
 8003cc2:	e0a5      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb36 	bl	800433c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
      break;
 8003d04:	e084      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fba9 	bl	8004464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0208 	orr.w	r2, r2, #8
 8003d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0204 	bic.w	r2, r2, #4
 8003d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
      break;
 8003d44:	e064      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fc1b 	bl	8004588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	021a      	lsls	r2, r3, #8
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	61da      	str	r2, [r3, #28]
      break;
 8003d86:	e043      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc8e 	bl	80046b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0208 	orr.w	r2, r2, #8
 8003da2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0204 	bic.w	r2, r2, #4
 8003db2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003dc6:	e023      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fcd8 	bl	8004784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e08:	e002      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop

08003e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIM_ConfigClockSource+0x1c>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e0f6      	b.n	800402e <HAL_TIM_ConfigClockSource+0x20a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6f      	ldr	r2, [pc, #444]	@ (8004038 <HAL_TIM_ConfigClockSource+0x214>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f000 80c1 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003e80:	4a6d      	ldr	r2, [pc, #436]	@ (8004038 <HAL_TIM_ConfigClockSource+0x214>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f200 80c6 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e88:	4a6c      	ldr	r2, [pc, #432]	@ (800403c <HAL_TIM_ConfigClockSource+0x218>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	f000 80b9 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003e90:	4a6a      	ldr	r2, [pc, #424]	@ (800403c <HAL_TIM_ConfigClockSource+0x218>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	f200 80be 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e98:	4a69      	ldr	r2, [pc, #420]	@ (8004040 <HAL_TIM_ConfigClockSource+0x21c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	f000 80b1 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003ea0:	4a67      	ldr	r2, [pc, #412]	@ (8004040 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	f200 80b6 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ea8:	4a66      	ldr	r2, [pc, #408]	@ (8004044 <HAL_TIM_ConfigClockSource+0x220>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	f000 80a9 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003eb0:	4a64      	ldr	r2, [pc, #400]	@ (8004044 <HAL_TIM_ConfigClockSource+0x220>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	f200 80ae 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eb8:	4a63      	ldr	r2, [pc, #396]	@ (8004048 <HAL_TIM_ConfigClockSource+0x224>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	f000 80a1 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003ec0:	4a61      	ldr	r2, [pc, #388]	@ (8004048 <HAL_TIM_ConfigClockSource+0x224>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	f200 80a6 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ec8:	4a60      	ldr	r2, [pc, #384]	@ (800404c <HAL_TIM_ConfigClockSource+0x228>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	f000 8099 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800404c <HAL_TIM_ConfigClockSource+0x228>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	f200 809e 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ed8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003edc:	f000 8091 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003ee0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ee4:	f200 8096 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eec:	f000 8089 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef4:	f200 808e 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efc:	d03e      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0x158>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f02:	f200 8087 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0a:	f000 8086 	beq.w	800401a <HAL_TIM_ConfigClockSource+0x1f6>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f12:	d87f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f14:	2b70      	cmp	r3, #112	@ 0x70
 8003f16:	d01a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x12a>
 8003f18:	2b70      	cmp	r3, #112	@ 0x70
 8003f1a:	d87b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f1c:	2b60      	cmp	r3, #96	@ 0x60
 8003f1e:	d050      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x19e>
 8003f20:	2b60      	cmp	r3, #96	@ 0x60
 8003f22:	d877      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f24:	2b50      	cmp	r3, #80	@ 0x50
 8003f26:	d03c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x17e>
 8003f28:	2b50      	cmp	r3, #80	@ 0x50
 8003f2a:	d873      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d058      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x1be>
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	d86f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f34:	2b30      	cmp	r3, #48	@ 0x30
 8003f36:	d064      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003f38:	2b30      	cmp	r3, #48	@ 0x30
 8003f3a:	d86b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d060      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d867      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d05c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d05a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x1de>
 8003f4c:	e062      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	f000 fcf9 	bl	8004954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
      break;
 8003f7a:	e04f      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8c:	f000 fce2 	bl	8004954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e03c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fc54 	bl	800485c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2150      	movs	r1, #80	@ 0x50
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fcad 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e02c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 fc73 	bl	80048ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2160      	movs	r1, #96	@ 0x60
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fc9d 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e01c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 fc34 	bl	800485c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2140      	movs	r1, #64	@ 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fc8d 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004000:	e00c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 fc84 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004012:	e003      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e000      	b.n	800401c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800401a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	00100070 	.word	0x00100070
 800403c:	00100060 	.word	0x00100060
 8004040:	00100050 	.word	0x00100050
 8004044:	00100040 	.word	0x00100040
 8004048:	00100030 	.word	0x00100030
 800404c:	00100020 	.word	0x00100020

08004050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a4c      	ldr	r2, [pc, #304]	@ (80041e4 <TIM_Base_SetConfig+0x144>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d017      	beq.n	80040e8 <TIM_Base_SetConfig+0x48>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d013      	beq.n	80040e8 <TIM_Base_SetConfig+0x48>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a49      	ldr	r2, [pc, #292]	@ (80041e8 <TIM_Base_SetConfig+0x148>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00f      	beq.n	80040e8 <TIM_Base_SetConfig+0x48>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a48      	ldr	r2, [pc, #288]	@ (80041ec <TIM_Base_SetConfig+0x14c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_Base_SetConfig+0x48>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a47      	ldr	r2, [pc, #284]	@ (80041f0 <TIM_Base_SetConfig+0x150>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_Base_SetConfig+0x48>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a46      	ldr	r2, [pc, #280]	@ (80041f4 <TIM_Base_SetConfig+0x154>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0x48>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a45      	ldr	r2, [pc, #276]	@ (80041f8 <TIM_Base_SetConfig+0x158>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a39      	ldr	r2, [pc, #228]	@ (80041e4 <TIM_Base_SetConfig+0x144>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d023      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d01f      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a36      	ldr	r2, [pc, #216]	@ (80041e8 <TIM_Base_SetConfig+0x148>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01b      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a35      	ldr	r2, [pc, #212]	@ (80041ec <TIM_Base_SetConfig+0x14c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d017      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a34      	ldr	r2, [pc, #208]	@ (80041f0 <TIM_Base_SetConfig+0x150>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a33      	ldr	r2, [pc, #204]	@ (80041f4 <TIM_Base_SetConfig+0x154>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00f      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a33      	ldr	r2, [pc, #204]	@ (80041fc <TIM_Base_SetConfig+0x15c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a32      	ldr	r2, [pc, #200]	@ (8004200 <TIM_Base_SetConfig+0x160>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <TIM_Base_SetConfig+0x164>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_Base_SetConfig+0xaa>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2c      	ldr	r2, [pc, #176]	@ (80041f8 <TIM_Base_SetConfig+0x158>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d108      	bne.n	800415c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a18      	ldr	r2, [pc, #96]	@ (80041e4 <TIM_Base_SetConfig+0x144>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <TIM_Base_SetConfig+0x110>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a1a      	ldr	r2, [pc, #104]	@ (80041f4 <TIM_Base_SetConfig+0x154>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x110>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a1a      	ldr	r2, [pc, #104]	@ (80041fc <TIM_Base_SetConfig+0x15c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x110>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a19      	ldr	r2, [pc, #100]	@ (8004200 <TIM_Base_SetConfig+0x160>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x110>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a18      	ldr	r2, [pc, #96]	@ (8004204 <TIM_Base_SetConfig+0x164>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x110>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a13      	ldr	r2, [pc, #76]	@ (80041f8 <TIM_Base_SetConfig+0x158>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d105      	bne.n	80041d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	611a      	str	r2, [r3, #16]
  }
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40013400 	.word	0x40013400
 80041f8:	40015000 	.word	0x40015000
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800

08004208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f023 0201 	bic.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0302 	bic.w	r3, r3, #2
 8004254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a30      	ldr	r2, [pc, #192]	@ (8004324 <TIM_OC1_SetConfig+0x11c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <TIM_OC1_SetConfig+0x88>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a2f      	ldr	r2, [pc, #188]	@ (8004328 <TIM_OC1_SetConfig+0x120>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00f      	beq.n	8004290 <TIM_OC1_SetConfig+0x88>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2e      	ldr	r2, [pc, #184]	@ (800432c <TIM_OC1_SetConfig+0x124>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_OC1_SetConfig+0x88>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2d      	ldr	r2, [pc, #180]	@ (8004330 <TIM_OC1_SetConfig+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_OC1_SetConfig+0x88>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2c      	ldr	r2, [pc, #176]	@ (8004334 <TIM_OC1_SetConfig+0x12c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_OC1_SetConfig+0x88>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <TIM_OC1_SetConfig+0x130>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10c      	bne.n	80042aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0308 	bic.w	r3, r3, #8
 8004296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <TIM_OC1_SetConfig+0x11c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_OC1_SetConfig+0xd2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <TIM_OC1_SetConfig+0x120>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_OC1_SetConfig+0xd2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <TIM_OC1_SetConfig+0x124>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_OC1_SetConfig+0xd2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004330 <TIM_OC1_SetConfig+0x128>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_OC1_SetConfig+0xd2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a19      	ldr	r2, [pc, #100]	@ (8004334 <TIM_OC1_SetConfig+0x12c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_OC1_SetConfig+0xd2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <TIM_OC1_SetConfig+0x130>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d111      	bne.n	80042fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	40015000 	.word	0x40015000

0800433c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f023 0210 	bic.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <TIM_OC2_SetConfig+0x110>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_OC2_SetConfig+0x74>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004450 <TIM_OC2_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_OC2_SetConfig+0x74>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004454 <TIM_OC2_SetConfig+0x118>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10d      	bne.n	80043cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1f      	ldr	r2, [pc, #124]	@ (800444c <TIM_OC2_SetConfig+0x110>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <TIM_OC2_SetConfig+0xc0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004450 <TIM_OC2_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00f      	beq.n	80043fc <TIM_OC2_SetConfig+0xc0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <TIM_OC2_SetConfig+0x11c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <TIM_OC2_SetConfig+0xc0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <TIM_OC2_SetConfig+0x120>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <TIM_OC2_SetConfig+0xc0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <TIM_OC2_SetConfig+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC2_SetConfig+0xc0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a17      	ldr	r2, [pc, #92]	@ (8004454 <TIM_OC2_SetConfig+0x118>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d113      	bne.n	8004424 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40013400 	.word	0x40013400
 8004454:	40015000 	.word	0x40015000
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <TIM_OC3_SetConfig+0x10c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_OC3_SetConfig+0x72>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <TIM_OC3_SetConfig+0x110>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC3_SetConfig+0x72>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <TIM_OC3_SetConfig+0x114>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10d      	bne.n	80044f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004570 <TIM_OC3_SetConfig+0x10c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <TIM_OC3_SetConfig+0xbe>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <TIM_OC3_SetConfig+0x110>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00f      	beq.n	8004522 <TIM_OC3_SetConfig+0xbe>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <TIM_OC3_SetConfig+0x118>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00b      	beq.n	8004522 <TIM_OC3_SetConfig+0xbe>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <TIM_OC3_SetConfig+0x11c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <TIM_OC3_SetConfig+0xbe>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1b      	ldr	r2, [pc, #108]	@ (8004584 <TIM_OC3_SetConfig+0x120>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_OC3_SetConfig+0xbe>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <TIM_OC3_SetConfig+0x114>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d113      	bne.n	800454a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40015000 	.word	0x40015000
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800

08004588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004698 <TIM_OC4_SetConfig+0x110>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_OC4_SetConfig+0x74>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a2b      	ldr	r2, [pc, #172]	@ (800469c <TIM_OC4_SetConfig+0x114>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC4_SetConfig+0x74>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <TIM_OC4_SetConfig+0x118>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10d      	bne.n	8004618 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a1f      	ldr	r2, [pc, #124]	@ (8004698 <TIM_OC4_SetConfig+0x110>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <TIM_OC4_SetConfig+0xc0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a1e      	ldr	r2, [pc, #120]	@ (800469c <TIM_OC4_SetConfig+0x114>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00f      	beq.n	8004648 <TIM_OC4_SetConfig+0xc0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a1e      	ldr	r2, [pc, #120]	@ (80046a4 <TIM_OC4_SetConfig+0x11c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <TIM_OC4_SetConfig+0xc0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <TIM_OC4_SetConfig+0x120>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_OC4_SetConfig+0xc0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a1c      	ldr	r2, [pc, #112]	@ (80046ac <TIM_OC4_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_OC4_SetConfig+0xc0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <TIM_OC4_SetConfig+0x118>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d113      	bne.n	8004670 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800464e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004656:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40013400 	.word	0x40013400
 80046a0:	40015000 	.word	0x40015000
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800

080046b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80046f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a19      	ldr	r2, [pc, #100]	@ (800476c <TIM_OC5_SetConfig+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_OC5_SetConfig+0x82>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <TIM_OC5_SetConfig+0xc0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_OC5_SetConfig+0x82>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <TIM_OC5_SetConfig+0xc4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_OC5_SetConfig+0x82>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a16      	ldr	r2, [pc, #88]	@ (8004778 <TIM_OC5_SetConfig+0xc8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_OC5_SetConfig+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a15      	ldr	r2, [pc, #84]	@ (800477c <TIM_OC5_SetConfig+0xcc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_OC5_SetConfig+0x82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a14      	ldr	r2, [pc, #80]	@ (8004780 <TIM_OC5_SetConfig+0xd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d109      	bne.n	8004746 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	40015000 	.word	0x40015000

08004784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1a      	ldr	r2, [pc, #104]	@ (8004844 <TIM_OC6_SetConfig+0xc0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <TIM_OC6_SetConfig+0x84>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <TIM_OC6_SetConfig+0xc4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_OC6_SetConfig+0x84>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a18      	ldr	r2, [pc, #96]	@ (800484c <TIM_OC6_SetConfig+0xc8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_OC6_SetConfig+0x84>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <TIM_OC6_SetConfig+0xcc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_OC6_SetConfig+0x84>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <TIM_OC6_SetConfig+0xd0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC6_SetConfig+0x84>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a15      	ldr	r2, [pc, #84]	@ (8004858 <TIM_OC6_SetConfig+0xd4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d109      	bne.n	800481c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800480e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40013400 	.word	0x40013400
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800
 8004858:	40015000 	.word	0x40015000

0800485c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 030a 	bic.w	r3, r3, #10
 8004898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 0210 	bic.w	r2, r3, #16
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	031b      	lsls	r3, r3, #12
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	f043 0307 	orr.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	021a      	lsls	r2, r3, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	431a      	orrs	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	609a      	str	r2, [r3, #8]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2201      	movs	r2, #1
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1a      	ldr	r2, [r3, #32]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	401a      	ands	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e074      	b.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a34      	ldr	r2, [pc, #208]	@ (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a33      	ldr	r2, [pc, #204]	@ (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	@ (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d01d      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a11      	ldr	r2, [pc, #68]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40013400 	.word	0x40013400
 8004af8:	40015000 	.word	0x40015000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000

08004b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e078      	b.n	8004c1a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d11c      	bne.n	8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	051b      	lsls	r3, r3, #20
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40015000 	.word	0x40015000

08004c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	ed93 7a06 	vldr	s14, [r3, #24]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	edd3 7a06 	vldr	s15, [r3, #24]
 8004cf0:	eeb1 7a67 	vneg.f32	s14, s15
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	edd3 7a08 	vldr	s15, [r3, #32]
 8004cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	220c      	movs	r2, #12
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f912 	bl	8004f48 <memset>
  }

}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b08b      	sub	sp, #44	@ 0x2c
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	885b      	ldrh	r3, [r3, #2]
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004d5e:	e013      	b.n	8004d88 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d66:	ed93 7a00 	vldr	s14, [r3]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	1d1a      	adds	r2, r3, #4
 8004d6e:	623a      	str	r2, [r7, #32]
 8004d70:	edd3 7a00 	vldr	s15, [r3]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	1d1a      	adds	r2, r3, #4
 8004d78:	61fa      	str	r2, [r7, #28]
 8004d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d7e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e8      	bne.n	8004d60 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8004d92:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	372c      	adds	r7, #44	@ 0x2c
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	607b      	str	r3, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	817b      	strh	r3, [r7, #10]
 8004db0:	4613      	mov	r3, r2
 8004db2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	897a      	ldrh	r2, [r7, #10]
 8004db8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	893a      	ldrh	r2, [r7, #8]
 8004dbe:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	605a      	str	r2, [r3, #4]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b093      	sub	sp, #76	@ 0x4c
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	885b      	ldrh	r3, [r3, #2]
 8004e06:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	885b      	ldrh	r3, [r3, #2]
 8004e0c:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e12:	8b7b      	ldrh	r3, [r7, #26]
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8004e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8004e20:	8b3b      	ldrh	r3, [r7, #24]
 8004e22:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8004e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e32:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8004e34:	8afb      	ldrh	r3, [r7, #22]
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8004e38:	e017      	b.n	8004e6a <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8004e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e40:	ed93 7a00 	vldr	s14, [r3]
 8004e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e56:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8004e5a:	8b3b      	ldrh	r3, [r7, #24]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e60:	4413      	add	r3, r2
 8004e62:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	3b01      	subs	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e4      	bne.n	8004e3a <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e78:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8004e80:	8b3a      	ldrh	r2, [r7, #24]
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ca      	bne.n	8004e2a <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8004e94:	8b3b      	ldrh	r3, [r7, #24]
 8004e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e98:	4413      	add	r3, r2
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8004e9c:	8afb      	ldrh	r3, [r7, #22]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ea2:	4413      	add	r3, r2
 8004ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8004ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8004eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1b1      	bne.n	8004e16 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8004eb6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	374c      	adds	r7, #76	@ 0x4c
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b08b      	sub	sp, #44	@ 0x2c
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	885b      	ldrh	r3, [r3, #2]
 8004ee6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8004ee8:	89fb      	ldrh	r3, [r7, #14]
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8004efa:	89bb      	ldrh	r3, [r7, #12]
 8004efc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8004efe:	e00d      	b.n	8004f1c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	4413      	add	r3, r2
 8004f14:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ee      	bne.n	8004f00 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3301      	adds	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1dd      	bne.n	8004ef0 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004f34:	2300      	movs	r3, #0
 8004f36:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8004f38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	372c      	adds	r7, #44	@ 0x2c
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <memset>:
 8004f48:	4402      	add	r2, r0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memset+0xa>
 8004f50:	4770      	bx	lr
 8004f52:	f803 1b01 	strb.w	r1, [r3], #1
 8004f56:	e7f9      	b.n	8004f4c <memset+0x4>

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f90 <__libc_init_array+0x38>)
 8004f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f94 <__libc_init_array+0x3c>)
 8004f5e:	1b64      	subs	r4, r4, r5
 8004f60:	10a4      	asrs	r4, r4, #2
 8004f62:	2600      	movs	r6, #0
 8004f64:	42a6      	cmp	r6, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	4d0b      	ldr	r5, [pc, #44]	@ (8004f98 <__libc_init_array+0x40>)
 8004f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f9c <__libc_init_array+0x44>)
 8004f6c:	f000 f826 	bl	8004fbc <_init>
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	2600      	movs	r6, #0
 8004f76:	42a6      	cmp	r6, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f80:	4798      	blx	r3
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8a:	4798      	blx	r3
 8004f8c:	3601      	adds	r6, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	08005064 	.word	0x08005064
 8004f94:	08005064 	.word	0x08005064
 8004f98:	08005064 	.word	0x08005064
 8004f9c:	08005068 	.word	0x08005068

08004fa0 <memcpy>:
 8004fa0:	440a      	add	r2, r1
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fa8:	d100      	bne.n	8004fac <memcpy+0xc>
 8004faa:	4770      	bx	lr
 8004fac:	b510      	push	{r4, lr}
 8004fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	d1f9      	bne.n	8004fae <memcpy+0xe>
 8004fba:	bd10      	pop	{r4, pc}

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
